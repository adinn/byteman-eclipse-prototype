/*
* generated by Xtext
*/
package org.jboss.byteman.eclipse.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.jboss.byteman.eclipse.services.BytemanGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class BytemanParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private BytemanGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DomainModel_Group(this, this, 0, inst);
			case 1: return new Element_Alternatives(this, this, 1, inst);
			case 2: return new BytemanRule_Group(this, this, 2, inst);
			case 3: return new Body_Group(this, this, 3, inst);
			case 4: return new Event_Group(this, this, 4, inst);
			case 5: return new EventClass_Group(this, this, 5, inst);
			case 6: return new EventInterface_Group(this, this, 6, inst);
			case 7: return new EventMethod_Group(this, this, 7, inst);
			case 8: return new Helper_Group(this, this, 8, inst);
			case 9: return new LocationSpecifier_Alternatives(this, this, 9, inst);
			case 10: return new AtLocation_Alternatives(this, this, 10, inst);
			case 11: return new AfterLocation_Alternatives(this, this, 11, inst);
			case 12: return new AtEntry_Group(this, this, 12, inst);
			case 13: return new AtExit_Group(this, this, 13, inst);
			case 14: return new AtLine_Group(this, this, 14, inst);
			case 15: return new AtRead_Alternatives(this, this, 15, inst);
			case 16: return new AtReadField_Group(this, this, 16, inst);
			case 17: return new AtReadLocal_Group(this, this, 17, inst);
			case 18: return new AfterRead_Alternatives(this, this, 18, inst);
			case 19: return new AfterReadField_Group(this, this, 19, inst);
			case 20: return new AfterReadLocal_Group(this, this, 20, inst);
			case 21: return new AtWrite_Alternatives(this, this, 21, inst);
			case 22: return new AtWriteField_Group(this, this, 22, inst);
			case 23: return new AtWriteLocal_Group(this, this, 23, inst);
			case 24: return new AfterWrite_Alternatives(this, this, 24, inst);
			case 25: return new AfterWriteField_Group(this, this, 25, inst);
			case 26: return new AfterWriteLocal_Group(this, this, 26, inst);
			case 27: return new AtInvoke_Group(this, this, 27, inst);
			case 28: return new AfterInvoke_Group(this, this, 28, inst);
			case 29: return new AtSynchronize_Group(this, this, 29, inst);
			case 30: return new AfterSynchronize_Group(this, this, 30, inst);
			case 31: return new AtThrow_Group(this, this, 31, inst);
			case 32: return new ParameterTypes_Group(this, this, 32, inst);
			case 33: return new Bind_Group(this, this, 33, inst);
			case 34: return new Bindings_Group(this, this, 34, inst);
			case 35: return new Binding_Group(this, this, 35, inst);
			case 36: return new Condition_Group(this, this, 36, inst);
			case 37: return new Actions_Group(this, this, 37, inst);
			case 38: return new ActionList_Group(this, this, 38, inst);
			case 39: return new Action_Alternatives(this, this, 39, inst);
			case 40: return new Expression_AssignmentExprParserRuleCall(this, this, 40, inst);
			case 41: return new ReturnExpr_Group(this, this, 41, inst);
			case 42: return new ThrowExpr_Group(this, this, 42, inst);
			case 43: return new AssignmentExpr_Group(this, this, 43, inst);
			case 44: return new OperatorExpr_Group(this, this, 44, inst);
			case 45: return new PlusMinusOperand_Group(this, this, 45, inst);
			case 46: return new TimesDivOperand_Alternatives(this, this, 46, inst);
			case 47: return new BitwiseOperand_Group(this, this, 47, inst);
			case 48: return new NotOperand_Group(this, this, 48, inst);
			case 49: return new LogicalOperand_Group(this, this, 49, inst);
			case 50: return new ComparisonOperand_AccessExprParserRuleCall(this, this, 50, inst);
			case 51: return new AccessExpr_Group(this, this, 51, inst);
			case 52: return new AccessBaseExpr_Alternatives(this, this, 52, inst);
			case 53: return new BuiltinExpr_Group(this, this, 53, inst);
			case 54: return new SimpleExpr_Alternatives(this, this, 54, inst);
			case 55: return new NewExpr_Group(this, this, 55, inst);
			case 56: return new VariableExpr_Alternatives(this, this, 56, inst);
			case 57: return new CallArguments_Group(this, this, 57, inst);
			case 58: return new SimpleName_Group(this, this, 58, inst);
			case 59: return new IndexedSpecialVar_Group(this, this, 59, inst);
			case 60: return new SpecialVar_Group(this, this, 60, inst);
			case 61: return new BracketedExpr_Group(this, this, 61, inst);
			case 62: return new ConstantExpr_Alternatives(this, this, 62, inst);
			case 63: return new IntConstantExpr_Group(this, this, 63, inst);
			case 64: return new StringConstantExpr_Group(this, this, 64, inst);
			case 65: return new BooleanConstantExpr_Group(this, this, 65, inst);
			case 66: return new FloatConstantExpr_Group(this, this, 66, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule DomainModel ****************
 *
 * / *
 * 	Specification of the domain model allowing multiple rules in one script
 * 	Specification of individual rules using event, condition and action
 * 	
 * 	n.b. WS and comments are hidden in the top level rules but there is
 * 	explicit end of line (EOL) handling because the RULE, CLASS/INTERFACE,
 * 	METHOD, AT and ENDRULE keyword elements of the rule are line oriented
 * * / DomainModel:
 * 	{DomainModel} (elements+=Element | EOL)*;
 *
 **/

// {DomainModel} (elements+=Element | EOL)*
protected class DomainModel_Group extends GroupToken {
	
	public DomainModel_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDomainModelAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DomainModel_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DomainModel_DomainModelAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDomainModelAccess().getDomainModelAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {DomainModel}
protected class DomainModel_DomainModelAction_0 extends ActionToken  {

	public DomainModel_DomainModelAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getDomainModelAccess().getDomainModelAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// (elements+=Element | EOL)*
protected class DomainModel_Alternatives_1 extends AlternativesToken {

	public DomainModel_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDomainModelAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DomainModel_ElementsAssignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// elements+=Element
protected class DomainModel_ElementsAssignment_1_0 extends AssignmentToken  {
	
	public DomainModel_ElementsAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDomainModelAccess().getElementsAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Element_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elements",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDomainModelAccess().getElementsElementParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DomainModel_Alternatives_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new DomainModel_DomainModelAction_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule DomainModel ****************/


/************ begin Rule Element ****************
 *
 * Element:
 * 	BytemanRule | Helper;
 *
 **/

// BytemanRule | Helper
protected class Element_Alternatives extends AlternativesToken {

	public Element_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getElementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Element_BytemanRuleParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Element_HelperParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBytemanRuleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getHelperAccess().getHelperAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// BytemanRule
protected class Element_BytemanRuleParserRuleCall_0 extends RuleCallToken {
	
	public Element_BytemanRuleParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getBytemanRuleParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BytemanRule_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBytemanRuleRule().getType().getClassifier())
			return null;
		if(checkForRecursion(BytemanRule_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Helper
protected class Element_HelperParserRuleCall_1 extends RuleCallToken {
	
	public Element_HelperParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElementAccess().getHelperParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Helper_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getHelperAccess().getHelperAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(Helper_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Element ****************/


/************ begin Rule BytemanRule ****************
 *
 * BytemanRule:
 * 	name=START_RULE EOL* event=Event body=Body END_RULE EOL;
 *
 **/

// name=START_RULE EOL* event=Event body=Body END_RULE EOL
protected class BytemanRule_Group extends GroupToken {
	
	public BytemanRule_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBytemanRuleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BytemanRule_EOLTerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBytemanRuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=START_RULE
protected class BytemanRule_NameAssignment_0 extends AssignmentToken  {
	
	public BytemanRule_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBytemanRuleAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBytemanRuleAccess().getNameSTART_RULETerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getBytemanRuleAccess().getNameSTART_RULETerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// event=Event
protected class BytemanRule_EventAssignment_2 extends AssignmentToken  {
	
	public BytemanRule_EventAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBytemanRuleAccess().getEventAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Event_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("event",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("event");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEventRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBytemanRuleAccess().getEventEventParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BytemanRule_NameAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// body=Body
protected class BytemanRule_BodyAssignment_3 extends AssignmentToken  {
	
	public BytemanRule_BodyAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBytemanRuleAccess().getBodyAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Body_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("body",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBodyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBytemanRuleAccess().getBodyBodyParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BytemanRule_EventAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// END_RULE
protected class BytemanRule_END_RULETerminalRuleCall_4 extends UnassignedTextToken {

	public BytemanRule_END_RULETerminalRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBytemanRuleAccess().getEND_RULETerminalRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BytemanRule_BodyAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// EOL
protected class BytemanRule_EOLTerminalRuleCall_5 extends UnassignedTextToken {

	public BytemanRule_EOLTerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBytemanRuleAccess().getEOLTerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BytemanRule_END_RULETerminalRuleCall_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule BytemanRule ****************/


/************ begin Rule Body ****************
 *
 * / *
 *  * the rule body is not line-oriented so we ignore EOL below this part
 *  * / Body hidden(WS, BM_COMMENT, EOL):
 * 	bind=Bind? condition=Condition actions=Actions;
 *
 **/

// bind=Bind? condition=Condition actions=Actions
protected class Body_Group extends GroupToken {
	
	public Body_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBodyAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Body_ActionsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBodyRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// bind=Bind?
protected class Body_BindAssignment_0 extends AssignmentToken  {
	
	public Body_BindAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBodyAccess().getBindAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Bind_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("bind",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("bind");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBindRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBodyAccess().getBindBindParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// condition=Condition
protected class Body_ConditionAssignment_1 extends AssignmentToken  {
	
	public Body_ConditionAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBodyAccess().getConditionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Condition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("condition",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("condition");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConditionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBodyAccess().getConditionConditionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Body_BindAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// actions=Actions
protected class Body_ActionsAssignment_2 extends AssignmentToken  {
	
	public Body_ActionsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBodyAccess().getActionsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Actions_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("actions",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("actions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActionsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBodyAccess().getActionsActionsParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Body_ConditionAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Body ****************/


/************ begin Rule Event ****************
 *
 * / *
 * 	Definition of the event
 * * / Event:
 * 	(class=EventClass | interface=EventInterface) EOL* method=EventMethod EOL* (helper=Helper EOL*)?
 * 	(locationSpec=LocationSpecifier EOL*)?;
 *
 **/

// (class=EventClass | interface=EventInterface) EOL* method=EventMethod EOL* (helper=Helper EOL*)?
// (locationSpec=LocationSpecifier EOL*)?
protected class Event_Group extends GroupToken {
	
	public Event_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEventAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Event_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Event_Group_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Event_MethodAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEventRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// class=EventClass | interface=EventInterface
protected class Event_Alternatives_0 extends AlternativesToken {

	public Event_Alternatives_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEventAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Event_ClassAssignment_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Event_InterfaceAssignment_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// class=EventClass
protected class Event_ClassAssignment_0_0 extends AssignmentToken  {
	
	public Event_ClassAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventAccess().getClassAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventClass_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("class",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("class");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEventClassRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEventAccess().getClassEventClassParserRuleCall_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// interface=EventInterface
protected class Event_InterfaceAssignment_0_1 extends AssignmentToken  {
	
	public Event_InterfaceAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventAccess().getInterfaceAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventInterface_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("interface",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("interface");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEventInterfaceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEventAccess().getInterfaceEventInterfaceParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


// method=EventMethod
protected class Event_MethodAssignment_2 extends AssignmentToken  {
	
	public Event_MethodAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventAccess().getMethodAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventMethod_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("method",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("method");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEventMethodRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEventAccess().getMethodEventMethodParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Event_Alternatives_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (helper=Helper EOL*)?
protected class Event_Group_4 extends GroupToken {
	
	public Event_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEventAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Event_HelperAssignment_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// helper=Helper
protected class Event_HelperAssignment_4_0 extends AssignmentToken  {
	
	public Event_HelperAssignment_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventAccess().getHelperAssignment_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Helper_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("helper",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("helper");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getHelperRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEventAccess().getHelperHelperParserRuleCall_4_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Event_MethodAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// (locationSpec=LocationSpecifier EOL*)?
protected class Event_Group_5 extends GroupToken {
	
	public Event_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEventAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Event_LocationSpecAssignment_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// locationSpec=LocationSpecifier
protected class Event_LocationSpecAssignment_5_0 extends AssignmentToken  {
	
	public Event_LocationSpecAssignment_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventAccess().getLocationSpecAssignment_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocationSpecifier_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("locationSpec",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("locationSpec");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLocationSpecifierRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEventAccess().getLocationSpecLocationSpecifierParserRuleCall_5_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Event_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Event_MethodAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Event ****************/


/************ begin Rule EventClass ****************
 *
 * EventClass:
 * 	keyword=KEYWORD_CLASS name=QualifiedName;
 *
 **/

// keyword=KEYWORD_CLASS name=QualifiedName
protected class EventClass_Group extends GroupToken {
	
	public EventClass_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEventClassAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventClass_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEventClassRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// keyword=KEYWORD_CLASS
protected class EventClass_KeywordAssignment_0 extends AssignmentToken  {
	
	public EventClass_KeywordAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventClassAccess().getKeywordAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("keyword",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("keyword");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEventClassAccess().getKeywordKEYWORD_CLASSTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEventClassAccess().getKeywordKEYWORD_CLASSTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// name=QualifiedName
protected class EventClass_NameAssignment_1 extends AssignmentToken  {
	
	public EventClass_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventClassAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventClass_KeywordAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEventClassAccess().getNameQualifiedNameParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getEventClassAccess().getNameQualifiedNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule EventClass ****************/


/************ begin Rule EventInterface ****************
 *
 * EventInterface:
 * 	keyword=KEYWORD_INTERFACE name=QualifiedName;
 *
 **/

// keyword=KEYWORD_INTERFACE name=QualifiedName
protected class EventInterface_Group extends GroupToken {
	
	public EventInterface_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEventInterfaceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventInterface_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEventInterfaceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// keyword=KEYWORD_INTERFACE
protected class EventInterface_KeywordAssignment_0 extends AssignmentToken  {
	
	public EventInterface_KeywordAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventInterfaceAccess().getKeywordAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("keyword",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("keyword");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEventInterfaceAccess().getKeywordKEYWORD_INTERFACETerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEventInterfaceAccess().getKeywordKEYWORD_INTERFACETerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// name=QualifiedName
protected class EventInterface_NameAssignment_1 extends AssignmentToken  {
	
	public EventInterface_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventInterfaceAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventInterface_KeywordAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEventInterfaceAccess().getNameQualifiedNameParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getEventInterfaceAccess().getNameQualifiedNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule EventInterface ****************/


/************ begin Rule EventMethod ****************
 *
 * EventMethod:
 * 	KEYWORD_METHOD name=MethodName parameterTypes=ParameterTypes?;
 *
 **/

// KEYWORD_METHOD name=MethodName parameterTypes=ParameterTypes?
protected class EventMethod_Group extends GroupToken {
	
	public EventMethod_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEventMethodAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventMethod_ParameterTypesAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EventMethod_NameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEventMethodRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// KEYWORD_METHOD
protected class EventMethod_KEYWORD_METHODTerminalRuleCall_0 extends UnassignedTextToken {

	public EventMethod_KEYWORD_METHODTerminalRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEventMethodAccess().getKEYWORD_METHODTerminalRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=MethodName
protected class EventMethod_NameAssignment_1 extends AssignmentToken  {
	
	public EventMethod_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventMethodAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventMethod_KEYWORD_METHODTerminalRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEventMethodAccess().getNameMethodNameParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getEventMethodAccess().getNameMethodNameParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// parameterTypes=ParameterTypes?
protected class EventMethod_ParameterTypesAssignment_2 extends AssignmentToken  {
	
	public EventMethod_ParameterTypesAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventMethodAccess().getParameterTypesAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterTypes_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameterTypes",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameterTypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterTypesRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEventMethodAccess().getParameterTypesParameterTypesParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EventMethod_NameAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule EventMethod ****************/



/************ begin Rule Helper ****************
 *
 * Helper:
 * 	{Helper} "HELPER" helper=QualifiedName?;
 *
 **/

// {Helper} "HELPER" helper=QualifiedName?
protected class Helper_Group extends GroupToken {
	
	public Helper_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getHelperAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Helper_HelperAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Helper_HELPERKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getHelperAccess().getHelperAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Helper}
protected class Helper_HelperAction_0 extends ActionToken  {

	public Helper_HelperAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getHelperAccess().getHelperAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "HELPER"
protected class Helper_HELPERKeyword_1 extends KeywordToken  {
	
	public Helper_HELPERKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getHelperAccess().getHELPERKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Helper_HelperAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// helper=QualifiedName?
protected class Helper_HelperAssignment_2 extends AssignmentToken  {
	
	public Helper_HelperAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getHelperAccess().getHelperAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Helper_HELPERKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("helper",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("helper");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getHelperAccess().getHelperQualifiedNameParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getHelperAccess().getHelperQualifiedNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Helper ****************/


/************ begin Rule LocationSpecifier ****************
 *
 * LocationSpecifier:
 * 	"AT" AtLocation | "AFTER" AfterLocation | AtLine;
 *
 **/

// "AT" AtLocation | "AFTER" AfterLocation | AtLine
protected class LocationSpecifier_Alternatives extends AlternativesToken {

	public LocationSpecifier_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getLocationSpecifierAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocationSpecifier_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LocationSpecifier_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new LocationSpecifier_AtLineParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterInvokeAccess().getAfterInvokeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAfterReadFieldAccess().getAfterReadFieldAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAfterReadLocalAccess().getAfterReadLocalAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAfterSynchronizeAccess().getAfterSynchronizeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAfterWriteFieldAccess().getAfterWriteFieldAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAfterWriteLocalAccess().getAfterWriteLocalAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtEntryAccess().getAtEntryAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExitAccess().getAtExitAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtInvokeAccess().getAtInvokeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtLineAccess().getAtLineAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtReadFieldAccess().getAtReadFieldAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtReadLocalAccess().getAtReadLocalAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtSynchronizeAccess().getAtSynchronizeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtThrowAccess().getAtThrowAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtWriteFieldAccess().getAtWriteFieldAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtWriteLocalAccess().getAtWriteLocalAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "AT" AtLocation
protected class LocationSpecifier_Group_0 extends GroupToken {
	
	public LocationSpecifier_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLocationSpecifierAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocationSpecifier_AtLocationParserRuleCall_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtEntryAccess().getAtEntryAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExitAccess().getAtExitAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtInvokeAccess().getAtInvokeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtLineAccess().getAtLineAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtReadFieldAccess().getAtReadFieldAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtReadLocalAccess().getAtReadLocalAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtSynchronizeAccess().getAtSynchronizeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtThrowAccess().getAtThrowAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtWriteFieldAccess().getAtWriteFieldAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtWriteLocalAccess().getAtWriteLocalAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "AT"
protected class LocationSpecifier_ATKeyword_0_0 extends KeywordToken  {
	
	public LocationSpecifier_ATKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLocationSpecifierAccess().getATKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// AtLocation
protected class LocationSpecifier_AtLocationParserRuleCall_0_1 extends RuleCallToken {
	
	public LocationSpecifier_AtLocationParserRuleCall_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLocationSpecifierAccess().getAtLocationParserRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtLocation_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(AtLocation_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocationSpecifier_ATKeyword_0_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}


// "AFTER" AfterLocation
protected class LocationSpecifier_Group_1 extends GroupToken {
	
	public LocationSpecifier_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLocationSpecifierAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocationSpecifier_AfterLocationParserRuleCall_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterInvokeAccess().getAfterInvokeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAfterReadFieldAccess().getAfterReadFieldAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAfterReadLocalAccess().getAfterReadLocalAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAfterSynchronizeAccess().getAfterSynchronizeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAfterWriteFieldAccess().getAfterWriteFieldAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAfterWriteLocalAccess().getAfterWriteLocalAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtThrowAccess().getAtThrowAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "AFTER"
protected class LocationSpecifier_AFTERKeyword_1_0 extends KeywordToken  {
	
	public LocationSpecifier_AFTERKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLocationSpecifierAccess().getAFTERKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// AfterLocation
protected class LocationSpecifier_AfterLocationParserRuleCall_1_1 extends RuleCallToken {
	
	public LocationSpecifier_AfterLocationParserRuleCall_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLocationSpecifierAccess().getAfterLocationParserRuleCall_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterLocation_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(AfterLocation_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LocationSpecifier_AFTERKeyword_1_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}


// AtLine
protected class LocationSpecifier_AtLineParserRuleCall_2 extends RuleCallToken {
	
	public LocationSpecifier_AtLineParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLocationSpecifierAccess().getAtLineParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtLine_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtLineAccess().getAtLineAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AtLine_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule LocationSpecifier ****************/


/************ begin Rule AtLocation ****************
 *
 * AtLocation:
 * 	AtEntry | AtExit | AtLine | AtRead | AtWrite | AtInvoke | AtSynchronize | AtThrow;
 *
 **/

// AtEntry | AtExit | AtLine | AtRead | AtWrite | AtInvoke | AtSynchronize | AtThrow
protected class AtLocation_Alternatives extends AlternativesToken {

	public AtLocation_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAtLocationAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtLocation_AtEntryParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AtLocation_AtExitParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new AtLocation_AtLineParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new AtLocation_AtReadParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new AtLocation_AtWriteParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new AtLocation_AtInvokeParserRuleCall_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new AtLocation_AtSynchronizeParserRuleCall_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new AtLocation_AtThrowParserRuleCall_7(lastRuleCallOrigin, this, 7, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtEntryAccess().getAtEntryAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtExitAccess().getAtExitAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtInvokeAccess().getAtInvokeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtLineAccess().getAtLineAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtReadFieldAccess().getAtReadFieldAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtReadLocalAccess().getAtReadLocalAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtSynchronizeAccess().getAtSynchronizeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtThrowAccess().getAtThrowAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtWriteFieldAccess().getAtWriteFieldAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtWriteLocalAccess().getAtWriteLocalAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AtEntry
protected class AtLocation_AtEntryParserRuleCall_0 extends RuleCallToken {
	
	public AtLocation_AtEntryParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtLocationAccess().getAtEntryParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtEntry_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtEntryAccess().getAtEntryAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AtEntry_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AtExit
protected class AtLocation_AtExitParserRuleCall_1 extends RuleCallToken {
	
	public AtLocation_AtExitParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtLocationAccess().getAtExitParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtExit_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtExitAccess().getAtExitAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AtExit_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AtLine
protected class AtLocation_AtLineParserRuleCall_2 extends RuleCallToken {
	
	public AtLocation_AtLineParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtLocationAccess().getAtLineParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtLine_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtLineAccess().getAtLineAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AtLine_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AtRead
protected class AtLocation_AtReadParserRuleCall_3 extends RuleCallToken {
	
	public AtLocation_AtReadParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtLocationAccess().getAtReadParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtRead_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtReadFieldAccess().getAtReadFieldAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtReadLocalAccess().getAtReadLocalAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AtRead_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AtWrite
protected class AtLocation_AtWriteParserRuleCall_4 extends RuleCallToken {
	
	public AtLocation_AtWriteParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtLocationAccess().getAtWriteParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtWrite_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtWriteFieldAccess().getAtWriteFieldAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtWriteLocalAccess().getAtWriteLocalAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AtWrite_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AtInvoke
protected class AtLocation_AtInvokeParserRuleCall_5 extends RuleCallToken {
	
	public AtLocation_AtInvokeParserRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtLocationAccess().getAtInvokeParserRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtInvoke_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtInvokeAccess().getAtInvokeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AtInvoke_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AtSynchronize
protected class AtLocation_AtSynchronizeParserRuleCall_6 extends RuleCallToken {
	
	public AtLocation_AtSynchronizeParserRuleCall_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtLocationAccess().getAtSynchronizeParserRuleCall_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtSynchronize_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtSynchronizeAccess().getAtSynchronizeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AtSynchronize_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AtThrow
protected class AtLocation_AtThrowParserRuleCall_7 extends RuleCallToken {
	
	public AtLocation_AtThrowParserRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtLocationAccess().getAtThrowParserRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtThrow_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtThrowAccess().getAtThrowAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AtThrow_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule AtLocation ****************/


/************ begin Rule AfterLocation ****************
 *
 * AfterLocation:
 * 	AfterRead | AfterWrite | AfterInvoke | AfterSynchronize | AtThrow;
 *
 **/

// AfterRead | AfterWrite | AfterInvoke | AfterSynchronize | AtThrow
protected class AfterLocation_Alternatives extends AlternativesToken {

	public AfterLocation_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAfterLocationAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterLocation_AfterReadParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AfterLocation_AfterWriteParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new AfterLocation_AfterInvokeParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new AfterLocation_AfterSynchronizeParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new AfterLocation_AtThrowParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterInvokeAccess().getAfterInvokeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAfterReadFieldAccess().getAfterReadFieldAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAfterReadLocalAccess().getAfterReadLocalAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAfterSynchronizeAccess().getAfterSynchronizeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAfterWriteFieldAccess().getAfterWriteFieldAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAfterWriteLocalAccess().getAfterWriteLocalAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtThrowAccess().getAtThrowAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AfterRead
protected class AfterLocation_AfterReadParserRuleCall_0 extends RuleCallToken {
	
	public AfterLocation_AfterReadParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAfterLocationAccess().getAfterReadParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterRead_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterReadFieldAccess().getAfterReadFieldAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAfterReadLocalAccess().getAfterReadLocalAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AfterRead_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AfterWrite
protected class AfterLocation_AfterWriteParserRuleCall_1 extends RuleCallToken {
	
	public AfterLocation_AfterWriteParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAfterLocationAccess().getAfterWriteParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterWrite_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterWriteFieldAccess().getAfterWriteFieldAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAfterWriteLocalAccess().getAfterWriteLocalAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AfterWrite_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AfterInvoke
protected class AfterLocation_AfterInvokeParserRuleCall_2 extends RuleCallToken {
	
	public AfterLocation_AfterInvokeParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAfterLocationAccess().getAfterInvokeParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterInvoke_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterInvokeAccess().getAfterInvokeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AfterInvoke_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AfterSynchronize
protected class AfterLocation_AfterSynchronizeParserRuleCall_3 extends RuleCallToken {
	
	public AfterLocation_AfterSynchronizeParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAfterLocationAccess().getAfterSynchronizeParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterSynchronize_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterSynchronizeAccess().getAfterSynchronizeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AfterSynchronize_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AtThrow
protected class AfterLocation_AtThrowParserRuleCall_4 extends RuleCallToken {
	
	public AfterLocation_AtThrowParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAfterLocationAccess().getAtThrowParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtThrow_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtThrowAccess().getAtThrowAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AtThrow_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule AfterLocation ****************/


/************ begin Rule AtEntry ****************
 *
 * AtEntry:
 * 	{AtEntry} "ENTRY";
 *
 **/

// {AtEntry} "ENTRY"
protected class AtEntry_Group extends GroupToken {
	
	public AtEntry_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAtEntryAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtEntry_ENTRYKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtEntryAccess().getAtEntryAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AtEntry}
protected class AtEntry_AtEntryAction_0 extends ActionToken  {

	public AtEntry_AtEntryAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAtEntryAccess().getAtEntryAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "ENTRY"
protected class AtEntry_ENTRYKeyword_1 extends KeywordToken  {
	
	public AtEntry_ENTRYKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAtEntryAccess().getENTRYKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtEntry_AtEntryAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule AtEntry ****************/


/************ begin Rule AtExit ****************
 *
 * AtExit:
 * 	{AtExit} ("EXIT" | KEYWORD_RETURN);
 *
 **/

// {AtExit} ("EXIT" | KEYWORD_RETURN)
protected class AtExit_Group extends GroupToken {
	
	public AtExit_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAtExitAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtExit_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtExitAccess().getAtExitAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AtExit}
protected class AtExit_AtExitAction_0 extends ActionToken  {

	public AtExit_AtExitAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAtExitAccess().getAtExitAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "EXIT" | KEYWORD_RETURN
protected class AtExit_Alternatives_1 extends AlternativesToken {

	public AtExit_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAtExitAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtExit_EXITKeyword_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "EXIT"
protected class AtExit_EXITKeyword_1_0 extends KeywordToken  {
	
	public AtExit_EXITKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAtExitAccess().getEXITKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtExit_AtExitAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule AtExit ****************/


/************ begin Rule AtLine ****************
 *
 * AtLine:
 * 	{AtLine} "LINE" line=INTVAL;
 *
 **/

// {AtLine} "LINE" line=INTVAL
protected class AtLine_Group extends GroupToken {
	
	public AtLine_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAtLineAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtLine_LineAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtLineAccess().getAtLineAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AtLine}
protected class AtLine_AtLineAction_0 extends ActionToken  {

	public AtLine_AtLineAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAtLineAccess().getAtLineAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "LINE"
protected class AtLine_LINEKeyword_1 extends KeywordToken  {
	
	public AtLine_LINEKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAtLineAccess().getLINEKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtLine_AtLineAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// line=INTVAL
protected class AtLine_LineAssignment_2 extends AssignmentToken  {
	
	public AtLine_LineAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAtLineAccess().getLineAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtLine_LINEKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("line",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("line");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAtLineAccess().getLineINTVALTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAtLineAccess().getLineINTVALTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AtLine ****************/


/************ begin Rule AtRead ****************
 *
 * AtRead:
 * 	AtReadField | AtReadLocal;
 *
 **/

// AtReadField | AtReadLocal
protected class AtRead_Alternatives extends AlternativesToken {

	public AtRead_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAtReadAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtRead_AtReadFieldParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AtRead_AtReadLocalParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtReadFieldAccess().getAtReadFieldAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtReadLocalAccess().getAtReadLocalAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AtReadField
protected class AtRead_AtReadFieldParserRuleCall_0 extends RuleCallToken {
	
	public AtRead_AtReadFieldParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtReadAccess().getAtReadFieldParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtReadField_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtReadFieldAccess().getAtReadFieldAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AtReadField_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AtReadLocal
protected class AtRead_AtReadLocalParserRuleCall_1 extends RuleCallToken {
	
	public AtRead_AtReadLocalParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtReadAccess().getAtReadLocalParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtReadLocal_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtReadLocalAccess().getAtReadLocalAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AtReadLocal_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule AtRead ****************/


/************ begin Rule AtReadField ****************
 *
 * AtReadField:
 * 	{AtReadField} "READ" name=QualifiedName counter=Counter?;
 *
 **/

// {AtReadField} "READ" name=QualifiedName counter=Counter?
protected class AtReadField_Group extends GroupToken {
	
	public AtReadField_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAtReadFieldAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtReadField_CounterAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AtReadField_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtReadFieldAccess().getAtReadFieldAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AtReadField}
protected class AtReadField_AtReadFieldAction_0 extends ActionToken  {

	public AtReadField_AtReadFieldAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAtReadFieldAccess().getAtReadFieldAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "READ"
protected class AtReadField_READKeyword_1 extends KeywordToken  {
	
	public AtReadField_READKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAtReadFieldAccess().getREADKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtReadField_AtReadFieldAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=QualifiedName
protected class AtReadField_NameAssignment_2 extends AssignmentToken  {
	
	public AtReadField_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAtReadFieldAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtReadField_READKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAtReadFieldAccess().getNameQualifiedNameParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAtReadFieldAccess().getNameQualifiedNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// counter=Counter?
protected class AtReadField_CounterAssignment_3 extends AssignmentToken  {
	
	public AtReadField_CounterAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAtReadFieldAccess().getCounterAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtReadField_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("counter",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("counter");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAtReadFieldAccess().getCounterCounterParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAtReadFieldAccess().getCounterCounterParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AtReadField ****************/


/************ begin Rule AtReadLocal ****************
 *
 * AtReadLocal:
 * 	{AtReadLocal} "READ" DOLLAR name=ID counter=Counter?;
 *
 **/

// {AtReadLocal} "READ" DOLLAR name=ID counter=Counter?
protected class AtReadLocal_Group extends GroupToken {
	
	public AtReadLocal_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAtReadLocalAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtReadLocal_CounterAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AtReadLocal_NameAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtReadLocalAccess().getAtReadLocalAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AtReadLocal}
protected class AtReadLocal_AtReadLocalAction_0 extends ActionToken  {

	public AtReadLocal_AtReadLocalAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAtReadLocalAccess().getAtReadLocalAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "READ"
protected class AtReadLocal_READKeyword_1 extends KeywordToken  {
	
	public AtReadLocal_READKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAtReadLocalAccess().getREADKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtReadLocal_AtReadLocalAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// DOLLAR
protected class AtReadLocal_DOLLARTerminalRuleCall_2 extends UnassignedTextToken {

	public AtReadLocal_DOLLARTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtReadLocalAccess().getDOLLARTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtReadLocal_READKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class AtReadLocal_NameAssignment_3 extends AssignmentToken  {
	
	public AtReadLocal_NameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAtReadLocalAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtReadLocal_DOLLARTerminalRuleCall_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAtReadLocalAccess().getNameIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAtReadLocalAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// counter=Counter?
protected class AtReadLocal_CounterAssignment_4 extends AssignmentToken  {
	
	public AtReadLocal_CounterAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAtReadLocalAccess().getCounterAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtReadLocal_NameAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("counter",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("counter");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAtReadLocalAccess().getCounterCounterParserRuleCall_4_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAtReadLocalAccess().getCounterCounterParserRuleCall_4_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AtReadLocal ****************/


/************ begin Rule AfterRead ****************
 *
 * AfterRead:
 * 	AfterReadField | AfterReadLocal;
 *
 **/

// AfterReadField | AfterReadLocal
protected class AfterRead_Alternatives extends AlternativesToken {

	public AfterRead_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAfterReadAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterRead_AfterReadFieldParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AfterRead_AfterReadLocalParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterReadFieldAccess().getAfterReadFieldAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAfterReadLocalAccess().getAfterReadLocalAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AfterReadField
protected class AfterRead_AfterReadFieldParserRuleCall_0 extends RuleCallToken {
	
	public AfterRead_AfterReadFieldParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAfterReadAccess().getAfterReadFieldParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterReadField_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterReadFieldAccess().getAfterReadFieldAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AfterReadField_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AfterReadLocal
protected class AfterRead_AfterReadLocalParserRuleCall_1 extends RuleCallToken {
	
	public AfterRead_AfterReadLocalParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAfterReadAccess().getAfterReadLocalParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterReadLocal_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterReadLocalAccess().getAfterReadLocalAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AfterReadLocal_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule AfterRead ****************/


/************ begin Rule AfterReadField ****************
 *
 * AfterReadField:
 * 	{AfterReadField} "READ" name=QualifiedName counter=Counter?;
 *
 **/

// {AfterReadField} "READ" name=QualifiedName counter=Counter?
protected class AfterReadField_Group extends GroupToken {
	
	public AfterReadField_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAfterReadFieldAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterReadField_CounterAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AfterReadField_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterReadFieldAccess().getAfterReadFieldAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AfterReadField}
protected class AfterReadField_AfterReadFieldAction_0 extends ActionToken  {

	public AfterReadField_AfterReadFieldAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAfterReadFieldAccess().getAfterReadFieldAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "READ"
protected class AfterReadField_READKeyword_1 extends KeywordToken  {
	
	public AfterReadField_READKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAfterReadFieldAccess().getREADKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterReadField_AfterReadFieldAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=QualifiedName
protected class AfterReadField_NameAssignment_2 extends AssignmentToken  {
	
	public AfterReadField_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAfterReadFieldAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterReadField_READKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAfterReadFieldAccess().getNameQualifiedNameParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAfterReadFieldAccess().getNameQualifiedNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// counter=Counter?
protected class AfterReadField_CounterAssignment_3 extends AssignmentToken  {
	
	public AfterReadField_CounterAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAfterReadFieldAccess().getCounterAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterReadField_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("counter",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("counter");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAfterReadFieldAccess().getCounterCounterParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAfterReadFieldAccess().getCounterCounterParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AfterReadField ****************/


/************ begin Rule AfterReadLocal ****************
 *
 * AfterReadLocal:
 * 	{AfterReadLocal} "READ" DOLLAR name=ID counter=Counter?;
 *
 **/

// {AfterReadLocal} "READ" DOLLAR name=ID counter=Counter?
protected class AfterReadLocal_Group extends GroupToken {
	
	public AfterReadLocal_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAfterReadLocalAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterReadLocal_CounterAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AfterReadLocal_NameAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterReadLocalAccess().getAfterReadLocalAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AfterReadLocal}
protected class AfterReadLocal_AfterReadLocalAction_0 extends ActionToken  {

	public AfterReadLocal_AfterReadLocalAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAfterReadLocalAccess().getAfterReadLocalAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "READ"
protected class AfterReadLocal_READKeyword_1 extends KeywordToken  {
	
	public AfterReadLocal_READKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAfterReadLocalAccess().getREADKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterReadLocal_AfterReadLocalAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// DOLLAR
protected class AfterReadLocal_DOLLARTerminalRuleCall_2 extends UnassignedTextToken {

	public AfterReadLocal_DOLLARTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAfterReadLocalAccess().getDOLLARTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterReadLocal_READKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class AfterReadLocal_NameAssignment_3 extends AssignmentToken  {
	
	public AfterReadLocal_NameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAfterReadLocalAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterReadLocal_DOLLARTerminalRuleCall_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAfterReadLocalAccess().getNameIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAfterReadLocalAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// counter=Counter?
protected class AfterReadLocal_CounterAssignment_4 extends AssignmentToken  {
	
	public AfterReadLocal_CounterAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAfterReadLocalAccess().getCounterAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterReadLocal_NameAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("counter",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("counter");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAfterReadLocalAccess().getCounterCounterParserRuleCall_4_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAfterReadLocalAccess().getCounterCounterParserRuleCall_4_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AfterReadLocal ****************/


/************ begin Rule AtWrite ****************
 *
 * AtWrite:
 * 	AtWriteField | AtWriteLocal;
 *
 **/

// AtWriteField | AtWriteLocal
protected class AtWrite_Alternatives extends AlternativesToken {

	public AtWrite_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAtWriteAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtWrite_AtWriteFieldParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AtWrite_AtWriteLocalParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtWriteFieldAccess().getAtWriteFieldAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAtWriteLocalAccess().getAtWriteLocalAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AtWriteField
protected class AtWrite_AtWriteFieldParserRuleCall_0 extends RuleCallToken {
	
	public AtWrite_AtWriteFieldParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtWriteAccess().getAtWriteFieldParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtWriteField_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtWriteFieldAccess().getAtWriteFieldAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AtWriteField_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AtWriteLocal
protected class AtWrite_AtWriteLocalParserRuleCall_1 extends RuleCallToken {
	
	public AtWrite_AtWriteLocalParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtWriteAccess().getAtWriteLocalParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtWriteLocal_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtWriteLocalAccess().getAtWriteLocalAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AtWriteLocal_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule AtWrite ****************/


/************ begin Rule AtWriteField ****************
 *
 * AtWriteField:
 * 	{AtWriteField} "WRITE" name=QualifiedName counter=Counter?;
 *
 **/

// {AtWriteField} "WRITE" name=QualifiedName counter=Counter?
protected class AtWriteField_Group extends GroupToken {
	
	public AtWriteField_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAtWriteFieldAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtWriteField_CounterAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AtWriteField_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtWriteFieldAccess().getAtWriteFieldAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AtWriteField}
protected class AtWriteField_AtWriteFieldAction_0 extends ActionToken  {

	public AtWriteField_AtWriteFieldAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAtWriteFieldAccess().getAtWriteFieldAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "WRITE"
protected class AtWriteField_WRITEKeyword_1 extends KeywordToken  {
	
	public AtWriteField_WRITEKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAtWriteFieldAccess().getWRITEKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtWriteField_AtWriteFieldAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=QualifiedName
protected class AtWriteField_NameAssignment_2 extends AssignmentToken  {
	
	public AtWriteField_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAtWriteFieldAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtWriteField_WRITEKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAtWriteFieldAccess().getNameQualifiedNameParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAtWriteFieldAccess().getNameQualifiedNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// counter=Counter?
protected class AtWriteField_CounterAssignment_3 extends AssignmentToken  {
	
	public AtWriteField_CounterAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAtWriteFieldAccess().getCounterAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtWriteField_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("counter",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("counter");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAtWriteFieldAccess().getCounterCounterParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAtWriteFieldAccess().getCounterCounterParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AtWriteField ****************/


/************ begin Rule AtWriteLocal ****************
 *
 * AtWriteLocal:
 * 	{AtWriteLocal} "WRITE" DOLLAR name=ID counter=Counter?;
 *
 **/

// {AtWriteLocal} "WRITE" DOLLAR name=ID counter=Counter?
protected class AtWriteLocal_Group extends GroupToken {
	
	public AtWriteLocal_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAtWriteLocalAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtWriteLocal_CounterAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AtWriteLocal_NameAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtWriteLocalAccess().getAtWriteLocalAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AtWriteLocal}
protected class AtWriteLocal_AtWriteLocalAction_0 extends ActionToken  {

	public AtWriteLocal_AtWriteLocalAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAtWriteLocalAccess().getAtWriteLocalAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "WRITE"
protected class AtWriteLocal_WRITEKeyword_1 extends KeywordToken  {
	
	public AtWriteLocal_WRITEKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAtWriteLocalAccess().getWRITEKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtWriteLocal_AtWriteLocalAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// DOLLAR
protected class AtWriteLocal_DOLLARTerminalRuleCall_2 extends UnassignedTextToken {

	public AtWriteLocal_DOLLARTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtWriteLocalAccess().getDOLLARTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtWriteLocal_WRITEKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class AtWriteLocal_NameAssignment_3 extends AssignmentToken  {
	
	public AtWriteLocal_NameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAtWriteLocalAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtWriteLocal_DOLLARTerminalRuleCall_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAtWriteLocalAccess().getNameIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAtWriteLocalAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// counter=Counter?
protected class AtWriteLocal_CounterAssignment_4 extends AssignmentToken  {
	
	public AtWriteLocal_CounterAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAtWriteLocalAccess().getCounterAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtWriteLocal_NameAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("counter",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("counter");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAtWriteLocalAccess().getCounterCounterParserRuleCall_4_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAtWriteLocalAccess().getCounterCounterParserRuleCall_4_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AtWriteLocal ****************/


/************ begin Rule AfterWrite ****************
 *
 * AfterWrite:
 * 	AfterWriteField | AfterWriteLocal;
 *
 **/

// AfterWriteField | AfterWriteLocal
protected class AfterWrite_Alternatives extends AlternativesToken {

	public AfterWrite_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAfterWriteAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterWrite_AfterWriteFieldParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AfterWrite_AfterWriteLocalParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterWriteFieldAccess().getAfterWriteFieldAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAfterWriteLocalAccess().getAfterWriteLocalAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AfterWriteField
protected class AfterWrite_AfterWriteFieldParserRuleCall_0 extends RuleCallToken {
	
	public AfterWrite_AfterWriteFieldParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAfterWriteAccess().getAfterWriteFieldParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterWriteField_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterWriteFieldAccess().getAfterWriteFieldAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AfterWriteField_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AfterWriteLocal
protected class AfterWrite_AfterWriteLocalParserRuleCall_1 extends RuleCallToken {
	
	public AfterWrite_AfterWriteLocalParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAfterWriteAccess().getAfterWriteLocalParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterWriteLocal_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterWriteLocalAccess().getAfterWriteLocalAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AfterWriteLocal_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule AfterWrite ****************/


/************ begin Rule AfterWriteField ****************
 *
 * AfterWriteField:
 * 	{AfterWriteField} "WRITE" name=QualifiedName counter=Counter?;
 *
 **/

// {AfterWriteField} "WRITE" name=QualifiedName counter=Counter?
protected class AfterWriteField_Group extends GroupToken {
	
	public AfterWriteField_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAfterWriteFieldAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterWriteField_CounterAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AfterWriteField_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterWriteFieldAccess().getAfterWriteFieldAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AfterWriteField}
protected class AfterWriteField_AfterWriteFieldAction_0 extends ActionToken  {

	public AfterWriteField_AfterWriteFieldAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAfterWriteFieldAccess().getAfterWriteFieldAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "WRITE"
protected class AfterWriteField_WRITEKeyword_1 extends KeywordToken  {
	
	public AfterWriteField_WRITEKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAfterWriteFieldAccess().getWRITEKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterWriteField_AfterWriteFieldAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=QualifiedName
protected class AfterWriteField_NameAssignment_2 extends AssignmentToken  {
	
	public AfterWriteField_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAfterWriteFieldAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterWriteField_WRITEKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAfterWriteFieldAccess().getNameQualifiedNameParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAfterWriteFieldAccess().getNameQualifiedNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// counter=Counter?
protected class AfterWriteField_CounterAssignment_3 extends AssignmentToken  {
	
	public AfterWriteField_CounterAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAfterWriteFieldAccess().getCounterAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterWriteField_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("counter",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("counter");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAfterWriteFieldAccess().getCounterCounterParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAfterWriteFieldAccess().getCounterCounterParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AfterWriteField ****************/


/************ begin Rule AfterWriteLocal ****************
 *
 * AfterWriteLocal:
 * 	{AfterWriteLocal} "WRITE" DOLLAR name=ID counter=Counter?;
 *
 **/

// {AfterWriteLocal} "WRITE" DOLLAR name=ID counter=Counter?
protected class AfterWriteLocal_Group extends GroupToken {
	
	public AfterWriteLocal_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAfterWriteLocalAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterWriteLocal_CounterAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AfterWriteLocal_NameAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterWriteLocalAccess().getAfterWriteLocalAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AfterWriteLocal}
protected class AfterWriteLocal_AfterWriteLocalAction_0 extends ActionToken  {

	public AfterWriteLocal_AfterWriteLocalAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAfterWriteLocalAccess().getAfterWriteLocalAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "WRITE"
protected class AfterWriteLocal_WRITEKeyword_1 extends KeywordToken  {
	
	public AfterWriteLocal_WRITEKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAfterWriteLocalAccess().getWRITEKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterWriteLocal_AfterWriteLocalAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// DOLLAR
protected class AfterWriteLocal_DOLLARTerminalRuleCall_2 extends UnassignedTextToken {

	public AfterWriteLocal_DOLLARTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAfterWriteLocalAccess().getDOLLARTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterWriteLocal_WRITEKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class AfterWriteLocal_NameAssignment_3 extends AssignmentToken  {
	
	public AfterWriteLocal_NameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAfterWriteLocalAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterWriteLocal_DOLLARTerminalRuleCall_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAfterWriteLocalAccess().getNameIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAfterWriteLocalAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// counter=Counter?
protected class AfterWriteLocal_CounterAssignment_4 extends AssignmentToken  {
	
	public AfterWriteLocal_CounterAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAfterWriteLocalAccess().getCounterAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterWriteLocal_NameAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("counter",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("counter");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAfterWriteLocalAccess().getCounterCounterParserRuleCall_4_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAfterWriteLocalAccess().getCounterCounterParserRuleCall_4_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AfterWriteLocal ****************/


/************ begin Rule AtInvoke ****************
 *
 * AtInvoke:
 * 	{AtInvoke} ("INVOKE" | "CALL") name=QualifiedName parameterTypes=ParameterTypes? counter=Counter?;
 *
 **/

// {AtInvoke} ("INVOKE" | "CALL") name=QualifiedName parameterTypes=ParameterTypes? counter=Counter?
protected class AtInvoke_Group extends GroupToken {
	
	public AtInvoke_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAtInvokeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtInvoke_CounterAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AtInvoke_ParameterTypesAssignment_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new AtInvoke_NameAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtInvokeAccess().getAtInvokeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AtInvoke}
protected class AtInvoke_AtInvokeAction_0 extends ActionToken  {

	public AtInvoke_AtInvokeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAtInvokeAccess().getAtInvokeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "INVOKE" | "CALL"
protected class AtInvoke_Alternatives_1 extends AlternativesToken {

	public AtInvoke_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAtInvokeAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtInvoke_INVOKEKeyword_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "INVOKE"
protected class AtInvoke_INVOKEKeyword_1_0 extends KeywordToken  {
	
	public AtInvoke_INVOKEKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAtInvokeAccess().getINVOKEKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtInvoke_AtInvokeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// name=QualifiedName
protected class AtInvoke_NameAssignment_2 extends AssignmentToken  {
	
	public AtInvoke_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAtInvokeAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtInvoke_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAtInvokeAccess().getNameQualifiedNameParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAtInvokeAccess().getNameQualifiedNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// parameterTypes=ParameterTypes?
protected class AtInvoke_ParameterTypesAssignment_3 extends AssignmentToken  {
	
	public AtInvoke_ParameterTypesAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAtInvokeAccess().getParameterTypesAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterTypes_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameterTypes",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameterTypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterTypesRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAtInvokeAccess().getParameterTypesParameterTypesParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AtInvoke_NameAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// counter=Counter?
protected class AtInvoke_CounterAssignment_4 extends AssignmentToken  {
	
	public AtInvoke_CounterAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAtInvokeAccess().getCounterAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtInvoke_ParameterTypesAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AtInvoke_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("counter",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("counter");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAtInvokeAccess().getCounterCounterParserRuleCall_4_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAtInvokeAccess().getCounterCounterParserRuleCall_4_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AtInvoke ****************/


/************ begin Rule AfterInvoke ****************
 *
 * AfterInvoke:
 * 	{AfterInvoke} ("INVOKE" | "CALL") name=QualifiedName parameterTypes=ParameterTypes? counter=Counter?;
 *
 **/

// {AfterInvoke} ("INVOKE" | "CALL") name=QualifiedName parameterTypes=ParameterTypes? counter=Counter?
protected class AfterInvoke_Group extends GroupToken {
	
	public AfterInvoke_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAfterInvokeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterInvoke_CounterAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AfterInvoke_ParameterTypesAssignment_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new AfterInvoke_NameAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterInvokeAccess().getAfterInvokeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AfterInvoke}
protected class AfterInvoke_AfterInvokeAction_0 extends ActionToken  {

	public AfterInvoke_AfterInvokeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAfterInvokeAccess().getAfterInvokeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "INVOKE" | "CALL"
protected class AfterInvoke_Alternatives_1 extends AlternativesToken {

	public AfterInvoke_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAfterInvokeAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterInvoke_INVOKEKeyword_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "INVOKE"
protected class AfterInvoke_INVOKEKeyword_1_0 extends KeywordToken  {
	
	public AfterInvoke_INVOKEKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAfterInvokeAccess().getINVOKEKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterInvoke_AfterInvokeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// name=QualifiedName
protected class AfterInvoke_NameAssignment_2 extends AssignmentToken  {
	
	public AfterInvoke_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAfterInvokeAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterInvoke_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAfterInvokeAccess().getNameQualifiedNameParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAfterInvokeAccess().getNameQualifiedNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// parameterTypes=ParameterTypes?
protected class AfterInvoke_ParameterTypesAssignment_3 extends AssignmentToken  {
	
	public AfterInvoke_ParameterTypesAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAfterInvokeAccess().getParameterTypesAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterTypes_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameterTypes",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameterTypes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterTypesRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAfterInvokeAccess().getParameterTypesParameterTypesParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AfterInvoke_NameAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// counter=Counter?
protected class AfterInvoke_CounterAssignment_4 extends AssignmentToken  {
	
	public AfterInvoke_CounterAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAfterInvokeAccess().getCounterAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterInvoke_ParameterTypesAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AfterInvoke_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("counter",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("counter");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAfterInvokeAccess().getCounterCounterParserRuleCall_4_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAfterInvokeAccess().getCounterCounterParserRuleCall_4_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AfterInvoke ****************/


/************ begin Rule AtSynchronize ****************
 *
 * AtSynchronize:
 * 	{AtSynchronize} "SYNCHRONIZE" counter=Counter?;
 *
 **/

// {AtSynchronize} "SYNCHRONIZE" counter=Counter?
protected class AtSynchronize_Group extends GroupToken {
	
	public AtSynchronize_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAtSynchronizeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtSynchronize_CounterAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AtSynchronize_SYNCHRONIZEKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtSynchronizeAccess().getAtSynchronizeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AtSynchronize}
protected class AtSynchronize_AtSynchronizeAction_0 extends ActionToken  {

	public AtSynchronize_AtSynchronizeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAtSynchronizeAccess().getAtSynchronizeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "SYNCHRONIZE"
protected class AtSynchronize_SYNCHRONIZEKeyword_1 extends KeywordToken  {
	
	public AtSynchronize_SYNCHRONIZEKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAtSynchronizeAccess().getSYNCHRONIZEKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtSynchronize_AtSynchronizeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// counter=Counter?
protected class AtSynchronize_CounterAssignment_2 extends AssignmentToken  {
	
	public AtSynchronize_CounterAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAtSynchronizeAccess().getCounterAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtSynchronize_SYNCHRONIZEKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("counter",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("counter");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAtSynchronizeAccess().getCounterCounterParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAtSynchronizeAccess().getCounterCounterParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AtSynchronize ****************/


/************ begin Rule AfterSynchronize ****************
 *
 * AfterSynchronize:
 * 	{AfterSynchronize} "SYNCHRONIZE" counter=Counter?;
 *
 **/

// {AfterSynchronize} "SYNCHRONIZE" counter=Counter?
protected class AfterSynchronize_Group extends GroupToken {
	
	public AfterSynchronize_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAfterSynchronizeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterSynchronize_CounterAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AfterSynchronize_SYNCHRONIZEKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterSynchronizeAccess().getAfterSynchronizeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AfterSynchronize}
protected class AfterSynchronize_AfterSynchronizeAction_0 extends ActionToken  {

	public AfterSynchronize_AfterSynchronizeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAfterSynchronizeAccess().getAfterSynchronizeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "SYNCHRONIZE"
protected class AfterSynchronize_SYNCHRONIZEKeyword_1 extends KeywordToken  {
	
	public AfterSynchronize_SYNCHRONIZEKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAfterSynchronizeAccess().getSYNCHRONIZEKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterSynchronize_AfterSynchronizeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// counter=Counter?
protected class AfterSynchronize_CounterAssignment_2 extends AssignmentToken  {
	
	public AfterSynchronize_CounterAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAfterSynchronizeAccess().getCounterAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterSynchronize_SYNCHRONIZEKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("counter",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("counter");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAfterSynchronizeAccess().getCounterCounterParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAfterSynchronizeAccess().getCounterCounterParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AfterSynchronize ****************/


/************ begin Rule AtThrow ****************
 *
 * AtThrow:
 * 	{AtThrow} "THROW" name=QualifiedName? counter=Counter?;
 *
 **/

// {AtThrow} "THROW" name=QualifiedName? counter=Counter?
protected class AtThrow_Group extends GroupToken {
	
	public AtThrow_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAtThrowAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtThrow_CounterAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AtThrow_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new AtThrow_THROWKeyword_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtThrowAccess().getAtThrowAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AtThrow}
protected class AtThrow_AtThrowAction_0 extends ActionToken  {

	public AtThrow_AtThrowAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAtThrowAccess().getAtThrowAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "THROW"
protected class AtThrow_THROWKeyword_1 extends KeywordToken  {
	
	public AtThrow_THROWKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAtThrowAccess().getTHROWKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtThrow_AtThrowAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=QualifiedName?
protected class AtThrow_NameAssignment_2 extends AssignmentToken  {
	
	public AtThrow_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAtThrowAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtThrow_THROWKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAtThrowAccess().getNameQualifiedNameParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAtThrowAccess().getNameQualifiedNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// counter=Counter?
protected class AtThrow_CounterAssignment_3 extends AssignmentToken  {
	
	public AtThrow_CounterAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAtThrowAccess().getCounterAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtThrow_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AtThrow_THROWKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("counter",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("counter");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAtThrowAccess().getCounterCounterParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getAtThrowAccess().getCounterCounterParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AtThrow ****************/


/************ begin Rule ParameterTypes ****************
 *
 * ParameterTypes:
 * 	LPAREN {ParameterTypes} (paramTypeNames+=ParamTypeName (COMMA paramTypeNames+=ParamTypeName)*)? RPAREN;
 *
 **/

// LPAREN {ParameterTypes} (paramTypeNames+=ParamTypeName (COMMA paramTypeNames+=ParamTypeName)*)? RPAREN
protected class ParameterTypes_Group extends GroupToken {
	
	public ParameterTypes_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterTypesAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterTypes_RPARENTerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getParameterTypesAccess().getParameterTypesAction_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// LPAREN
protected class ParameterTypes_LPARENTerminalRuleCall_0 extends UnassignedTextToken {

	public ParameterTypes_LPARENTerminalRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getParameterTypesAccess().getLPARENTerminalRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {ParameterTypes}
protected class ParameterTypes_ParameterTypesAction_1 extends ActionToken  {

	public ParameterTypes_ParameterTypesAction_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getParameterTypesAccess().getParameterTypesAction_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterTypes_LPARENTerminalRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// (paramTypeNames+=ParamTypeName (COMMA paramTypeNames+=ParamTypeName)*)?
protected class ParameterTypes_Group_2 extends GroupToken {
	
	public ParameterTypes_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterTypesAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterTypes_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ParameterTypes_ParamTypeNamesAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// paramTypeNames+=ParamTypeName
protected class ParameterTypes_ParamTypeNamesAssignment_2_0 extends AssignmentToken  {
	
	public ParameterTypes_ParamTypeNamesAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterTypesAccess().getParamTypeNamesAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterTypes_ParameterTypesAction_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("paramTypeNames",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("paramTypeNames");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getParameterTypesAccess().getParamTypeNamesParamTypeNameParserRuleCall_2_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getParameterTypesAccess().getParamTypeNamesParamTypeNameParserRuleCall_2_0_0();
			return obj;
		}
		return null;
	}

}

// (COMMA paramTypeNames+=ParamTypeName)*
protected class ParameterTypes_Group_2_1 extends GroupToken {
	
	public ParameterTypes_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterTypesAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterTypes_ParamTypeNamesAssignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// COMMA
protected class ParameterTypes_COMMATerminalRuleCall_2_1_0 extends UnassignedTextToken {

	public ParameterTypes_COMMATerminalRuleCall_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getParameterTypesAccess().getCOMMATerminalRuleCall_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterTypes_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ParameterTypes_ParamTypeNamesAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// paramTypeNames+=ParamTypeName
protected class ParameterTypes_ParamTypeNamesAssignment_2_1_1 extends AssignmentToken  {
	
	public ParameterTypes_ParamTypeNamesAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterTypesAccess().getParamTypeNamesAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterTypes_COMMATerminalRuleCall_2_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("paramTypeNames",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("paramTypeNames");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getParameterTypesAccess().getParamTypeNamesParamTypeNameParserRuleCall_2_1_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getParameterTypesAccess().getParamTypeNamesParamTypeNameParserRuleCall_2_1_1_0();
			return obj;
		}
		return null;
	}

}



// RPAREN
protected class ParameterTypes_RPARENTerminalRuleCall_3 extends UnassignedTextToken {

	public ParameterTypes_RPARENTerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getParameterTypesAccess().getRPARENTerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterTypes_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ParameterTypes_ParameterTypesAction_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ParameterTypes ****************/




/************ begin Rule Bind ****************
 *
 * Bind:
 * 	KEYWORD_BIND {Bind} (NOTHING | bind=Bindings);
 *
 **/

// KEYWORD_BIND {Bind} (NOTHING | bind=Bindings)
protected class Bind_Group extends GroupToken {
	
	public Bind_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBindAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Bind_Alternatives_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBindAccess().getBindAction_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// KEYWORD_BIND
protected class Bind_KEYWORD_BINDTerminalRuleCall_0 extends UnassignedTextToken {

	public Bind_KEYWORD_BINDTerminalRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBindAccess().getKEYWORD_BINDTerminalRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {Bind}
protected class Bind_BindAction_1 extends ActionToken  {

	public Bind_BindAction_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getBindAccess().getBindAction_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Bind_KEYWORD_BINDTerminalRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// NOTHING | bind=Bindings
protected class Bind_Alternatives_2 extends AlternativesToken {

	public Bind_Alternatives_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getBindAccess().getAlternatives_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Bind_NOTHINGTerminalRuleCall_2_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Bind_BindAssignment_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// NOTHING
protected class Bind_NOTHINGTerminalRuleCall_2_0 extends UnassignedTextToken {

	public Bind_NOTHINGTerminalRuleCall_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBindAccess().getNOTHINGTerminalRuleCall_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Bind_BindAction_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// bind=Bindings
protected class Bind_BindAssignment_2_1 extends AssignmentToken  {
	
	public Bind_BindAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBindAccess().getBindAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Bindings_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("bind",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("bind");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBindingsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBindAccess().getBindBindingsParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Bind_BindAction_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Bind ****************/


/************ begin Rule Bindings ****************
 *
 * Bindings:
 * 	bindings+=Binding (SEMICOLON bindings+=Binding)* SEMICOLON?;
 *
 **/

// bindings+=Binding (SEMICOLON bindings+=Binding)* SEMICOLON?
protected class Bindings_Group extends GroupToken {
	
	public Bindings_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBindingsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Bindings_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Bindings_BindingsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBindingsRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// bindings+=Binding
protected class Bindings_BindingsAssignment_0 extends AssignmentToken  {
	
	public Bindings_BindingsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBindingsAccess().getBindingsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Binding_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("bindings",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("bindings");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBindingRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBindingsAccess().getBindingsBindingParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (SEMICOLON bindings+=Binding)*
protected class Bindings_Group_1 extends GroupToken {
	
	public Bindings_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBindingsAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Bindings_BindingsAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SEMICOLON
protected class Bindings_SEMICOLONTerminalRuleCall_1_0 extends UnassignedTextToken {

	public Bindings_SEMICOLONTerminalRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBindingsAccess().getSEMICOLONTerminalRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Bindings_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Bindings_BindingsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// bindings+=Binding
protected class Bindings_BindingsAssignment_1_1 extends AssignmentToken  {
	
	public Bindings_BindingsAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBindingsAccess().getBindingsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Binding_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("bindings",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("bindings");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBindingRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBindingsAccess().getBindingsBindingParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Bindings_SEMICOLONTerminalRuleCall_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Bindings ****************/


/************ begin Rule Binding ****************
 *
 * Binding:
 * 	bindVariable= // assignment is optional but only if we have a type
 * 	BindVariable (ASSIGN value=Expression | (COLON typename=TypeName) (ASSIGN value=Expression)?);
 *
 **/

// bindVariable= // assignment is optional but only if we have a type
// BindVariable (ASSIGN value=Expression | (COLON typename=TypeName) (ASSIGN value=Expression)?)
protected class Binding_Group extends GroupToken {
	
	public Binding_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBindingAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Binding_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBindingRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// bindVariable= // assignment is optional but only if we have a type
// BindVariable
protected class Binding_BindVariableAssignment_0 extends AssignmentToken  {
	
	public Binding_BindVariableAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBindingAccess().getBindVariableAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("bindVariable",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("bindVariable");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBindingAccess().getBindVariableBindVariableParserRuleCall_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getBindingAccess().getBindVariableBindVariableParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ASSIGN value=Expression | (COLON typename=TypeName) (ASSIGN value=Expression)?
protected class Binding_Alternatives_1 extends AlternativesToken {

	public Binding_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getBindingAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Binding_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Binding_Group_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ASSIGN value=Expression
protected class Binding_Group_1_0 extends GroupToken {
	
	public Binding_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBindingAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Binding_ValueAssignment_1_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ASSIGN
protected class Binding_ASSIGNTerminalRuleCall_1_0_0 extends UnassignedTextToken {

	public Binding_ASSIGNTerminalRuleCall_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBindingAccess().getASSIGNTerminalRuleCall_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Binding_BindVariableAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// value=Expression
protected class Binding_ValueAssignment_1_0_1 extends AssignmentToken  {
	
	public Binding_ValueAssignment_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBindingAccess().getValueAssignment_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBindingAccess().getValueExpressionParserRuleCall_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Binding_ASSIGNTerminalRuleCall_1_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// (COLON typename=TypeName) (ASSIGN value=Expression)?
protected class Binding_Group_1_1 extends GroupToken {
	
	public Binding_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBindingAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Binding_Group_1_1_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Binding_Group_1_1_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// COLON typename=TypeName
protected class Binding_Group_1_1_0 extends GroupToken {
	
	public Binding_Group_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBindingAccess().getGroup_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Binding_TypenameAssignment_1_1_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// COLON
protected class Binding_COLONTerminalRuleCall_1_1_0_0 extends UnassignedTextToken {

	public Binding_COLONTerminalRuleCall_1_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBindingAccess().getCOLONTerminalRuleCall_1_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Binding_BindVariableAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// typename=TypeName
protected class Binding_TypenameAssignment_1_1_0_1 extends AssignmentToken  {
	
	public Binding_TypenameAssignment_1_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBindingAccess().getTypenameAssignment_1_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Binding_COLONTerminalRuleCall_1_1_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("typename",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("typename");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBindingAccess().getTypenameTypeNameParserRuleCall_1_1_0_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getBindingAccess().getTypenameTypeNameParserRuleCall_1_1_0_1_0();
			return obj;
		}
		return null;
	}

}


// (ASSIGN value=Expression)?
protected class Binding_Group_1_1_1 extends GroupToken {
	
	public Binding_Group_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBindingAccess().getGroup_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Binding_ValueAssignment_1_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ASSIGN
protected class Binding_ASSIGNTerminalRuleCall_1_1_1_0 extends UnassignedTextToken {

	public Binding_ASSIGNTerminalRuleCall_1_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBindingAccess().getASSIGNTerminalRuleCall_1_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Binding_Group_1_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// value=Expression
protected class Binding_ValueAssignment_1_1_1_1 extends AssignmentToken  {
	
	public Binding_ValueAssignment_1_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBindingAccess().getValueAssignment_1_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBindingAccess().getValueExpressionParserRuleCall_1_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Binding_ASSIGNTerminalRuleCall_1_1_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}





/************ end Rule Binding ****************/




/************ begin Rule Condition ****************
 *
 * / *
 *  * Definition of the Condition
 *  * / Condition:
 * 	IF Expression;
 *
 **/

// IF Expression
protected class Condition_Group extends GroupToken {
	
	public Condition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConditionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Condition_ExpressionParserRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExprAccess().getAssignmentExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBitwiseOperandAccess().getBitwiseOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinExprAccess().getBuiltinExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIndexedSpecialVarAccess().getIndexedSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLogicalOperandAccess().getLogicalOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNewExprAccess().getNewExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOperatorExprAccess().getOperatorExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPlusMinusOperandAccess().getPlusMinusOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleNameAccess().getSimpleNameAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpecialVarAccess().getSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandAccess().getTimesDivOperandOperand1Action_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// IF
protected class Condition_IFTerminalRuleCall_0 extends UnassignedTextToken {

	public Condition_IFTerminalRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConditionAccess().getIFTerminalRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Expression
protected class Condition_ExpressionParserRuleCall_1 extends RuleCallToken {
	
	public Condition_ExpressionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConditionAccess().getExpressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Expression_AssignmentExprParserRuleCall.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Condition_IFTerminalRuleCall_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}


/************ end Rule Condition ****************/


/************ begin Rule Actions ****************
 *
 * / *
 *  * Definition of action
 *  * / Actions:
 * 	{Actions} DO (actionList=ActionList | NOTHING);
 *
 **/

// {Actions} DO (actionList=ActionList | NOTHING)
protected class Actions_Group extends GroupToken {
	
	public Actions_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getActionsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Actions_Alternatives_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getActionsAccess().getActionsAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Actions}
protected class Actions_ActionsAction_0 extends ActionToken  {

	public Actions_ActionsAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getActionsAccess().getActionsAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// DO
protected class Actions_DOTerminalRuleCall_1 extends UnassignedTextToken {

	public Actions_DOTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getActionsAccess().getDOTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Actions_ActionsAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// actionList=ActionList | NOTHING
protected class Actions_Alternatives_2 extends AlternativesToken {

	public Actions_Alternatives_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getActionsAccess().getAlternatives_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Actions_ActionListAssignment_2_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Actions_NOTHINGTerminalRuleCall_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// actionList=ActionList
protected class Actions_ActionListAssignment_2_0 extends AssignmentToken  {
	
	public Actions_ActionListAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getActionsAccess().getActionListAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActionList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("actionList",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("actionList");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActionListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getActionsAccess().getActionListActionListParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Actions_DOTerminalRuleCall_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// NOTHING
protected class Actions_NOTHINGTerminalRuleCall_2_1 extends UnassignedTextToken {

	public Actions_NOTHINGTerminalRuleCall_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getActionsAccess().getNOTHINGTerminalRuleCall_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Actions_DOTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule Actions ****************/


/************ begin Rule ActionList ****************
 *
 * ActionList:
 * 	actions+=Action (SEMICOLON actions+=Action)* SEMICOLON?;
 *
 **/

// actions+=Action (SEMICOLON actions+=Action)* SEMICOLON?
protected class ActionList_Group extends GroupToken {
	
	public ActionList_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getActionListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActionList_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ActionList_ActionsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getActionListRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// actions+=Action
protected class ActionList_ActionsAssignment_0 extends AssignmentToken  {
	
	public ActionList_ActionsAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getActionListAccess().getActionsAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Action_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("actions",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("actions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getActionListAccess().getActionsActionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (SEMICOLON actions+=Action)*
protected class ActionList_Group_1 extends GroupToken {
	
	public ActionList_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getActionListAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActionList_ActionsAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// SEMICOLON
protected class ActionList_SEMICOLONTerminalRuleCall_1_0 extends UnassignedTextToken {

	public ActionList_SEMICOLONTerminalRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getActionListAccess().getSEMICOLONTerminalRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActionList_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ActionList_ActionsAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// actions+=Action
protected class ActionList_ActionsAssignment_1_1 extends AssignmentToken  {
	
	public ActionList_ActionsAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getActionListAccess().getActionsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Action_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("actions",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("actions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getActionListAccess().getActionsActionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ActionList_SEMICOLONTerminalRuleCall_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ActionList ****************/


/************ begin Rule Action ****************
 *
 * // we really only want RETURN or THROW at the end of the list but try
 * // doing that without left recursion!
 * Action:
 * 	Expression | ReturnExpr | ThrowExpr;
 *
 **/

// Expression | ReturnExpr | ThrowExpr
protected class Action_Alternatives extends AlternativesToken {

	public Action_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getActionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Action_ExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Action_ReturnExprParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Action_ThrowExprParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExprAccess().getAssignmentExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBitwiseOperandAccess().getBitwiseOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinExprAccess().getBuiltinExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getThrowExprRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIndexedSpecialVarAccess().getIndexedSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLogicalOperandAccess().getLogicalOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNewExprAccess().getNewExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOperatorExprAccess().getOperatorExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPlusMinusOperandAccess().getPlusMinusOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleNameAccess().getSimpleNameAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpecialVarAccess().getSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandAccess().getTimesDivOperandOperand1Action_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Expression
protected class Action_ExpressionParserRuleCall_0 extends RuleCallToken {
	
	public Action_ExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getActionAccess().getExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Expression_AssignmentExprParserRuleCall.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ReturnExpr
protected class Action_ReturnExprParserRuleCall_1 extends RuleCallToken {
	
	public Action_ReturnExprParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getActionAccess().getReturnExprParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReturnExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReturnExprRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ReturnExpr_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ThrowExpr
protected class Action_ThrowExprParserRuleCall_2 extends RuleCallToken {
	
	public Action_ThrowExprParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getActionAccess().getThrowExprParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThrowExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getThrowExprRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ThrowExpr_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Action ****************/


/************ begin Rule Expression ****************
 *
 * // assigments ned to be composable just as any other operator expression
 * // but the LHS should only be an AccessExpr and not a constant expr
 * // enforcing the former requires left recursion -- or maybe backtracking?
 * // enforcing the latter maybe also requires backtracking? anyway we can
 * // just make assigment the weakest binding operator and do a post check
 * // to ensure the LSH of an assign is of the right type
 * Expression:
 * 	AssignmentExpr;
 *
 **/

// AssignmentExpr
protected class Expression_AssignmentExprParserRuleCall extends RuleCallToken {
	
	public Expression_AssignmentExprParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExpressionAccess().getAssignmentExprParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssignmentExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExprAccess().getAssignmentExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBitwiseOperandAccess().getBitwiseOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinExprAccess().getBuiltinExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIndexedSpecialVarAccess().getIndexedSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLogicalOperandAccess().getLogicalOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNewExprAccess().getNewExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOperatorExprAccess().getOperatorExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPlusMinusOperandAccess().getPlusMinusOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleNameAccess().getSimpleNameAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpecialVarAccess().getSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandAccess().getTimesDivOperandOperand1Action_0_1_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AssignmentExpr_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule Expression ****************/


/************ begin Rule ReturnExpr ****************
 *
 * ReturnExpr returns Expression:
 * 	op=KEYWORD_RETURN operand1=Expression?;
 *
 **/

// op=KEYWORD_RETURN operand1=Expression?
protected class ReturnExpr_Group extends GroupToken {
	
	public ReturnExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReturnExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReturnExpr_Operand1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ReturnExpr_OpAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReturnExprRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// op=KEYWORD_RETURN
protected class ReturnExpr_OpAssignment_0 extends AssignmentToken  {
	
	public ReturnExpr_OpAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReturnExprAccess().getOpAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getReturnExprAccess().getOpKEYWORD_RETURNTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getReturnExprAccess().getOpKEYWORD_RETURNTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// operand1=Expression?
protected class ReturnExpr_Operand1Assignment_1 extends AssignmentToken  {
	
	public ReturnExpr_Operand1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReturnExprAccess().getOperand1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operand1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operand1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getReturnExprAccess().getOperand1ExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReturnExpr_OpAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ReturnExpr ****************/


/************ begin Rule ThrowExpr ****************
 *
 * ThrowExpr returns Expression:
 * 	op=KEYWORD_THROW operand1=Expression;
 *
 **/

// op=KEYWORD_THROW operand1=Expression
protected class ThrowExpr_Group extends GroupToken {
	
	public ThrowExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getThrowExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ThrowExpr_Operand1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getThrowExprRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// op=KEYWORD_THROW
protected class ThrowExpr_OpAssignment_0 extends AssignmentToken  {
	
	public ThrowExpr_OpAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThrowExprAccess().getOpAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getThrowExprAccess().getOpKEYWORD_THROWTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getThrowExprAccess().getOpKEYWORD_THROWTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// operand1=Expression
protected class ThrowExpr_Operand1Assignment_1 extends AssignmentToken  {
	
	public ThrowExpr_Operand1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getThrowExprAccess().getOperand1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operand1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operand1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getThrowExprAccess().getOperand1ExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ThrowExpr_OpAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ThrowExpr ****************/


/************ begin Rule AssignmentExpr ****************
 *
 * / *
 *  * Definiton of Java expressions
 *  * / // assignments have an LHS restricted to the different types of var
 * // expression and to fields and arrays. we have to allow access expressions
 * // and then typecheck out assignments to method members accesses, literals
 * // etc 
 * AssignmentExpr returns Expression:
 * 	OperatorExpr ({AssignmentExpr.operand1=current} op=ASSIGN operand2=AssignmentExpr)?;
 *
 **/

// OperatorExpr ({AssignmentExpr.operand1=current} op=ASSIGN operand2=AssignmentExpr)?
protected class AssignmentExpr_Group extends GroupToken {
	
	public AssignmentExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssignmentExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssignmentExpr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AssignmentExpr_OperatorExprParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExprAccess().getAssignmentExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBitwiseOperandAccess().getBitwiseOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinExprAccess().getBuiltinExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIndexedSpecialVarAccess().getIndexedSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLogicalOperandAccess().getLogicalOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNewExprAccess().getNewExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOperatorExprAccess().getOperatorExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPlusMinusOperandAccess().getPlusMinusOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleNameAccess().getSimpleNameAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpecialVarAccess().getSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandAccess().getTimesDivOperandOperand1Action_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// OperatorExpr
protected class AssignmentExpr_OperatorExprParserRuleCall_0 extends RuleCallToken {
	
	public AssignmentExpr_OperatorExprParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAssignmentExprAccess().getOperatorExprParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OperatorExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(OperatorExpr_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({AssignmentExpr.operand1=current} op=ASSIGN operand2=AssignmentExpr)?
protected class AssignmentExpr_Group_1 extends GroupToken {
	
	public AssignmentExpr_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssignmentExprAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssignmentExpr_Operand2Assignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssignmentExprAccess().getAssignmentExprOperand1Action_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AssignmentExpr.operand1=current}
protected class AssignmentExpr_AssignmentExprOperand1Action_1_0 extends ActionToken  {

	public AssignmentExpr_AssignmentExprOperand1Action_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAssignmentExprAccess().getAssignmentExprOperand1Action_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssignmentExpr_OperatorExprParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("operand1", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("operand1")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// op=ASSIGN
protected class AssignmentExpr_OpAssignment_1_1 extends AssignmentToken  {
	
	public AssignmentExpr_OpAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentExprAccess().getOpAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssignmentExpr_AssignmentExprOperand1Action_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAssignmentExprAccess().getOpASSIGNTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAssignmentExprAccess().getOpASSIGNTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// operand2=AssignmentExpr
protected class AssignmentExpr_Operand2Assignment_1_2 extends AssignmentToken  {
	
	public AssignmentExpr_Operand2Assignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignmentExprAccess().getOperand2Assignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssignmentExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operand2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operand2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssignmentExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssignmentExprAccess().getOperand2AssignmentExprParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AssignmentExpr_OpAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AssignmentExpr ****************/


/************ begin Rule OperatorExpr ****************
 *
 * // other expressions are composed from either simple expressions or
 * // expressions involving member or array accesses using either unary
 * // or binary operators. a hierarchy of rules is used to ensure that
 * // operator precedence is respected. tighter binding operators appear
 * // lower down the hierarchy.
 * OperatorExpr returns Expression:
 * 	PlusMinusOperand ({OperatorExpr.operand1=current} op=(PLUS | MINUS) operand2=PlusMinusOperand)*;
 *
 **/

// PlusMinusOperand ({OperatorExpr.operand1=current} op=(PLUS | MINUS) operand2=PlusMinusOperand)*
protected class OperatorExpr_Group extends GroupToken {
	
	public OperatorExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOperatorExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OperatorExpr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OperatorExpr_PlusMinusOperandParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExprAccess().getAssignmentExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBitwiseOperandAccess().getBitwiseOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinExprAccess().getBuiltinExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIndexedSpecialVarAccess().getIndexedSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLogicalOperandAccess().getLogicalOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNewExprAccess().getNewExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOperatorExprAccess().getOperatorExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPlusMinusOperandAccess().getPlusMinusOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleNameAccess().getSimpleNameAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpecialVarAccess().getSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandAccess().getTimesDivOperandOperand1Action_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// PlusMinusOperand
protected class OperatorExpr_PlusMinusOperandParserRuleCall_0 extends RuleCallToken {
	
	public OperatorExpr_PlusMinusOperandParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getOperatorExprAccess().getPlusMinusOperandParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PlusMinusOperand_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(PlusMinusOperand_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({OperatorExpr.operand1=current} op=(PLUS | MINUS) operand2=PlusMinusOperand)*
protected class OperatorExpr_Group_1 extends GroupToken {
	
	public OperatorExpr_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOperatorExprAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OperatorExpr_Operand2Assignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOperatorExprAccess().getOperatorExprOperand1Action_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OperatorExpr.operand1=current}
protected class OperatorExpr_OperatorExprOperand1Action_1_0 extends ActionToken  {

	public OperatorExpr_OperatorExprOperand1Action_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOperatorExprAccess().getOperatorExprOperand1Action_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OperatorExpr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OperatorExpr_PlusMinusOperandParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("operand1", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("operand1")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// op=(PLUS | MINUS)
protected class OperatorExpr_OpAssignment_1_1 extends AssignmentToken  {
	
	public OperatorExpr_OpAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOperatorExprAccess().getOpAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OperatorExpr_OperatorExprOperand1Action_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getOperatorExprAccess().getOpPLUSTerminalRuleCall_1_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getOperatorExprAccess().getOpPLUSTerminalRuleCall_1_1_0_0();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getOperatorExprAccess().getOpMINUSTerminalRuleCall_1_1_0_1(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getOperatorExprAccess().getOpMINUSTerminalRuleCall_1_1_0_1();
			return obj;
		}
		return null;
	}

}

// operand2=PlusMinusOperand
protected class OperatorExpr_Operand2Assignment_1_2 extends AssignmentToken  {
	
	public OperatorExpr_Operand2Assignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOperatorExprAccess().getOperand2Assignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PlusMinusOperand_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operand2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operand2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPlusMinusOperandRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOperatorExprAccess().getOperand2PlusMinusOperandParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OperatorExpr_OpAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule OperatorExpr ****************/


/************ begin Rule PlusMinusOperand ****************
 *
 * PlusMinusOperand returns Expression:
 * 	TimesDivOperand ({PlusMinusOperand.operand1=current} op=(TIMES | DIV | MOD) operand2=TimesDivOperand)*;
 *
 **/

// TimesDivOperand ({PlusMinusOperand.operand1=current} op=(TIMES | DIV | MOD) operand2=TimesDivOperand)*
protected class PlusMinusOperand_Group extends GroupToken {
	
	public PlusMinusOperand_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPlusMinusOperandAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PlusMinusOperand_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PlusMinusOperand_TimesDivOperandParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExprAccess().getAssignmentExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBitwiseOperandAccess().getBitwiseOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinExprAccess().getBuiltinExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIndexedSpecialVarAccess().getIndexedSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLogicalOperandAccess().getLogicalOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNewExprAccess().getNewExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOperatorExprAccess().getOperatorExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPlusMinusOperandAccess().getPlusMinusOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleNameAccess().getSimpleNameAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpecialVarAccess().getSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandAccess().getTimesDivOperandOperand1Action_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TimesDivOperand
protected class PlusMinusOperand_TimesDivOperandParserRuleCall_0 extends RuleCallToken {
	
	public PlusMinusOperand_TimesDivOperandParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPlusMinusOperandAccess().getTimesDivOperandParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimesDivOperand_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(TimesDivOperand_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({PlusMinusOperand.operand1=current} op=(TIMES | DIV | MOD) operand2=TimesDivOperand)*
protected class PlusMinusOperand_Group_1 extends GroupToken {
	
	public PlusMinusOperand_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPlusMinusOperandAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PlusMinusOperand_Operand2Assignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPlusMinusOperandAccess().getPlusMinusOperandOperand1Action_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {PlusMinusOperand.operand1=current}
protected class PlusMinusOperand_PlusMinusOperandOperand1Action_1_0 extends ActionToken  {

	public PlusMinusOperand_PlusMinusOperandOperand1Action_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPlusMinusOperandAccess().getPlusMinusOperandOperand1Action_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PlusMinusOperand_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PlusMinusOperand_TimesDivOperandParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("operand1", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("operand1")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// op=(TIMES | DIV | MOD)
protected class PlusMinusOperand_OpAssignment_1_1 extends AssignmentToken  {
	
	public PlusMinusOperand_OpAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPlusMinusOperandAccess().getOpAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PlusMinusOperand_PlusMinusOperandOperand1Action_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPlusMinusOperandAccess().getOpTIMESTerminalRuleCall_1_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPlusMinusOperandAccess().getOpTIMESTerminalRuleCall_1_1_0_0();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPlusMinusOperandAccess().getOpDIVTerminalRuleCall_1_1_0_1(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPlusMinusOperandAccess().getOpDIVTerminalRuleCall_1_1_0_1();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPlusMinusOperandAccess().getOpMODTerminalRuleCall_1_1_0_2(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPlusMinusOperandAccess().getOpMODTerminalRuleCall_1_1_0_2();
			return obj;
		}
		return null;
	}

}

// operand2=TimesDivOperand
protected class PlusMinusOperand_Operand2Assignment_1_2 extends AssignmentToken  {
	
	public PlusMinusOperand_Operand2Assignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPlusMinusOperandAccess().getOperand2Assignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimesDivOperand_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operand2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operand2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTimesDivOperandRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPlusMinusOperandAccess().getOperand2TimesDivOperandParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PlusMinusOperand_OpAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule PlusMinusOperand ****************/


/************ begin Rule TimesDivOperand ****************
 *
 * TimesDivOperand returns Expression:
 * 	BitwiseOperand ({TimesDivOperand.operand1=current} op=(BAND | BOR | BXOR) operand2=BitwiseOperand)* | op=BNOT
 * 	operand1=BitwiseOperand;
 *
 **/

// BitwiseOperand ({TimesDivOperand.operand1=current} op=(BAND | BOR | BXOR) operand2=BitwiseOperand)* | op=BNOT
// operand1=BitwiseOperand
protected class TimesDivOperand_Alternatives extends AlternativesToken {

	public TimesDivOperand_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTimesDivOperandAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimesDivOperand_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TimesDivOperand_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExprAccess().getAssignmentExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBitwiseOperandAccess().getBitwiseOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinExprAccess().getBuiltinExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIndexedSpecialVarAccess().getIndexedSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLogicalOperandAccess().getLogicalOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNewExprAccess().getNewExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOperatorExprAccess().getOperatorExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPlusMinusOperandAccess().getPlusMinusOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleNameAccess().getSimpleNameAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpecialVarAccess().getSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandAccess().getTimesDivOperandOperand1Action_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// BitwiseOperand ({TimesDivOperand.operand1=current} op=(BAND | BOR | BXOR) operand2=BitwiseOperand)*
protected class TimesDivOperand_Group_0 extends GroupToken {
	
	public TimesDivOperand_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTimesDivOperandAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimesDivOperand_Group_0_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TimesDivOperand_BitwiseOperandParserRuleCall_0_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// BitwiseOperand
protected class TimesDivOperand_BitwiseOperandParserRuleCall_0_0 extends RuleCallToken {
	
	public TimesDivOperand_BitwiseOperandParserRuleCall_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTimesDivOperandAccess().getBitwiseOperandParserRuleCall_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BitwiseOperand_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(BitwiseOperand_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({TimesDivOperand.operand1=current} op=(BAND | BOR | BXOR) operand2=BitwiseOperand)*
protected class TimesDivOperand_Group_0_1 extends GroupToken {
	
	public TimesDivOperand_Group_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTimesDivOperandAccess().getGroup_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimesDivOperand_Operand2Assignment_0_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTimesDivOperandAccess().getTimesDivOperandOperand1Action_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {TimesDivOperand.operand1=current}
protected class TimesDivOperand_TimesDivOperandOperand1Action_0_1_0 extends ActionToken  {

	public TimesDivOperand_TimesDivOperandOperand1Action_0_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTimesDivOperandAccess().getTimesDivOperandOperand1Action_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimesDivOperand_Group_0_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TimesDivOperand_BitwiseOperandParserRuleCall_0_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("operand1", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("operand1")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// op=(BAND | BOR | BXOR)
protected class TimesDivOperand_OpAssignment_0_1_1 extends AssignmentToken  {
	
	public TimesDivOperand_OpAssignment_0_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTimesDivOperandAccess().getOpAssignment_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimesDivOperand_TimesDivOperandOperand1Action_0_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTimesDivOperandAccess().getOpBANDTerminalRuleCall_0_1_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTimesDivOperandAccess().getOpBANDTerminalRuleCall_0_1_1_0_0();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTimesDivOperandAccess().getOpBORTerminalRuleCall_0_1_1_0_1(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTimesDivOperandAccess().getOpBORTerminalRuleCall_0_1_1_0_1();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTimesDivOperandAccess().getOpBXORTerminalRuleCall_0_1_1_0_2(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTimesDivOperandAccess().getOpBXORTerminalRuleCall_0_1_1_0_2();
			return obj;
		}
		return null;
	}

}

// operand2=BitwiseOperand
protected class TimesDivOperand_Operand2Assignment_0_1_2 extends AssignmentToken  {
	
	public TimesDivOperand_Operand2Assignment_0_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTimesDivOperandAccess().getOperand2Assignment_0_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BitwiseOperand_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operand2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operand2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBitwiseOperandRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTimesDivOperandAccess().getOperand2BitwiseOperandParserRuleCall_0_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TimesDivOperand_OpAssignment_0_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// op=BNOT operand1=BitwiseOperand
protected class TimesDivOperand_Group_1 extends GroupToken {
	
	public TimesDivOperand_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTimesDivOperandAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimesDivOperand_Operand1Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTimesDivOperandRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// op=BNOT
protected class TimesDivOperand_OpAssignment_1_0 extends AssignmentToken  {
	
	public TimesDivOperand_OpAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTimesDivOperandAccess().getOpAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTimesDivOperandAccess().getOpBNOTTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTimesDivOperandAccess().getOpBNOTTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// operand1=BitwiseOperand
protected class TimesDivOperand_Operand1Assignment_1_1 extends AssignmentToken  {
	
	public TimesDivOperand_Operand1Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTimesDivOperandAccess().getOperand1Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BitwiseOperand_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operand1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operand1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBitwiseOperandRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTimesDivOperandAccess().getOperand1BitwiseOperandParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TimesDivOperand_OpAssignment_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule TimesDivOperand ****************/


/************ begin Rule BitwiseOperand ****************
 *
 * BitwiseOperand returns Expression:
 * 	(LogicalOperand | NotOperand) ({BitwiseOperand.operand1=current} op=(OR | AND) operand2=(NotOperand |
 * 	LogicalOperand))*;
 *
 **/

// (LogicalOperand | NotOperand) ({BitwiseOperand.operand1=current} op=(OR | AND) operand2=(NotOperand | LogicalOperand))*
protected class BitwiseOperand_Group extends GroupToken {
	
	public BitwiseOperand_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBitwiseOperandAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BitwiseOperand_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BitwiseOperand_Alternatives_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExprAccess().getAssignmentExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBitwiseOperandAccess().getBitwiseOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinExprAccess().getBuiltinExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotOperandRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIndexedSpecialVarAccess().getIndexedSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLogicalOperandAccess().getLogicalOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNewExprAccess().getNewExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOperatorExprAccess().getOperatorExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPlusMinusOperandAccess().getPlusMinusOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleNameAccess().getSimpleNameAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpecialVarAccess().getSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandAccess().getTimesDivOperandOperand1Action_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// LogicalOperand | NotOperand
protected class BitwiseOperand_Alternatives_0 extends AlternativesToken {

	public BitwiseOperand_Alternatives_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getBitwiseOperandAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BitwiseOperand_LogicalOperandParserRuleCall_0_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BitwiseOperand_NotOperandParserRuleCall_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// LogicalOperand
protected class BitwiseOperand_LogicalOperandParserRuleCall_0_0 extends RuleCallToken {
	
	public BitwiseOperand_LogicalOperandParserRuleCall_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBitwiseOperandAccess().getLogicalOperandParserRuleCall_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LogicalOperand_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(LogicalOperand_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NotOperand
protected class BitwiseOperand_NotOperandParserRuleCall_0_1 extends RuleCallToken {
	
	public BitwiseOperand_NotOperandParserRuleCall_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBitwiseOperandAccess().getNotOperandParserRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NotOperand_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNotOperandRule().getType().getClassifier())
			return null;
		if(checkForRecursion(NotOperand_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


// ({BitwiseOperand.operand1=current} op=(OR | AND) operand2=(NotOperand | LogicalOperand))*
protected class BitwiseOperand_Group_1 extends GroupToken {
	
	public BitwiseOperand_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBitwiseOperandAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BitwiseOperand_Operand2Assignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBitwiseOperandAccess().getBitwiseOperandOperand1Action_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {BitwiseOperand.operand1=current}
protected class BitwiseOperand_BitwiseOperandOperand1Action_1_0 extends ActionToken  {

	public BitwiseOperand_BitwiseOperandOperand1Action_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getBitwiseOperandAccess().getBitwiseOperandOperand1Action_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BitwiseOperand_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BitwiseOperand_Alternatives_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("operand1", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("operand1")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// op=(OR | AND)
protected class BitwiseOperand_OpAssignment_1_1 extends AssignmentToken  {
	
	public BitwiseOperand_OpAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBitwiseOperandAccess().getOpAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BitwiseOperand_BitwiseOperandOperand1Action_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBitwiseOperandAccess().getOpORTerminalRuleCall_1_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getBitwiseOperandAccess().getOpORTerminalRuleCall_1_1_0_0();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBitwiseOperandAccess().getOpANDTerminalRuleCall_1_1_0_1(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getBitwiseOperandAccess().getOpANDTerminalRuleCall_1_1_0_1();
			return obj;
		}
		return null;
	}

}

// operand2=(NotOperand | LogicalOperand)
protected class BitwiseOperand_Operand2Assignment_1_2 extends AssignmentToken  {
	
	public BitwiseOperand_Operand2Assignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBitwiseOperandAccess().getOperand2Assignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NotOperand_Group(this, this, 0, inst);
			case 1: return new LogicalOperand_Group(this, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operand2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operand2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNotOperandRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBitwiseOperandAccess().getOperand2NotOperandParserRuleCall_1_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLogicalOperandRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBitwiseOperandAccess().getOperand2LogicalOperandParserRuleCall_1_2_0_1(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BitwiseOperand_OpAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule BitwiseOperand ****************/


/************ begin Rule NotOperand ****************
 *
 * NotOperand returns Expression:
 * 	op=NOT operand1=LogicalOperand;
 *
 **/

// op=NOT operand1=LogicalOperand
protected class NotOperand_Group extends GroupToken {
	
	public NotOperand_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNotOperandAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NotOperand_Operand1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNotOperandRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// op=NOT
protected class NotOperand_OpAssignment_0 extends AssignmentToken  {
	
	public NotOperand_OpAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNotOperandAccess().getOpAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNotOperandAccess().getOpNOTTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNotOperandAccess().getOpNOTTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// operand1=LogicalOperand
protected class NotOperand_Operand1Assignment_1 extends AssignmentToken  {
	
	public NotOperand_Operand1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNotOperandAccess().getOperand1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LogicalOperand_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operand1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operand1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLogicalOperandRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNotOperandAccess().getOperand1LogicalOperandParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NotOperand_OpAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule NotOperand ****************/


/************ begin Rule LogicalOperand ****************
 *
 * LogicalOperand returns Expression:
 * 	ComparisonOperand ({LogicalOperand.operand1=current} op=(EQ | GT | GE | LE | LT | NE) operand2=ComparisonOperand)*;
 *
 **/

// ComparisonOperand ({LogicalOperand.operand1=current} op=(EQ | GT | GE | LE | LT | NE) operand2=ComparisonOperand)*
protected class LogicalOperand_Group extends GroupToken {
	
	public LogicalOperand_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLogicalOperandAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LogicalOperand_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LogicalOperand_ComparisonOperandParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExprAccess().getAssignmentExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBitwiseOperandAccess().getBitwiseOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinExprAccess().getBuiltinExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIndexedSpecialVarAccess().getIndexedSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLogicalOperandAccess().getLogicalOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNewExprAccess().getNewExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOperatorExprAccess().getOperatorExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPlusMinusOperandAccess().getPlusMinusOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleNameAccess().getSimpleNameAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpecialVarAccess().getSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandAccess().getTimesDivOperandOperand1Action_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ComparisonOperand
protected class LogicalOperand_ComparisonOperandParserRuleCall_0 extends RuleCallToken {
	
	public LogicalOperand_ComparisonOperandParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getLogicalOperandAccess().getComparisonOperandParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComparisonOperand_AccessExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ComparisonOperand_AccessExprParserRuleCall.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({LogicalOperand.operand1=current} op=(EQ | GT | GE | LE | LT | NE) operand2=ComparisonOperand)*
protected class LogicalOperand_Group_1 extends GroupToken {
	
	public LogicalOperand_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLogicalOperandAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LogicalOperand_Operand2Assignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLogicalOperandAccess().getLogicalOperandOperand1Action_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {LogicalOperand.operand1=current}
protected class LogicalOperand_LogicalOperandOperand1Action_1_0 extends ActionToken  {

	public LogicalOperand_LogicalOperandOperand1Action_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getLogicalOperandAccess().getLogicalOperandOperand1Action_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LogicalOperand_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LogicalOperand_ComparisonOperandParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("operand1", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("operand1")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// op=(EQ | GT | GE | LE | LT | NE)
protected class LogicalOperand_OpAssignment_1_1 extends AssignmentToken  {
	
	public LogicalOperand_OpAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLogicalOperandAccess().getOpAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LogicalOperand_LogicalOperandOperand1Action_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLogicalOperandAccess().getOpEQTerminalRuleCall_1_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLogicalOperandAccess().getOpEQTerminalRuleCall_1_1_0_0();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLogicalOperandAccess().getOpGTTerminalRuleCall_1_1_0_1(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLogicalOperandAccess().getOpGTTerminalRuleCall_1_1_0_1();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLogicalOperandAccess().getOpGETerminalRuleCall_1_1_0_2(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLogicalOperandAccess().getOpGETerminalRuleCall_1_1_0_2();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLogicalOperandAccess().getOpLETerminalRuleCall_1_1_0_3(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLogicalOperandAccess().getOpLETerminalRuleCall_1_1_0_3();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLogicalOperandAccess().getOpLTTerminalRuleCall_1_1_0_4(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLogicalOperandAccess().getOpLTTerminalRuleCall_1_1_0_4();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLogicalOperandAccess().getOpNETerminalRuleCall_1_1_0_5(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLogicalOperandAccess().getOpNETerminalRuleCall_1_1_0_5();
			return obj;
		}
		return null;
	}

}

// operand2=ComparisonOperand
protected class LogicalOperand_Operand2Assignment_1_2 extends AssignmentToken  {
	
	public LogicalOperand_Operand2Assignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLogicalOperandAccess().getOperand2Assignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComparisonOperand_AccessExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operand2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operand2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComparisonOperandRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLogicalOperandAccess().getOperand2ComparisonOperandParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new LogicalOperand_OpAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule LogicalOperand ****************/


/************ begin Rule ComparisonOperand ****************
 *
 * // access base expressions can have array or member accesses composed on the right
 * ComparisonOperand returns Expression:
 * 	AccessExpr;
 *
 **/

// AccessExpr
protected class ComparisonOperand_AccessExprParserRuleCall extends RuleCallToken {
	
	public ComparisonOperand_AccessExprParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComparisonOperandAccess().getAccessExprParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExprAccess().getAssignmentExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBitwiseOperandAccess().getBitwiseOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinExprAccess().getBuiltinExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIndexedSpecialVarAccess().getIndexedSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLogicalOperandAccess().getLogicalOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNewExprAccess().getNewExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOperatorExprAccess().getOperatorExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPlusMinusOperandAccess().getPlusMinusOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleNameAccess().getSimpleNameAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpecialVarAccess().getSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandAccess().getTimesDivOperandOperand1Action_0_1_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AccessExpr_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule ComparisonOperand ****************/


/************ begin Rule AccessExpr ****************
 *
 * // we need to return the LHS type so we can recurse here
 * AccessExpr returns Expression:
 * 	AccessBaseExpr ({AccessExpr.operand1=current} op=LSQUARE operand2=Expression RSQUARE | {AccessExpr.operand1=current}
 * 	op=DOT value=ID args=CallArguments?)*;
 *
 **/

// AccessBaseExpr ({AccessExpr.operand1=current} op=LSQUARE operand2=Expression RSQUARE | {AccessExpr.operand1=current}
// op=DOT value=ID args=CallArguments?)*
protected class AccessExpr_Group extends GroupToken {
	
	public AccessExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAccessExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessExpr_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AccessExpr_AccessBaseExprParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExprAccess().getAssignmentExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBitwiseOperandAccess().getBitwiseOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinExprAccess().getBuiltinExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIndexedSpecialVarAccess().getIndexedSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLogicalOperandAccess().getLogicalOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNewExprAccess().getNewExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOperatorExprAccess().getOperatorExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPlusMinusOperandAccess().getPlusMinusOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleNameAccess().getSimpleNameAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpecialVarAccess().getSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandAccess().getTimesDivOperandOperand1Action_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AccessBaseExpr
protected class AccessExpr_AccessBaseExprParserRuleCall_0 extends RuleCallToken {
	
	public AccessExpr_AccessBaseExprParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAccessExprAccess().getAccessBaseExprParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessBaseExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(AccessBaseExpr_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({AccessExpr.operand1=current} op=LSQUARE operand2=Expression RSQUARE | {AccessExpr.operand1=current} op=DOT value=ID
// args=CallArguments?)*
protected class AccessExpr_Alternatives_1 extends AlternativesToken {

	public AccessExpr_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAccessExprAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessExpr_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AccessExpr_Group_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {AccessExpr.operand1=current} op=LSQUARE operand2=Expression RSQUARE
protected class AccessExpr_Group_1_0 extends GroupToken {
	
	public AccessExpr_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAccessExprAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessExpr_RSQUARETerminalRuleCall_1_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// {AccessExpr.operand1=current}
protected class AccessExpr_AccessExprOperand1Action_1_0_0 extends ActionToken  {

	public AccessExpr_AccessExprOperand1Action_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessExpr_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AccessExpr_AccessBaseExprParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("operand1", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("operand1")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// op=LSQUARE
protected class AccessExpr_OpAssignment_1_0_1 extends AssignmentToken  {
	
	public AccessExpr_OpAssignment_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAccessExprAccess().getOpAssignment_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessExpr_AccessExprOperand1Action_1_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAccessExprAccess().getOpLSQUARETerminalRuleCall_1_0_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAccessExprAccess().getOpLSQUARETerminalRuleCall_1_0_1_0();
			return obj;
		}
		return null;
	}

}

// operand2=Expression
protected class AccessExpr_Operand2Assignment_1_0_2 extends AssignmentToken  {
	
	public AccessExpr_Operand2Assignment_1_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAccessExprAccess().getOperand2Assignment_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operand2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operand2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAccessExprAccess().getOperand2ExpressionParserRuleCall_1_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AccessExpr_OpAssignment_1_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// RSQUARE
protected class AccessExpr_RSQUARETerminalRuleCall_1_0_3 extends UnassignedTextToken {

	public AccessExpr_RSQUARETerminalRuleCall_1_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAccessExprAccess().getRSQUARETerminalRuleCall_1_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessExpr_Operand2Assignment_1_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {AccessExpr.operand1=current} op=DOT value=ID args=CallArguments?
protected class AccessExpr_Group_1_1 extends GroupToken {
	
	public AccessExpr_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAccessExprAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessExpr_ArgsAssignment_1_1_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AccessExpr_ValueAssignment_1_1_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// {AccessExpr.operand1=current}
protected class AccessExpr_AccessExprOperand1Action_1_1_0 extends ActionToken  {

	public AccessExpr_AccessExprOperand1Action_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessExpr_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AccessExpr_AccessBaseExprParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("operand1", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("operand1")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// op=DOT
protected class AccessExpr_OpAssignment_1_1_1 extends AssignmentToken  {
	
	public AccessExpr_OpAssignment_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAccessExprAccess().getOpAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessExpr_AccessExprOperand1Action_1_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAccessExprAccess().getOpDOTTerminalRuleCall_1_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAccessExprAccess().getOpDOTTerminalRuleCall_1_1_1_0();
			return obj;
		}
		return null;
	}

}

// value=ID
protected class AccessExpr_ValueAssignment_1_1_2 extends AssignmentToken  {
	
	public AccessExpr_ValueAssignment_1_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAccessExprAccess().getValueAssignment_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessExpr_OpAssignment_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAccessExprAccess().getValueIDTerminalRuleCall_1_1_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAccessExprAccess().getValueIDTerminalRuleCall_1_1_2_0();
			return obj;
		}
		return null;
	}

}

// args=CallArguments?
protected class AccessExpr_ArgsAssignment_1_1_3 extends AssignmentToken  {
	
	public AccessExpr_ArgsAssignment_1_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAccessExprAccess().getArgsAssignment_1_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallArguments_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("args",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("args");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCallArgumentsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAccessExprAccess().getArgsCallArgumentsParserRuleCall_1_1_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AccessExpr_ValueAssignment_1_1_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule AccessExpr ****************/


/************ begin Rule AccessBaseExpr ****************
 *
 * / *
 * AccessExpr returns Expression :
 * 	AccessBaseExpr ({AccessExpr.operand1 = current} access = Access)*
 * 	;
 * 	
 * Access :
 * 	IndexAccess |
 * 	MemberAccess
 * ;
 * 
 * IndexAccess:
 * {IndexAccess}
 * 	LSQUARE (index=Expression) RSQUARE;
 * 
 * MemberAccess :
 *   (op=DOT memberName=ID (args=CallArguments)?) ;
 * * / // access base expressions are either simple builtin calls or var references,
 * // literals, new expressions and bracketed expressions. they may possibly be
 * // accessed on the left before being composed with prefix or infix operators
 * AccessBaseExpr returns Expression:
 * 	BuiltinExpr | SimpleExpr;
 *
 **/

// BuiltinExpr | SimpleExpr
protected class AccessBaseExpr_Alternatives extends AlternativesToken {

	public AccessBaseExpr_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAccessBaseExprAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AccessBaseExpr_BuiltinExprParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AccessBaseExpr_SimpleExprParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExprAccess().getAssignmentExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBitwiseOperandAccess().getBitwiseOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinExprAccess().getBuiltinExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIndexedSpecialVarAccess().getIndexedSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLogicalOperandAccess().getLogicalOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNewExprAccess().getNewExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOperatorExprAccess().getOperatorExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPlusMinusOperandAccess().getPlusMinusOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleNameAccess().getSimpleNameAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpecialVarAccess().getSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandAccess().getTimesDivOperandOperand1Action_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// BuiltinExpr
protected class AccessBaseExpr_BuiltinExprParserRuleCall_0 extends RuleCallToken {
	
	public AccessBaseExpr_BuiltinExprParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAccessBaseExprAccess().getBuiltinExprParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BuiltinExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBuiltinExprAccess().getBuiltinExprAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(BuiltinExpr_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SimpleExpr
protected class AccessBaseExpr_SimpleExprParserRuleCall_1 extends RuleCallToken {
	
	public AccessBaseExpr_SimpleExprParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAccessBaseExprAccess().getSimpleExprParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(SimpleExpr_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule AccessBaseExpr ****************/


/************ begin Rule BuiltinExpr ****************
 *
 * BuiltinExpr returns Expression:
 * 	{BuiltinExpr} value=ID args=CallArguments;
 *
 **/

// {BuiltinExpr} value=ID args=CallArguments
protected class BuiltinExpr_Group extends GroupToken {
	
	public BuiltinExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBuiltinExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BuiltinExpr_ArgsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBuiltinExprAccess().getBuiltinExprAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {BuiltinExpr}
protected class BuiltinExpr_BuiltinExprAction_0 extends ActionToken  {

	public BuiltinExpr_BuiltinExprAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getBuiltinExprAccess().getBuiltinExprAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// value=ID
protected class BuiltinExpr_ValueAssignment_1 extends AssignmentToken  {
	
	public BuiltinExpr_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuiltinExprAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BuiltinExpr_BuiltinExprAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBuiltinExprAccess().getValueIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getBuiltinExprAccess().getValueIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// args=CallArguments
protected class BuiltinExpr_ArgsAssignment_2 extends AssignmentToken  {
	
	public BuiltinExpr_ArgsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuiltinExprAccess().getArgsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallArguments_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("args",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("args");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCallArgumentsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBuiltinExprAccess().getArgsCallArgumentsParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BuiltinExpr_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule BuiltinExpr ****************/


/************ begin Rule SimpleExpr ****************
 *
 * / *
 *  * TODO still need to allow for ternary (c ? e1 : e2) expressions
 *  * / SimpleExpr returns Expression:
 * 	VariableExpr | ConstantExpr | BracketedExpr | NewExpr;
 *
 **/

// VariableExpr | ConstantExpr | BracketedExpr | NewExpr
protected class SimpleExpr_Alternatives extends AlternativesToken {

	public SimpleExpr_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSimpleExprAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleExpr_VariableExprParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SimpleExpr_ConstantExprParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SimpleExpr_BracketedExprParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new SimpleExpr_NewExprParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExprAccess().getAssignmentExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBitwiseOperandAccess().getBitwiseOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinExprAccess().getBuiltinExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIndexedSpecialVarAccess().getIndexedSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLogicalOperandAccess().getLogicalOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNewExprAccess().getNewExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOperatorExprAccess().getOperatorExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPlusMinusOperandAccess().getPlusMinusOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleNameAccess().getSimpleNameAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpecialVarAccess().getSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandAccess().getTimesDivOperandOperand1Action_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// VariableExpr
protected class SimpleExpr_VariableExprParserRuleCall_0 extends RuleCallToken {
	
	public SimpleExpr_VariableExprParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSimpleExprAccess().getVariableExprParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIndexedSpecialVarAccess().getIndexedSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleNameAccess().getSimpleNameAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpecialVarAccess().getSpecialVarAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(VariableExpr_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ConstantExpr
protected class SimpleExpr_ConstantExprParserRuleCall_1 extends RuleCallToken {
	
	public SimpleExpr_ConstantExprParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSimpleExprAccess().getConstantExprParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstantExpr_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ConstantExpr_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BracketedExpr
protected class SimpleExpr_BracketedExprParserRuleCall_2 extends RuleCallToken {
	
	public SimpleExpr_BracketedExprParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSimpleExprAccess().getBracketedExprParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BracketedExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(BracketedExpr_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NewExpr
protected class SimpleExpr_NewExprParserRuleCall_3 extends RuleCallToken {
	
	public SimpleExpr_NewExprParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSimpleExprAccess().getNewExprParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewExprAccess().getNewExprAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(NewExpr_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule SimpleExpr ****************/


/************ begin Rule NewExpr ****************
 *
 * NewExpr returns Expression:
 * 	{NewExpr} op=NEW value=QualifiedName params=CallArguments;
 *
 **/

// {NewExpr} op=NEW value=QualifiedName params=CallArguments
protected class NewExpr_Group extends GroupToken {
	
	public NewExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNewExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewExpr_ParamsAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNewExprAccess().getNewExprAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {NewExpr}
protected class NewExpr_NewExprAction_0 extends ActionToken  {

	public NewExpr_NewExprAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getNewExprAccess().getNewExprAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// op=NEW
protected class NewExpr_OpAssignment_1 extends AssignmentToken  {
	
	public NewExpr_OpAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNewExprAccess().getOpAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewExpr_NewExprAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNewExprAccess().getOpNEWTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNewExprAccess().getOpNEWTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// value=QualifiedName
protected class NewExpr_ValueAssignment_2 extends AssignmentToken  {
	
	public NewExpr_ValueAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNewExprAccess().getValueAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NewExpr_OpAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNewExprAccess().getValueQualifiedNameParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getNewExprAccess().getValueQualifiedNameParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// params=CallArguments
protected class NewExpr_ParamsAssignment_3 extends AssignmentToken  {
	
	public NewExpr_ParamsAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNewExprAccess().getParamsAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallArguments_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("params",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCallArgumentsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNewExprAccess().getParamsCallArgumentsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NewExpr_ValueAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule NewExpr ****************/


/************ begin Rule VariableExpr ****************
 *
 * VariableExpr returns Expression:
 * 	SimpleName | IndexedSpecialVar | SpecialVar;
 *
 **/

// SimpleName | IndexedSpecialVar | SpecialVar
protected class VariableExpr_Alternatives extends AlternativesToken {

	public VariableExpr_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getVariableExprAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VariableExpr_SimpleNameParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VariableExpr_IndexedSpecialVarParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new VariableExpr_SpecialVarParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIndexedSpecialVarAccess().getIndexedSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleNameAccess().getSimpleNameAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpecialVarAccess().getSpecialVarAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SimpleName
protected class VariableExpr_SimpleNameParserRuleCall_0 extends RuleCallToken {
	
	public VariableExpr_SimpleNameParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getVariableExprAccess().getSimpleNameParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleName_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleNameAccess().getSimpleNameAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(SimpleName_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// IndexedSpecialVar
protected class VariableExpr_IndexedSpecialVarParserRuleCall_1 extends RuleCallToken {
	
	public VariableExpr_IndexedSpecialVarParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getVariableExprAccess().getIndexedSpecialVarParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IndexedSpecialVar_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIndexedSpecialVarAccess().getIndexedSpecialVarAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(IndexedSpecialVar_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SpecialVar
protected class VariableExpr_SpecialVarParserRuleCall_2 extends RuleCallToken {
	
	public VariableExpr_SpecialVarParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getVariableExprAccess().getSpecialVarParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpecialVar_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpecialVarAccess().getSpecialVarAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(SpecialVar_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule VariableExpr ****************/


/************ begin Rule CallArguments ****************
 *
 * CallArguments:
 * 	LPAREN {CallArguments} (args+=Expression (COMMA args+=Expression)*)? RPAREN;
 *
 **/

// LPAREN {CallArguments} (args+=Expression (COMMA args+=Expression)*)? RPAREN
protected class CallArguments_Group extends GroupToken {
	
	public CallArguments_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCallArgumentsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallArguments_RPARENTerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCallArgumentsAccess().getCallArgumentsAction_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// LPAREN
protected class CallArguments_LPARENTerminalRuleCall_0 extends UnassignedTextToken {

	public CallArguments_LPARENTerminalRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCallArgumentsAccess().getLPARENTerminalRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {CallArguments}
protected class CallArguments_CallArgumentsAction_1 extends ActionToken  {

	public CallArguments_CallArgumentsAction_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getCallArgumentsAccess().getCallArgumentsAction_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallArguments_LPARENTerminalRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// (args+=Expression (COMMA args+=Expression)*)?
protected class CallArguments_Group_2 extends GroupToken {
	
	public CallArguments_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCallArgumentsAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallArguments_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CallArguments_ArgsAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// args+=Expression
protected class CallArguments_ArgsAssignment_2_0 extends AssignmentToken  {
	
	public CallArguments_ArgsAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCallArgumentsAccess().getArgsAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("args",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("args");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCallArgumentsAccess().getArgsExpressionParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CallArguments_CallArgumentsAction_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (COMMA args+=Expression)*
protected class CallArguments_Group_2_1 extends GroupToken {
	
	public CallArguments_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCallArgumentsAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallArguments_ArgsAssignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// COMMA
protected class CallArguments_COMMATerminalRuleCall_2_1_0 extends UnassignedTextToken {

	public CallArguments_COMMATerminalRuleCall_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCallArgumentsAccess().getCOMMATerminalRuleCall_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallArguments_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CallArguments_ArgsAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// args+=Expression
protected class CallArguments_ArgsAssignment_2_1_1 extends AssignmentToken  {
	
	public CallArguments_ArgsAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCallArgumentsAccess().getArgsAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("args",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("args");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCallArgumentsAccess().getArgsExpressionParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CallArguments_COMMATerminalRuleCall_2_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// RPAREN
protected class CallArguments_RPARENTerminalRuleCall_3 extends UnassignedTextToken {

	public CallArguments_RPARENTerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCallArgumentsAccess().getRPARENTerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallArguments_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CallArguments_CallArgumentsAction_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule CallArguments ****************/



/************ begin Rule SimpleName ****************
 *
 * SimpleName returns Expression:
 * 	{SimpleName} value=ID;
 *
 **/

// {SimpleName} value=ID
protected class SimpleName_Group extends GroupToken {
	
	public SimpleName_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleNameAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleName_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleNameAccess().getSimpleNameAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {SimpleName}
protected class SimpleName_SimpleNameAction_0 extends ActionToken  {

	public SimpleName_SimpleNameAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSimpleNameAccess().getSimpleNameAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// value=ID
protected class SimpleName_ValueAssignment_1 extends AssignmentToken  {
	
	public SimpleName_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleNameAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleName_SimpleNameAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSimpleNameAccess().getValueIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSimpleNameAccess().getValueIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule SimpleName ****************/


/************ begin Rule IndexedSpecialVar ****************
 *
 * IndexedSpecialVar returns Expression:
 * 	{IndexedSpecialVar} op=DOLLAR value=INTVAL;
 *
 **/

// {IndexedSpecialVar} op=DOLLAR value=INTVAL
protected class IndexedSpecialVar_Group extends GroupToken {
	
	public IndexedSpecialVar_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIndexedSpecialVarAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IndexedSpecialVar_ValueAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIndexedSpecialVarAccess().getIndexedSpecialVarAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {IndexedSpecialVar}
protected class IndexedSpecialVar_IndexedSpecialVarAction_0 extends ActionToken  {

	public IndexedSpecialVar_IndexedSpecialVarAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getIndexedSpecialVarAccess().getIndexedSpecialVarAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// op=DOLLAR
protected class IndexedSpecialVar_OpAssignment_1 extends AssignmentToken  {
	
	public IndexedSpecialVar_OpAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIndexedSpecialVarAccess().getOpAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IndexedSpecialVar_IndexedSpecialVarAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getIndexedSpecialVarAccess().getOpDOLLARTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getIndexedSpecialVarAccess().getOpDOLLARTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// value=INTVAL
protected class IndexedSpecialVar_ValueAssignment_2 extends AssignmentToken  {
	
	public IndexedSpecialVar_ValueAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIndexedSpecialVarAccess().getValueAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IndexedSpecialVar_OpAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getIndexedSpecialVarAccess().getValueINTVALTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getIndexedSpecialVarAccess().getValueINTVALTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule IndexedSpecialVar ****************/


/************ begin Rule SpecialVar ****************
 *
 * SpecialVar returns Expression:
 * 	{SpecialVar} (op="$#" | op="$!" | op="$^" | op="$@" | op="$*" | op=DOLLAR value=ID);
 *
 **/

// {SpecialVar} (op="$#" | op="$!" | op="$^" | op="$@" | op="$*" | op=DOLLAR value=ID)
protected class SpecialVar_Group extends GroupToken {
	
	public SpecialVar_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSpecialVarAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpecialVar_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpecialVarAccess().getSpecialVarAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {SpecialVar}
protected class SpecialVar_SpecialVarAction_0 extends ActionToken  {

	public SpecialVar_SpecialVarAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getSpecialVarAccess().getSpecialVarAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// op="$#" | op="$!" | op="$^" | op="$@" | op="$*" | op=DOLLAR value=ID
protected class SpecialVar_Alternatives_1 extends AlternativesToken {

	public SpecialVar_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSpecialVarAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpecialVar_OpAssignment_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SpecialVar_OpAssignment_1_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SpecialVar_OpAssignment_1_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new SpecialVar_OpAssignment_1_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new SpecialVar_OpAssignment_1_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new SpecialVar_Group_1_5(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

}

// op="$#"
protected class SpecialVar_OpAssignment_1_0 extends AssignmentToken  {
	
	public SpecialVar_OpAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpecialVarAccess().getOpAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpecialVar_SpecialVarAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getSpecialVarAccess().getOpDollarSignNumberSignKeyword_1_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpecialVarAccess().getOpDollarSignNumberSignKeyword_1_0_0();
			return obj;
		}
		return null;
	}

}

// op="$!"
protected class SpecialVar_OpAssignment_1_1 extends AssignmentToken  {
	
	public SpecialVar_OpAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpecialVarAccess().getOpAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpecialVar_SpecialVarAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getSpecialVarAccess().getOpDollarSignExclamationMarkKeyword_1_1_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpecialVarAccess().getOpDollarSignExclamationMarkKeyword_1_1_0();
			return obj;
		}
		return null;
	}

}

// op="$^"
protected class SpecialVar_OpAssignment_1_2 extends AssignmentToken  {
	
	public SpecialVar_OpAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpecialVarAccess().getOpAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpecialVar_SpecialVarAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getSpecialVarAccess().getOpDollarSignCircumflexAccentKeyword_1_2_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpecialVarAccess().getOpDollarSignCircumflexAccentKeyword_1_2_0();
			return obj;
		}
		return null;
	}

}

// op="$@"
protected class SpecialVar_OpAssignment_1_3 extends AssignmentToken  {
	
	public SpecialVar_OpAssignment_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpecialVarAccess().getOpAssignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpecialVar_SpecialVarAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getSpecialVarAccess().getOpDollarSignCommercialAtKeyword_1_3_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpecialVarAccess().getOpDollarSignCommercialAtKeyword_1_3_0();
			return obj;
		}
		return null;
	}

}

// op="$*"
protected class SpecialVar_OpAssignment_1_4 extends AssignmentToken  {
	
	public SpecialVar_OpAssignment_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpecialVarAccess().getOpAssignment_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpecialVar_SpecialVarAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getSpecialVarAccess().getOpDollarSignAsteriskKeyword_1_4_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSpecialVarAccess().getOpDollarSignAsteriskKeyword_1_4_0();
			return obj;
		}
		return null;
	}

}

// op=DOLLAR value=ID
protected class SpecialVar_Group_1_5 extends GroupToken {
	
	public SpecialVar_Group_1_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSpecialVarAccess().getGroup_1_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpecialVar_ValueAssignment_1_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// op=DOLLAR
protected class SpecialVar_OpAssignment_1_5_0 extends AssignmentToken  {
	
	public SpecialVar_OpAssignment_1_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpecialVarAccess().getOpAssignment_1_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpecialVar_SpecialVarAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSpecialVarAccess().getOpDOLLARTerminalRuleCall_1_5_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSpecialVarAccess().getOpDOLLARTerminalRuleCall_1_5_0_0();
			return obj;
		}
		return null;
	}

}

// value=ID
protected class SpecialVar_ValueAssignment_1_5_1 extends AssignmentToken  {
	
	public SpecialVar_ValueAssignment_1_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpecialVarAccess().getValueAssignment_1_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SpecialVar_OpAssignment_1_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSpecialVarAccess().getValueIDTerminalRuleCall_1_5_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSpecialVarAccess().getValueIDTerminalRuleCall_1_5_1_0();
			return obj;
		}
		return null;
	}

}




/************ end Rule SpecialVar ****************/


/************ begin Rule BracketedExpr ****************
 *
 * BracketedExpr returns Expression:
 * 	LPAREN Expression RPAREN;
 *
 **/

// LPAREN Expression RPAREN
protected class BracketedExpr_Group extends GroupToken {
	
	public BracketedExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBracketedExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BracketedExpr_RPARENTerminalRuleCall_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAssignmentExprAccess().getAssignmentExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBitwiseOperandAccess().getBitwiseOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBuiltinExprAccess().getBuiltinExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIndexedSpecialVarAccess().getIndexedSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLogicalOperandAccess().getLogicalOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNewExprAccess().getNewExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOperatorExprAccess().getOperatorExprOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPlusMinusOperandAccess().getPlusMinusOperandOperand1Action_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleNameAccess().getSimpleNameAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpecialVarAccess().getSpecialVarAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimesDivOperandAccess().getTimesDivOperandOperand1Action_0_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// LPAREN
protected class BracketedExpr_LPARENTerminalRuleCall_0 extends UnassignedTextToken {

	public BracketedExpr_LPARENTerminalRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBracketedExprAccess().getLPARENTerminalRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Expression
protected class BracketedExpr_ExpressionParserRuleCall_1 extends RuleCallToken {
	
	public BracketedExpr_ExpressionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBracketedExprAccess().getExpressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expression_AssignmentExprParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Expression_AssignmentExprParserRuleCall.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BracketedExpr_LPARENTerminalRuleCall_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// RPAREN
protected class BracketedExpr_RPARENTerminalRuleCall_2 extends UnassignedTextToken {

	public BracketedExpr_RPARENTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBracketedExprAccess().getRPARENTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BracketedExpr_ExpressionParserRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule BracketedExpr ****************/


/************ begin Rule ConstantExpr ****************
 *
 * ConstantExpr returns Expression:
 * 	IntConstantExpr | StringConstantExpr | BooleanConstantExpr | FloatConstantExpr;
 *
 **/

// IntConstantExpr | StringConstantExpr | BooleanConstantExpr | FloatConstantExpr
protected class ConstantExpr_Alternatives extends AlternativesToken {

	public ConstantExpr_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getConstantExprAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstantExpr_IntConstantExprParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ConstantExpr_StringConstantExprParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ConstantExpr_BooleanConstantExprParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ConstantExpr_FloatConstantExprParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// IntConstantExpr
protected class ConstantExpr_IntConstantExprParserRuleCall_0 extends RuleCallToken {
	
	public ConstantExpr_IntConstantExprParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstantExprAccess().getIntConstantExprParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IntConstantExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(IntConstantExpr_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// StringConstantExpr
protected class ConstantExpr_StringConstantExprParserRuleCall_1 extends RuleCallToken {
	
	public ConstantExpr_StringConstantExprParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstantExprAccess().getStringConstantExprParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringConstantExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(StringConstantExpr_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BooleanConstantExpr
protected class ConstantExpr_BooleanConstantExprParserRuleCall_2 extends RuleCallToken {
	
	public ConstantExpr_BooleanConstantExprParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstantExprAccess().getBooleanConstantExprParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanConstantExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(BooleanConstantExpr_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FloatConstantExpr
protected class ConstantExpr_FloatConstantExprParserRuleCall_3 extends RuleCallToken {
	
	public ConstantExpr_FloatConstantExprParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getConstantExprAccess().getFloatConstantExprParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FloatConstantExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(FloatConstantExpr_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ConstantExpr ****************/


/************ begin Rule IntConstantExpr ****************
 *
 * IntConstantExpr returns Expression:
 * 	{IntConstantExpr} value=INTVAL;
 *
 **/

// {IntConstantExpr} value=INTVAL
protected class IntConstantExpr_Group extends GroupToken {
	
	public IntConstantExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIntConstantExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IntConstantExpr_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {IntConstantExpr}
protected class IntConstantExpr_IntConstantExprAction_0 extends ActionToken  {

	public IntConstantExpr_IntConstantExprAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// value=INTVAL
protected class IntConstantExpr_ValueAssignment_1 extends AssignmentToken  {
	
	public IntConstantExpr_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIntConstantExprAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IntConstantExpr_IntConstantExprAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getIntConstantExprAccess().getValueINTVALTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getIntConstantExprAccess().getValueINTVALTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule IntConstantExpr ****************/


/************ begin Rule StringConstantExpr ****************
 *
 * StringConstantExpr returns Expression:
 * 	{StringConstantExpr} value=STRING;
 *
 **/

// {StringConstantExpr} value=STRING
protected class StringConstantExpr_Group extends GroupToken {
	
	public StringConstantExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStringConstantExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringConstantExpr_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {StringConstantExpr}
protected class StringConstantExpr_StringConstantExprAction_0 extends ActionToken  {

	public StringConstantExpr_StringConstantExprAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// value=STRING
protected class StringConstantExpr_ValueAssignment_1 extends AssignmentToken  {
	
	public StringConstantExpr_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringConstantExprAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringConstantExpr_StringConstantExprAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStringConstantExprAccess().getValueSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStringConstantExprAccess().getValueSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule StringConstantExpr ****************/


/************ begin Rule BooleanConstantExpr ****************
 *
 * BooleanConstantExpr returns Expression:
 * 	{BooleanConstantExpr} value=BOOLEAN;
 *
 **/

// {BooleanConstantExpr} value=BOOLEAN
protected class BooleanConstantExpr_Group extends GroupToken {
	
	public BooleanConstantExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBooleanConstantExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanConstantExpr_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {BooleanConstantExpr}
protected class BooleanConstantExpr_BooleanConstantExprAction_0 extends ActionToken  {

	public BooleanConstantExpr_BooleanConstantExprAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// value=BOOLEAN
protected class BooleanConstantExpr_ValueAssignment_1 extends AssignmentToken  {
	
	public BooleanConstantExpr_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanConstantExprAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BooleanConstantExpr_BooleanConstantExprAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBooleanConstantExprAccess().getValueBOOLEANTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getBooleanConstantExprAccess().getValueBOOLEANTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule BooleanConstantExpr ****************/


/************ begin Rule FloatConstantExpr ****************
 *
 * FloatConstantExpr returns Expression:
 * 	{FloatConstantExpr} value=FLOATVAL;
 *
 **/

// {FloatConstantExpr} value=FLOATVAL
protected class FloatConstantExpr_Group extends GroupToken {
	
	public FloatConstantExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFloatConstantExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FloatConstantExpr_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {FloatConstantExpr}
protected class FloatConstantExpr_FloatConstantExprAction_0 extends ActionToken  {

	public FloatConstantExpr_FloatConstantExprAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// value=FLOATVAL
protected class FloatConstantExpr_ValueAssignment_1 extends AssignmentToken  {
	
	public FloatConstantExpr_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFloatConstantExprAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FloatConstantExpr_FloatConstantExprAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFloatConstantExprAccess().getValueFLOATVALTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFloatConstantExprAccess().getValueFLOATVALTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule FloatConstantExpr ****************/

}
