/*
* generated by Xtext
*/
grammar InternalByteman;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.jboss.byteman.eclipse.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.jboss.byteman.eclipse.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.jboss.byteman.eclipse.services.BytemanGrammarAccess;

}

@parser::members {

 	private BytemanGrammarAccess grammarAccess;
 	
    public InternalBytemanParser(TokenStream input, BytemanGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "DomainModel";	
   	}
   	
   	@Override
   	protected BytemanGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDomainModel
entryRuleDomainModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainModelRule()); }
	 iv_ruleDomainModel=ruleDomainModel 
	 { $current=$iv_ruleDomainModel.current; } 
	 EOF 
;

// Rule DomainModel
ruleDomainModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDomainModelAccess().getDomainModelAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getDomainModelAccess().getElementsElementParserRuleCall_1_0_0()); 
	    }
		lv_elements_1_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainModelRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"Element");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |this_EOL_2=RULE_EOL
    { 
    newLeafNode(this_EOL_2, grammarAccess.getDomainModelAccess().getEOLTerminalRuleCall_1_1()); 
    }
)*)
;





// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	 iv_ruleElement=ruleElement 
	 { $current=$iv_ruleElement.current; } 
	 EOF 
;

// Rule Element
ruleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getElementAccess().getBytemanRuleParserRuleCall_0()); 
    }
    this_BytemanRule_0=ruleBytemanRule
    { 
        $current = $this_BytemanRule_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getHelperParserRuleCall_1()); 
    }
    this_Helper_1=ruleHelper
    { 
        $current = $this_Helper_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBytemanRule
entryRuleBytemanRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBytemanRuleRule()); }
	 iv_ruleBytemanRule=ruleBytemanRule 
	 { $current=$iv_ruleBytemanRule.current; } 
	 EOF 
;

// Rule BytemanRule
ruleBytemanRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_START_RULE
		{
			newLeafNode(lv_name_0_0, grammarAccess.getBytemanRuleAccess().getNameSTART_RULETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBytemanRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"START_RULE");
	    }

)
)(this_EOL_1=RULE_EOL
    { 
    newLeafNode(this_EOL_1, grammarAccess.getBytemanRuleAccess().getEOLTerminalRuleCall_1()); 
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getBytemanRuleAccess().getEventEventParserRuleCall_2_0()); 
	    }
		lv_event_2_0=ruleEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBytemanRuleRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_2_0, 
        		"Event");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBytemanRuleAccess().getBodyBodyParserRuleCall_3_0()); 
	    }
		lv_body_3_0=ruleBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBytemanRuleRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_3_0, 
        		"Body");
	        afterParserOrEnumRuleCall();
	    }

)
)this_END_RULE_4=RULE_END_RULE
    { 
    newLeafNode(this_END_RULE_4, grammarAccess.getBytemanRuleAccess().getEND_RULETerminalRuleCall_4()); 
    }
this_EOL_5=RULE_EOL
    { 
    newLeafNode(this_EOL_5, grammarAccess.getBytemanRuleAccess().getEOLTerminalRuleCall_5()); 
    }
)
;





// Entry rule entryRuleBody
entryRuleBody returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_BM_COMMENT", "RULE_EOL");
	}
	:
	{ newCompositeNode(grammarAccess.getBodyRule()); }
	 iv_ruleBody=ruleBody 
	 { $current=$iv_ruleBody.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Body
ruleBody returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_BM_COMMENT", "RULE_EOL");
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBodyAccess().getBindBindParserRuleCall_0_0()); 
	    }
		lv_bind_0_0=ruleBind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBodyRule());
	        }
       		set(
       			$current, 
       			"bind",
        		lv_bind_0_0, 
        		"Bind");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getBodyAccess().getConditionConditionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBodyRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBodyAccess().getActionsActionsParserRuleCall_2_0()); 
	    }
		lv_actions_2_0=ruleActions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBodyRule());
	        }
       		set(
       			$current, 
       			"actions",
        		lv_actions_2_0, 
        		"Actions");
	        afterParserOrEnumRuleCall();
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	 iv_ruleEvent=ruleEvent 
	 { $current=$iv_ruleEvent.current; } 
	 EOF 
;

// Rule Event
ruleEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getEventAccess().getClassEventClassParserRuleCall_0_0_0()); 
	    }
		lv_class_0_0=ruleEventClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventRule());
	        }
       		set(
       			$current, 
       			"class",
        		lv_class_0_0, 
        		"EventClass");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getEventAccess().getInterfaceEventInterfaceParserRuleCall_0_1_0()); 
	    }
		lv_interface_1_0=ruleEventInterface		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventRule());
	        }
       		set(
       			$current, 
       			"interface",
        		lv_interface_1_0, 
        		"EventInterface");
	        afterParserOrEnumRuleCall();
	    }

)
))(this_EOL_2=RULE_EOL
    { 
    newLeafNode(this_EOL_2, grammarAccess.getEventAccess().getEOLTerminalRuleCall_1()); 
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getEventAccess().getMethodEventMethodParserRuleCall_2_0()); 
	    }
		lv_method_3_0=ruleEventMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventRule());
	        }
       		set(
       			$current, 
       			"method",
        		lv_method_3_0, 
        		"EventMethod");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_EOL_4=RULE_EOL
    { 
    newLeafNode(this_EOL_4, grammarAccess.getEventAccess().getEOLTerminalRuleCall_3()); 
    }
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getEventAccess().getHelperHelperParserRuleCall_4_0_0()); 
	    }
		lv_helper_5_0=ruleHelper		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventRule());
	        }
       		set(
       			$current, 
       			"helper",
        		lv_helper_5_0, 
        		"Helper");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_EOL_6=RULE_EOL
    { 
    newLeafNode(this_EOL_6, grammarAccess.getEventAccess().getEOLTerminalRuleCall_4_1()); 
    }
)*)?((
(
		{ 
	        newCompositeNode(grammarAccess.getEventAccess().getLocationSpecLocationSpecifierParserRuleCall_5_0_0()); 
	    }
		lv_locationSpec_7_0=ruleLocationSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventRule());
	        }
       		set(
       			$current, 
       			"locationSpec",
        		lv_locationSpec_7_0, 
        		"LocationSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_EOL_8=RULE_EOL
    { 
    newLeafNode(this_EOL_8, grammarAccess.getEventAccess().getEOLTerminalRuleCall_5_1()); 
    }
)*)?)
;





// Entry rule entryRuleEventClass
entryRuleEventClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventClassRule()); }
	 iv_ruleEventClass=ruleEventClass 
	 { $current=$iv_ruleEventClass.current; } 
	 EOF 
;

// Rule EventClass
ruleEventClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_keyword_0_0=RULE_KEYWORD_CLASS
		{
			newLeafNode(lv_keyword_0_0, grammarAccess.getEventClassAccess().getKeywordKEYWORD_CLASSTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"keyword",
        		lv_keyword_0_0, 
        		"KEYWORD_CLASS");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEventClassAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventClassRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEventInterface
entryRuleEventInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventInterfaceRule()); }
	 iv_ruleEventInterface=ruleEventInterface 
	 { $current=$iv_ruleEventInterface.current; } 
	 EOF 
;

// Rule EventInterface
ruleEventInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_keyword_0_0=RULE_KEYWORD_INTERFACE
		{
			newLeafNode(lv_keyword_0_0, grammarAccess.getEventInterfaceAccess().getKeywordKEYWORD_INTERFACETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"keyword",
        		lv_keyword_0_0, 
        		"KEYWORD_INTERFACE");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEventInterfaceAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventInterfaceRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEventMethod
entryRuleEventMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventMethodRule()); }
	 iv_ruleEventMethod=ruleEventMethod 
	 { $current=$iv_ruleEventMethod.current; } 
	 EOF 
;

// Rule EventMethod
ruleEventMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_KEYWORD_METHOD_0=RULE_KEYWORD_METHOD
    { 
    newLeafNode(this_KEYWORD_METHOD_0, grammarAccess.getEventMethodAccess().getKEYWORD_METHODTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventMethodAccess().getNameMethodNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleMethodName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventMethodRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"MethodName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEventMethodAccess().getParameterTypesParameterTypesParserRuleCall_2_0()); 
	    }
		lv_parameterTypes_2_0=ruleParameterTypes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventMethodRule());
	        }
       		set(
       			$current, 
       			"parameterTypes",
        		lv_parameterTypes_2_0, 
        		"ParameterTypes");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleMethodName
entryRuleMethodName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodNameRule()); } 
	 iv_ruleMethodName=ruleMethodName 
	 { $current=$iv_ruleMethodName.current.getText(); }  
	 EOF 
;

// Rule MethodName
ruleMethodName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getMethodNameAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_INIT_1=RULE_INIT    {
		$current.merge(this_INIT_1);
    }

    { 
    newLeafNode(this_INIT_1, grammarAccess.getMethodNameAccess().getINITTerminalRuleCall_1()); 
    }

    |    this_CLINIT_2=RULE_CLINIT    {
		$current.merge(this_CLINIT_2);
    }

    { 
    newLeafNode(this_CLINIT_2, grammarAccess.getMethodNameAccess().getCLINITTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleHelper
entryRuleHelper returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHelperRule()); }
	 iv_ruleHelper=ruleHelper 
	 { $current=$iv_ruleHelper.current; } 
	 EOF 
;

// Rule Helper
ruleHelper returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getHelperAccess().getHelperAction_0(),
            $current);
    }
)	otherlv_1='HELPER' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getHelperAccess().getHELPERKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getHelperQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_helper_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"helper",
        		lv_helper_2_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleLocationSpecifier
entryRuleLocationSpecifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocationSpecifierRule()); }
	 iv_ruleLocationSpecifier=ruleLocationSpecifier 
	 { $current=$iv_ruleLocationSpecifier.current; } 
	 EOF 
;

// Rule LocationSpecifier
ruleLocationSpecifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='AT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLocationSpecifierAccess().getATKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getLocationSpecifierAccess().getAtLocationParserRuleCall_0_1()); 
    }
    this_AtLocation_1=ruleAtLocation
    { 
        $current = $this_AtLocation_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_2='AFTER' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLocationSpecifierAccess().getAFTERKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getLocationSpecifierAccess().getAfterLocationParserRuleCall_1_1()); 
    }
    this_AfterLocation_3=ruleAfterLocation
    { 
        $current = $this_AfterLocation_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getLocationSpecifierAccess().getAtLineParserRuleCall_2()); 
    }
    this_AtLine_4=ruleAtLine
    { 
        $current = $this_AtLine_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtLocation
entryRuleAtLocation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtLocationRule()); }
	 iv_ruleAtLocation=ruleAtLocation 
	 { $current=$iv_ruleAtLocation.current; } 
	 EOF 
;

// Rule AtLocation
ruleAtLocation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAtLocationAccess().getAtEntryParserRuleCall_0()); 
    }
    this_AtEntry_0=ruleAtEntry
    { 
        $current = $this_AtEntry_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtLocationAccess().getAtExitParserRuleCall_1()); 
    }
    this_AtExit_1=ruleAtExit
    { 
        $current = $this_AtExit_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtLocationAccess().getAtLineParserRuleCall_2()); 
    }
    this_AtLine_2=ruleAtLine
    { 
        $current = $this_AtLine_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtLocationAccess().getAtReadParserRuleCall_3()); 
    }
    this_AtRead_3=ruleAtRead
    { 
        $current = $this_AtRead_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtLocationAccess().getAtWriteParserRuleCall_4()); 
    }
    this_AtWrite_4=ruleAtWrite
    { 
        $current = $this_AtWrite_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtLocationAccess().getAtInvokeParserRuleCall_5()); 
    }
    this_AtInvoke_5=ruleAtInvoke
    { 
        $current = $this_AtInvoke_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtLocationAccess().getAtSynchronizeParserRuleCall_6()); 
    }
    this_AtSynchronize_6=ruleAtSynchronize
    { 
        $current = $this_AtSynchronize_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtLocationAccess().getAtThrowParserRuleCall_7()); 
    }
    this_AtThrow_7=ruleAtThrow
    { 
        $current = $this_AtThrow_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAfterLocation
entryRuleAfterLocation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAfterLocationRule()); }
	 iv_ruleAfterLocation=ruleAfterLocation 
	 { $current=$iv_ruleAfterLocation.current; } 
	 EOF 
;

// Rule AfterLocation
ruleAfterLocation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAfterLocationAccess().getAfterReadParserRuleCall_0()); 
    }
    this_AfterRead_0=ruleAfterRead
    { 
        $current = $this_AfterRead_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAfterLocationAccess().getAfterWriteParserRuleCall_1()); 
    }
    this_AfterWrite_1=ruleAfterWrite
    { 
        $current = $this_AfterWrite_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAfterLocationAccess().getAfterInvokeParserRuleCall_2()); 
    }
    this_AfterInvoke_2=ruleAfterInvoke
    { 
        $current = $this_AfterInvoke_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAfterLocationAccess().getAfterSynchronizeParserRuleCall_3()); 
    }
    this_AfterSynchronize_3=ruleAfterSynchronize
    { 
        $current = $this_AfterSynchronize_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAfterLocationAccess().getAtThrowParserRuleCall_4()); 
    }
    this_AtThrow_4=ruleAtThrow
    { 
        $current = $this_AtThrow_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtEntry
entryRuleAtEntry returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtEntryRule()); }
	 iv_ruleAtEntry=ruleAtEntry 
	 { $current=$iv_ruleAtEntry.current; } 
	 EOF 
;

// Rule AtEntry
ruleAtEntry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtEntryAccess().getAtEntryAction_0(),
            $current);
    }
)	otherlv_1='ENTRY' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtEntryAccess().getENTRYKeyword_1());
    }
)
;





// Entry rule entryRuleAtExit
entryRuleAtExit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtExitRule()); }
	 iv_ruleAtExit=ruleAtExit 
	 { $current=$iv_ruleAtExit.current; } 
	 EOF 
;

// Rule AtExit
ruleAtExit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtExitAccess().getAtExitAction_0(),
            $current);
    }
)(	otherlv_1='EXIT' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtExitAccess().getEXITKeyword_1_0());
    }

    |this_KEYWORD_RETURN_2=RULE_KEYWORD_RETURN
    { 
    newLeafNode(this_KEYWORD_RETURN_2, grammarAccess.getAtExitAccess().getKEYWORD_RETURNTerminalRuleCall_1_1()); 
    }
))
;





// Entry rule entryRuleAtLine
entryRuleAtLine returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtLineRule()); }
	 iv_ruleAtLine=ruleAtLine 
	 { $current=$iv_ruleAtLine.current; } 
	 EOF 
;

// Rule AtLine
ruleAtLine returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtLineAccess().getAtLineAction_0(),
            $current);
    }
)	otherlv_1='LINE' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtLineAccess().getLINEKeyword_1());
    }
(
(
		lv_line_2_0=RULE_INTVAL
		{
			newLeafNode(lv_line_2_0, grammarAccess.getAtLineAccess().getLineINTVALTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtLineRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"line",
        		lv_line_2_0, 
        		"INTVAL");
	    }

)
))
;





// Entry rule entryRuleAtRead
entryRuleAtRead returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtReadRule()); }
	 iv_ruleAtRead=ruleAtRead 
	 { $current=$iv_ruleAtRead.current; } 
	 EOF 
;

// Rule AtRead
ruleAtRead returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAtReadAccess().getAtReadFieldParserRuleCall_0()); 
    }
    this_AtReadField_0=ruleAtReadField
    { 
        $current = $this_AtReadField_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtReadAccess().getAtReadLocalParserRuleCall_1()); 
    }
    this_AtReadLocal_1=ruleAtReadLocal
    { 
        $current = $this_AtReadLocal_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtReadField
entryRuleAtReadField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtReadFieldRule()); }
	 iv_ruleAtReadField=ruleAtReadField 
	 { $current=$iv_ruleAtReadField.current; } 
	 EOF 
;

// Rule AtReadField
ruleAtReadField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtReadFieldAccess().getAtReadFieldAction_0(),
            $current);
    }
)	otherlv_1='READ' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtReadFieldAccess().getREADKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtReadFieldAccess().getNameQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtReadFieldRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtReadFieldAccess().getCounterCounterParserRuleCall_3_0()); 
	    }
		lv_counter_3_0=ruleCounter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtReadFieldRule());
	        }
       		set(
       			$current, 
       			"counter",
        		lv_counter_3_0, 
        		"Counter");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleAtReadLocal
entryRuleAtReadLocal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtReadLocalRule()); }
	 iv_ruleAtReadLocal=ruleAtReadLocal 
	 { $current=$iv_ruleAtReadLocal.current; } 
	 EOF 
;

// Rule AtReadLocal
ruleAtReadLocal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtReadLocalAccess().getAtReadLocalAction_0(),
            $current);
    }
)	otherlv_1='READ' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtReadLocalAccess().getREADKeyword_1());
    }
this_DOLLAR_2=RULE_DOLLAR
    { 
    newLeafNode(this_DOLLAR_2, grammarAccess.getAtReadLocalAccess().getDOLLARTerminalRuleCall_2()); 
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getAtReadLocalAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtReadLocalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtReadLocalAccess().getCounterCounterParserRuleCall_4_0()); 
	    }
		lv_counter_4_0=ruleCounter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtReadLocalRule());
	        }
       		set(
       			$current, 
       			"counter",
        		lv_counter_4_0, 
        		"Counter");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleAfterRead
entryRuleAfterRead returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAfterReadRule()); }
	 iv_ruleAfterRead=ruleAfterRead 
	 { $current=$iv_ruleAfterRead.current; } 
	 EOF 
;

// Rule AfterRead
ruleAfterRead returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAfterReadAccess().getAfterReadFieldParserRuleCall_0()); 
    }
    this_AfterReadField_0=ruleAfterReadField
    { 
        $current = $this_AfterReadField_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAfterReadAccess().getAfterReadLocalParserRuleCall_1()); 
    }
    this_AfterReadLocal_1=ruleAfterReadLocal
    { 
        $current = $this_AfterReadLocal_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAfterReadField
entryRuleAfterReadField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAfterReadFieldRule()); }
	 iv_ruleAfterReadField=ruleAfterReadField 
	 { $current=$iv_ruleAfterReadField.current; } 
	 EOF 
;

// Rule AfterReadField
ruleAfterReadField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAfterReadFieldAccess().getAfterReadFieldAction_0(),
            $current);
    }
)	otherlv_1='READ' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAfterReadFieldAccess().getREADKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAfterReadFieldAccess().getNameQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAfterReadFieldRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAfterReadFieldAccess().getCounterCounterParserRuleCall_3_0()); 
	    }
		lv_counter_3_0=ruleCounter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAfterReadFieldRule());
	        }
       		set(
       			$current, 
       			"counter",
        		lv_counter_3_0, 
        		"Counter");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleAfterReadLocal
entryRuleAfterReadLocal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAfterReadLocalRule()); }
	 iv_ruleAfterReadLocal=ruleAfterReadLocal 
	 { $current=$iv_ruleAfterReadLocal.current; } 
	 EOF 
;

// Rule AfterReadLocal
ruleAfterReadLocal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAfterReadLocalAccess().getAfterReadLocalAction_0(),
            $current);
    }
)	otherlv_1='READ' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAfterReadLocalAccess().getREADKeyword_1());
    }
this_DOLLAR_2=RULE_DOLLAR
    { 
    newLeafNode(this_DOLLAR_2, grammarAccess.getAfterReadLocalAccess().getDOLLARTerminalRuleCall_2()); 
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getAfterReadLocalAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAfterReadLocalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAfterReadLocalAccess().getCounterCounterParserRuleCall_4_0()); 
	    }
		lv_counter_4_0=ruleCounter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAfterReadLocalRule());
	        }
       		set(
       			$current, 
       			"counter",
        		lv_counter_4_0, 
        		"Counter");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleAtWrite
entryRuleAtWrite returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtWriteRule()); }
	 iv_ruleAtWrite=ruleAtWrite 
	 { $current=$iv_ruleAtWrite.current; } 
	 EOF 
;

// Rule AtWrite
ruleAtWrite returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAtWriteAccess().getAtWriteFieldParserRuleCall_0()); 
    }
    this_AtWriteField_0=ruleAtWriteField
    { 
        $current = $this_AtWriteField_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtWriteAccess().getAtWriteLocalParserRuleCall_1()); 
    }
    this_AtWriteLocal_1=ruleAtWriteLocal
    { 
        $current = $this_AtWriteLocal_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtWriteField
entryRuleAtWriteField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtWriteFieldRule()); }
	 iv_ruleAtWriteField=ruleAtWriteField 
	 { $current=$iv_ruleAtWriteField.current; } 
	 EOF 
;

// Rule AtWriteField
ruleAtWriteField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtWriteFieldAccess().getAtWriteFieldAction_0(),
            $current);
    }
)	otherlv_1='WRITE' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtWriteFieldAccess().getWRITEKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtWriteFieldAccess().getNameQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtWriteFieldRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtWriteFieldAccess().getCounterCounterParserRuleCall_3_0()); 
	    }
		lv_counter_3_0=ruleCounter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtWriteFieldRule());
	        }
       		set(
       			$current, 
       			"counter",
        		lv_counter_3_0, 
        		"Counter");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleAtWriteLocal
entryRuleAtWriteLocal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtWriteLocalRule()); }
	 iv_ruleAtWriteLocal=ruleAtWriteLocal 
	 { $current=$iv_ruleAtWriteLocal.current; } 
	 EOF 
;

// Rule AtWriteLocal
ruleAtWriteLocal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtWriteLocalAccess().getAtWriteLocalAction_0(),
            $current);
    }
)	otherlv_1='WRITE' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtWriteLocalAccess().getWRITEKeyword_1());
    }
this_DOLLAR_2=RULE_DOLLAR
    { 
    newLeafNode(this_DOLLAR_2, grammarAccess.getAtWriteLocalAccess().getDOLLARTerminalRuleCall_2()); 
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getAtWriteLocalAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtWriteLocalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtWriteLocalAccess().getCounterCounterParserRuleCall_4_0()); 
	    }
		lv_counter_4_0=ruleCounter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtWriteLocalRule());
	        }
       		set(
       			$current, 
       			"counter",
        		lv_counter_4_0, 
        		"Counter");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleAfterWrite
entryRuleAfterWrite returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAfterWriteRule()); }
	 iv_ruleAfterWrite=ruleAfterWrite 
	 { $current=$iv_ruleAfterWrite.current; } 
	 EOF 
;

// Rule AfterWrite
ruleAfterWrite returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAfterWriteAccess().getAfterWriteFieldParserRuleCall_0()); 
    }
    this_AfterWriteField_0=ruleAfterWriteField
    { 
        $current = $this_AfterWriteField_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAfterWriteAccess().getAfterWriteLocalParserRuleCall_1()); 
    }
    this_AfterWriteLocal_1=ruleAfterWriteLocal
    { 
        $current = $this_AfterWriteLocal_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAfterWriteField
entryRuleAfterWriteField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAfterWriteFieldRule()); }
	 iv_ruleAfterWriteField=ruleAfterWriteField 
	 { $current=$iv_ruleAfterWriteField.current; } 
	 EOF 
;

// Rule AfterWriteField
ruleAfterWriteField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAfterWriteFieldAccess().getAfterWriteFieldAction_0(),
            $current);
    }
)	otherlv_1='WRITE' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAfterWriteFieldAccess().getWRITEKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAfterWriteFieldAccess().getNameQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAfterWriteFieldRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAfterWriteFieldAccess().getCounterCounterParserRuleCall_3_0()); 
	    }
		lv_counter_3_0=ruleCounter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAfterWriteFieldRule());
	        }
       		set(
       			$current, 
       			"counter",
        		lv_counter_3_0, 
        		"Counter");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleAfterWriteLocal
entryRuleAfterWriteLocal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAfterWriteLocalRule()); }
	 iv_ruleAfterWriteLocal=ruleAfterWriteLocal 
	 { $current=$iv_ruleAfterWriteLocal.current; } 
	 EOF 
;

// Rule AfterWriteLocal
ruleAfterWriteLocal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAfterWriteLocalAccess().getAfterWriteLocalAction_0(),
            $current);
    }
)	otherlv_1='WRITE' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAfterWriteLocalAccess().getWRITEKeyword_1());
    }
this_DOLLAR_2=RULE_DOLLAR
    { 
    newLeafNode(this_DOLLAR_2, grammarAccess.getAfterWriteLocalAccess().getDOLLARTerminalRuleCall_2()); 
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getAfterWriteLocalAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAfterWriteLocalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAfterWriteLocalAccess().getCounterCounterParserRuleCall_4_0()); 
	    }
		lv_counter_4_0=ruleCounter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAfterWriteLocalRule());
	        }
       		set(
       			$current, 
       			"counter",
        		lv_counter_4_0, 
        		"Counter");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleAtInvoke
entryRuleAtInvoke returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtInvokeRule()); }
	 iv_ruleAtInvoke=ruleAtInvoke 
	 { $current=$iv_ruleAtInvoke.current; } 
	 EOF 
;

// Rule AtInvoke
ruleAtInvoke returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtInvokeAccess().getAtInvokeAction_0(),
            $current);
    }
)(	otherlv_1='INVOKE' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtInvokeAccess().getINVOKEKeyword_1_0());
    }

    |	otherlv_2='CALL' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAtInvokeAccess().getCALLKeyword_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtInvokeAccess().getNameQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_name_3_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtInvokeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtInvokeAccess().getParameterTypesParameterTypesParserRuleCall_3_0()); 
	    }
		lv_parameterTypes_4_0=ruleParameterTypes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtInvokeRule());
	        }
       		set(
       			$current, 
       			"parameterTypes",
        		lv_parameterTypes_4_0, 
        		"ParameterTypes");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAtInvokeAccess().getCounterCounterParserRuleCall_4_0()); 
	    }
		lv_counter_5_0=ruleCounter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtInvokeRule());
	        }
       		set(
       			$current, 
       			"counter",
        		lv_counter_5_0, 
        		"Counter");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleAfterInvoke
entryRuleAfterInvoke returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAfterInvokeRule()); }
	 iv_ruleAfterInvoke=ruleAfterInvoke 
	 { $current=$iv_ruleAfterInvoke.current; } 
	 EOF 
;

// Rule AfterInvoke
ruleAfterInvoke returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAfterInvokeAccess().getAfterInvokeAction_0(),
            $current);
    }
)(	otherlv_1='INVOKE' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAfterInvokeAccess().getINVOKEKeyword_1_0());
    }

    |	otherlv_2='CALL' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAfterInvokeAccess().getCALLKeyword_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAfterInvokeAccess().getNameQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_name_3_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAfterInvokeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAfterInvokeAccess().getParameterTypesParameterTypesParserRuleCall_3_0()); 
	    }
		lv_parameterTypes_4_0=ruleParameterTypes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAfterInvokeRule());
	        }
       		set(
       			$current, 
       			"parameterTypes",
        		lv_parameterTypes_4_0, 
        		"ParameterTypes");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAfterInvokeAccess().getCounterCounterParserRuleCall_4_0()); 
	    }
		lv_counter_5_0=ruleCounter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAfterInvokeRule());
	        }
       		set(
       			$current, 
       			"counter",
        		lv_counter_5_0, 
        		"Counter");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleAtSynchronize
entryRuleAtSynchronize returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtSynchronizeRule()); }
	 iv_ruleAtSynchronize=ruleAtSynchronize 
	 { $current=$iv_ruleAtSynchronize.current; } 
	 EOF 
;

// Rule AtSynchronize
ruleAtSynchronize returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtSynchronizeAccess().getAtSynchronizeAction_0(),
            $current);
    }
)	otherlv_1='SYNCHRONIZE' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtSynchronizeAccess().getSYNCHRONIZEKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtSynchronizeAccess().getCounterCounterParserRuleCall_2_0()); 
	    }
		lv_counter_2_0=ruleCounter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtSynchronizeRule());
	        }
       		set(
       			$current, 
       			"counter",
        		lv_counter_2_0, 
        		"Counter");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleAfterSynchronize
entryRuleAfterSynchronize returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAfterSynchronizeRule()); }
	 iv_ruleAfterSynchronize=ruleAfterSynchronize 
	 { $current=$iv_ruleAfterSynchronize.current; } 
	 EOF 
;

// Rule AfterSynchronize
ruleAfterSynchronize returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAfterSynchronizeAccess().getAfterSynchronizeAction_0(),
            $current);
    }
)	otherlv_1='SYNCHRONIZE' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAfterSynchronizeAccess().getSYNCHRONIZEKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAfterSynchronizeAccess().getCounterCounterParserRuleCall_2_0()); 
	    }
		lv_counter_2_0=ruleCounter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAfterSynchronizeRule());
	        }
       		set(
       			$current, 
       			"counter",
        		lv_counter_2_0, 
        		"Counter");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleAtThrow
entryRuleAtThrow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtThrowRule()); }
	 iv_ruleAtThrow=ruleAtThrow 
	 { $current=$iv_ruleAtThrow.current; } 
	 EOF 
;

// Rule AtThrow
ruleAtThrow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtThrowAccess().getAtThrowAction_0(),
            $current);
    }
)	otherlv_1='THROW' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAtThrowAccess().getTHROWKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtThrowAccess().getNameQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtThrowRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAtThrowAccess().getCounterCounterParserRuleCall_3_0()); 
	    }
		lv_counter_3_0=ruleCounter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtThrowRule());
	        }
       		set(
       			$current, 
       			"counter",
        		lv_counter_3_0, 
        		"Counter");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleParameterTypes
entryRuleParameterTypes returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterTypesRule()); }
	 iv_ruleParameterTypes=ruleParameterTypes 
	 { $current=$iv_ruleParameterTypes.current; } 
	 EOF 
;

// Rule ParameterTypes
ruleParameterTypes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LPAREN_0=RULE_LPAREN
    { 
    newLeafNode(this_LPAREN_0, grammarAccess.getParameterTypesAccess().getLPARENTerminalRuleCall_0()); 
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getParameterTypesAccess().getParameterTypesAction_1(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterTypesAccess().getParamTypeNamesParamTypeNameParserRuleCall_2_0_0()); 
	    }
		lv_paramTypeNames_2_0=ruleParamTypeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterTypesRule());
	        }
       		add(
       			$current, 
       			"paramTypeNames",
        		lv_paramTypeNames_2_0, 
        		"ParamTypeName");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_3=RULE_COMMA
    { 
    newLeafNode(this_COMMA_3, grammarAccess.getParameterTypesAccess().getCOMMATerminalRuleCall_2_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterTypesAccess().getParamTypeNamesParamTypeNameParserRuleCall_2_1_1_0()); 
	    }
		lv_paramTypeNames_4_0=ruleParamTypeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterTypesRule());
	        }
       		add(
       			$current, 
       			"paramTypeNames",
        		lv_paramTypeNames_4_0, 
        		"ParamTypeName");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?this_RPAREN_5=RULE_RPAREN
    { 
    newLeafNode(this_RPAREN_5, grammarAccess.getParameterTypesAccess().getRPARENTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleParamTypeName
entryRuleParamTypeName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamTypeNameRule()); } 
	 iv_ruleParamTypeName=ruleParamTypeName 
	 { $current=$iv_ruleParamTypeName.current.getText(); }  
	 EOF 
;

// Rule ParamTypeName
ruleParamTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getParamTypeNameAccess().getQualifiedNameParserRuleCall()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleCounter
entryRuleCounter returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCounterRule()); } 
	 iv_ruleCounter=ruleCounter 
	 { $current=$iv_ruleCounter.current.getText(); }  
	 EOF 
;

// Rule Counter
ruleCounter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INTVAL_0=RULE_INTVAL    {
		$current.merge(this_INTVAL_0);
    }

    { 
    newLeafNode(this_INTVAL_0, grammarAccess.getCounterAccess().getINTVALTerminalRuleCall_0()); 
    }

    |
	kw='ALL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCounterAccess().getALLKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleBind
entryRuleBind returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBindRule()); }
	 iv_ruleBind=ruleBind 
	 { $current=$iv_ruleBind.current; } 
	 EOF 
;

// Rule Bind
ruleBind returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_KEYWORD_BIND_0=RULE_KEYWORD_BIND
    { 
    newLeafNode(this_KEYWORD_BIND_0, grammarAccess.getBindAccess().getKEYWORD_BINDTerminalRuleCall_0()); 
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getBindAccess().getBindAction_1(),
            $current);
    }
)(this_NOTHING_2=RULE_NOTHING
    { 
    newLeafNode(this_NOTHING_2, grammarAccess.getBindAccess().getNOTHINGTerminalRuleCall_2_0()); 
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBindAccess().getBindBindingsParserRuleCall_2_1_0()); 
	    }
		lv_bind_3_0=ruleBindings		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBindRule());
	        }
       		set(
       			$current, 
       			"bind",
        		lv_bind_3_0, 
        		"Bindings");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleBindings
entryRuleBindings returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBindingsRule()); }
	 iv_ruleBindings=ruleBindings 
	 { $current=$iv_ruleBindings.current; } 
	 EOF 
;

// Rule Bindings
ruleBindings returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBindingsAccess().getBindingsBindingParserRuleCall_0_0()); 
	    }
		lv_bindings_0_0=ruleBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBindingsRule());
	        }
       		add(
       			$current, 
       			"bindings",
        		lv_bindings_0_0, 
        		"Binding");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_SEMICOLON_1=RULE_SEMICOLON
    { 
    newLeafNode(this_SEMICOLON_1, grammarAccess.getBindingsAccess().getSEMICOLONTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBindingsAccess().getBindingsBindingParserRuleCall_1_1_0()); 
	    }
		lv_bindings_2_0=ruleBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBindingsRule());
	        }
       		add(
       			$current, 
       			"bindings",
        		lv_bindings_2_0, 
        		"Binding");
	        afterParserOrEnumRuleCall();
	    }

)
))*(this_SEMICOLON_3=RULE_SEMICOLON
    { 
    newLeafNode(this_SEMICOLON_3, grammarAccess.getBindingsAccess().getSEMICOLONTerminalRuleCall_2()); 
    }
)?)
;





// Entry rule entryRuleBinding
entryRuleBinding returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBindingRule()); }
	 iv_ruleBinding=ruleBinding 
	 { $current=$iv_ruleBinding.current; } 
	 EOF 
;

// Rule Binding
ruleBinding returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBindingAccess().getBindVariableBindVariableParserRuleCall_0_0()); 
	    }
		lv_bindVariable_0_0=ruleBindVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBindingRule());
	        }
       		set(
       			$current, 
       			"bindVariable",
        		lv_bindVariable_0_0, 
        		"BindVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COLON_1=RULE_COLON
    { 
    newLeafNode(this_COLON_1, grammarAccess.getBindingAccess().getCOLONTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBindingAccess().getTypenameTypeNameParserRuleCall_1_1_0()); 
	    }
		lv_typename_2_0=ruleTypeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBindingRule());
	        }
       		set(
       			$current, 
       			"typename",
        		lv_typename_2_0, 
        		"TypeName");
	        afterParserOrEnumRuleCall();
	    }

)
))?this_ASSIGN_3=RULE_ASSIGN
    { 
    newLeafNode(this_ASSIGN_3, grammarAccess.getBindingAccess().getASSIGNTerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBindingAccess().getValueExpressionParserRuleCall_3_0()); 
	    }
		lv_value_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBindingRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBindVariable
entryRuleBindVariable returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBindVariableRule()); } 
	 iv_ruleBindVariable=ruleBindVariable 
	 { $current=$iv_ruleBindVariable.current.getText(); }  
	 EOF 
;

// Rule BindVariable
ruleBindVariable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getBindVariableAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleTypeName
entryRuleTypeName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); } 
	 iv_ruleTypeName=ruleTypeName 
	 { $current=$iv_ruleTypeName.current.getText(); }  
	 EOF 
;

// Rule TypeName
ruleTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getTypeNameAccess().getQualifiedNameParserRuleCall()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_IF_0=RULE_IF
    { 
    newLeafNode(this_IF_0, grammarAccess.getConditionAccess().getIFTerminalRuleCall_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getConditionAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleActions
entryRuleActions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionsRule()); }
	 iv_ruleActions=ruleActions 
	 { $current=$iv_ruleActions.current; } 
	 EOF 
;

// Rule Actions
ruleActions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getActionsAccess().getActionsAction_0(),
            $current);
    }
)this_DO_1=RULE_DO
    { 
    newLeafNode(this_DO_1, grammarAccess.getActionsAccess().getDOTerminalRuleCall_1()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getActionsAccess().getActionListActionListParserRuleCall_2_0_0()); 
	    }
		lv_actionList_2_0=ruleActionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionsRule());
	        }
       		set(
       			$current, 
       			"actionList",
        		lv_actionList_2_0, 
        		"ActionList");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |this_NOTHING_3=RULE_NOTHING
    { 
    newLeafNode(this_NOTHING_3, grammarAccess.getActionsAccess().getNOTHINGTerminalRuleCall_2_1()); 
    }
))
;





// Entry rule entryRuleActionList
entryRuleActionList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionListRule()); }
	 iv_ruleActionList=ruleActionList 
	 { $current=$iv_ruleActionList.current; } 
	 EOF 
;

// Rule ActionList
ruleActionList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getActionListAccess().getActionsActionParserRuleCall_0_0()); 
	    }
		lv_actions_0_0=ruleAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionListRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_0_0, 
        		"Action");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_SEMICOLON_1=RULE_SEMICOLON
    { 
    newLeafNode(this_SEMICOLON_1, grammarAccess.getActionListAccess().getSEMICOLONTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionListAccess().getActionsActionParserRuleCall_1_1_0()); 
	    }
		lv_actions_2_0=ruleAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionListRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_2_0, 
        		"Action");
	        afterParserOrEnumRuleCall();
	    }

)
))*(this_SEMICOLON_3=RULE_SEMICOLON
    { 
    newLeafNode(this_SEMICOLON_3, grammarAccess.getActionListAccess().getSEMICOLONTerminalRuleCall_2()); 
    }
)?)
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getActionAccess().getExpressionParserRuleCall_0()); 
    }
    this_Expression_0=ruleExpression
    { 
        $current = $this_Expression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getReturnExprParserRuleCall_1()); 
    }
    this_ReturnExpr_1=ruleReturnExpr
    { 
        $current = $this_ReturnExpr_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionAccess().getThrowExprParserRuleCall_2()); 
    }
    this_ThrowExpr_2=ruleThrowExpr
    { 
        $current = $this_ThrowExpr_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentExprParserRuleCall()); 
    }
    this_AssignmentExpr_0=ruleAssignmentExpr
    { 
        $current = $this_AssignmentExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleReturnExpr
entryRuleReturnExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnExprRule()); }
	 iv_ruleReturnExpr=ruleReturnExpr 
	 { $current=$iv_ruleReturnExpr.current; } 
	 EOF 
;

// Rule ReturnExpr
ruleReturnExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_op_0_0=RULE_KEYWORD_RETURN
		{
			newLeafNode(lv_op_0_0, grammarAccess.getReturnExprAccess().getOpKEYWORD_RETURNTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReturnExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"KEYWORD_RETURN");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnExprAccess().getOperand1ExpressionParserRuleCall_1_0()); 
	    }
		lv_operand1_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnExprRule());
	        }
       		set(
       			$current, 
       			"operand1",
        		lv_operand1_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleThrowExpr
entryRuleThrowExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getThrowExprRule()); }
	 iv_ruleThrowExpr=ruleThrowExpr 
	 { $current=$iv_ruleThrowExpr.current; } 
	 EOF 
;

// Rule ThrowExpr
ruleThrowExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_op_0_0=RULE_KEYWORD_THROW
		{
			newLeafNode(lv_op_0_0, grammarAccess.getThrowExprAccess().getOpKEYWORD_THROWTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getThrowExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"KEYWORD_THROW");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getThrowExprAccess().getOperand1ExpressionParserRuleCall_1_0()); 
	    }
		lv_operand1_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThrowExprRule());
	        }
       		set(
       			$current, 
       			"operand1",
        		lv_operand1_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAssignmentExpr
entryRuleAssignmentExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentExprRule()); }
	 iv_ruleAssignmentExpr=ruleAssignmentExpr 
	 { $current=$iv_ruleAssignmentExpr.current; } 
	 EOF 
;

// Rule AssignmentExpr
ruleAssignmentExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAssignmentExprAccess().getOperatorExprParserRuleCall_0()); 
    }
    this_OperatorExpr_0=ruleOperatorExpr
    { 
        $current = $this_OperatorExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAssignmentExprAccess().getAssignmentExprOperand1Action_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=RULE_ASSIGN
		{
			newLeafNode(lv_op_2_0, grammarAccess.getAssignmentExprAccess().getOpASSIGNTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"ASSIGN");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentExprAccess().getOperand2OperatorExprParserRuleCall_1_2_0()); 
	    }
		lv_operand2_3_0=ruleOperatorExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentExprRule());
	        }
       		set(
       			$current, 
       			"operand2",
        		lv_operand2_3_0, 
        		"OperatorExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOperatorExpr
entryRuleOperatorExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorExprRule()); }
	 iv_ruleOperatorExpr=ruleOperatorExpr 
	 { $current=$iv_ruleOperatorExpr.current; } 
	 EOF 
;

// Rule OperatorExpr
ruleOperatorExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOperatorExprAccess().getPlusMinusOperandParserRuleCall_0()); 
    }
    this_PlusMinusOperand_0=rulePlusMinusOperand
    { 
        $current = $this_PlusMinusOperand_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOperatorExprAccess().getOperatorExprOperand1Action_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=RULE_PLUS
		{
			newLeafNode(lv_op_2_1, grammarAccess.getOperatorExprAccess().getOpPLUSTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_1, 
        		"PLUS");
	    }

    |		lv_op_2_2=RULE_MINUS
		{
			newLeafNode(lv_op_2_2, grammarAccess.getOperatorExprAccess().getOpMINUSTerminalRuleCall_1_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_2, 
        		"MINUS");
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOperatorExprAccess().getOperand2PlusMinusOperandParserRuleCall_1_2_0()); 
	    }
		lv_operand2_3_0=rulePlusMinusOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperatorExprRule());
	        }
       		set(
       			$current, 
       			"operand2",
        		lv_operand2_3_0, 
        		"PlusMinusOperand");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePlusMinusOperand
entryRulePlusMinusOperand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlusMinusOperandRule()); }
	 iv_rulePlusMinusOperand=rulePlusMinusOperand 
	 { $current=$iv_rulePlusMinusOperand.current; } 
	 EOF 
;

// Rule PlusMinusOperand
rulePlusMinusOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPlusMinusOperandAccess().getTimesDivOperandParserRuleCall_0()); 
    }
    this_TimesDivOperand_0=ruleTimesDivOperand
    { 
        $current = $this_TimesDivOperand_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPlusMinusOperandAccess().getPlusMinusOperandOperand1Action_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=RULE_TIMES
		{
			newLeafNode(lv_op_2_1, grammarAccess.getPlusMinusOperandAccess().getOpTIMESTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlusMinusOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_1, 
        		"TIMES");
	    }

    |		lv_op_2_2=RULE_DIV
		{
			newLeafNode(lv_op_2_2, grammarAccess.getPlusMinusOperandAccess().getOpDIVTerminalRuleCall_1_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlusMinusOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_2, 
        		"DIV");
	    }

    |		lv_op_2_3=RULE_MOD
		{
			newLeafNode(lv_op_2_3, grammarAccess.getPlusMinusOperandAccess().getOpMODTerminalRuleCall_1_1_0_2()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlusMinusOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_3, 
        		"MOD");
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPlusMinusOperandAccess().getOperand2TimesDivOperandParserRuleCall_1_2_0()); 
	    }
		lv_operand2_3_0=ruleTimesDivOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlusMinusOperandRule());
	        }
       		set(
       			$current, 
       			"operand2",
        		lv_operand2_3_0, 
        		"TimesDivOperand");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTimesDivOperand
entryRuleTimesDivOperand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimesDivOperandRule()); }
	 iv_ruleTimesDivOperand=ruleTimesDivOperand 
	 { $current=$iv_ruleTimesDivOperand.current; } 
	 EOF 
;

// Rule TimesDivOperand
ruleTimesDivOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getTimesDivOperandAccess().getBitwiseOperandParserRuleCall_0_0()); 
    }
    this_BitwiseOperand_0=ruleBitwiseOperand
    { 
        $current = $this_BitwiseOperand_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTimesDivOperandAccess().getTimesDivOperandOperand1Action_0_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=RULE_BAND
		{
			newLeafNode(lv_op_2_1, grammarAccess.getTimesDivOperandAccess().getOpBANDTerminalRuleCall_0_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimesDivOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_1, 
        		"BAND");
	    }

    |		lv_op_2_2=RULE_BOR
		{
			newLeafNode(lv_op_2_2, grammarAccess.getTimesDivOperandAccess().getOpBORTerminalRuleCall_0_1_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimesDivOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_2, 
        		"BOR");
	    }

    |		lv_op_2_3=RULE_BXOR
		{
			newLeafNode(lv_op_2_3, grammarAccess.getTimesDivOperandAccess().getOpBXORTerminalRuleCall_0_1_1_0_2()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimesDivOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_3, 
        		"BXOR");
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTimesDivOperandAccess().getOperand2BitwiseOperandParserRuleCall_0_1_2_0()); 
	    }
		lv_operand2_3_0=ruleBitwiseOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimesDivOperandRule());
	        }
       		set(
       			$current, 
       			"operand2",
        		lv_operand2_3_0, 
        		"BitwiseOperand");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |((
(
		lv_op_4_0=RULE_BNOT
		{
			newLeafNode(lv_op_4_0, grammarAccess.getTimesDivOperandAccess().getOpBNOTTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimesDivOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_4_0, 
        		"BNOT");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTimesDivOperandAccess().getOperand1BitwiseOperandParserRuleCall_1_1_0()); 
	    }
		lv_operand1_5_0=ruleBitwiseOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimesDivOperandRule());
	        }
       		set(
       			$current, 
       			"operand1",
        		lv_operand1_5_0, 
        		"BitwiseOperand");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleBitwiseOperand
entryRuleBitwiseOperand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitwiseOperandRule()); }
	 iv_ruleBitwiseOperand=ruleBitwiseOperand 
	 { $current=$iv_ruleBitwiseOperand.current; } 
	 EOF 
;

// Rule BitwiseOperand
ruleBitwiseOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getBitwiseOperandAccess().getLogicalOperandParserRuleCall_0_0()); 
    }
    this_LogicalOperand_0=ruleLogicalOperand
    { 
        $current = $this_LogicalOperand_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBitwiseOperandAccess().getNotOperandParserRuleCall_0_1()); 
    }
    this_NotOperand_1=ruleNotOperand
    { 
        $current = $this_NotOperand_1.current; 
        afterParserOrEnumRuleCall();
    }
)((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitwiseOperandAccess().getBitwiseOperandOperand1Action_1_0(),
            $current);
    }
)(
(
(
		lv_op_3_1=RULE_OR
		{
			newLeafNode(lv_op_3_1, grammarAccess.getBitwiseOperandAccess().getOpORTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitwiseOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_3_1, 
        		"OR");
	    }

    |		lv_op_3_2=RULE_AND
		{
			newLeafNode(lv_op_3_2, grammarAccess.getBitwiseOperandAccess().getOpANDTerminalRuleCall_1_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitwiseOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_3_2, 
        		"AND");
	    }

)

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseOperandAccess().getOperand2NotOperandParserRuleCall_1_2_0_0()); 
	    }
		lv_operand2_4_1=ruleNotOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseOperandRule());
	        }
       		set(
       			$current, 
       			"operand2",
        		lv_operand2_4_1, 
        		"NotOperand");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getBitwiseOperandAccess().getOperand2LogicalOperandParserRuleCall_1_2_0_1()); 
	    }
		lv_operand2_4_2=ruleLogicalOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseOperandRule());
	        }
       		set(
       			$current, 
       			"operand2",
        		lv_operand2_4_2, 
        		"LogicalOperand");
	        afterParserOrEnumRuleCall();
	    }

)

)
))*)
;





// Entry rule entryRuleNotOperand
entryRuleNotOperand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotOperandRule()); }
	 iv_ruleNotOperand=ruleNotOperand 
	 { $current=$iv_ruleNotOperand.current; } 
	 EOF 
;

// Rule NotOperand
ruleNotOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_op_0_0=RULE_NOT
		{
			newLeafNode(lv_op_0_0, grammarAccess.getNotOperandAccess().getOpNOTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNotOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"NOT");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNotOperandAccess().getOperand1LogicalOperandParserRuleCall_1_0()); 
	    }
		lv_operand1_1_0=ruleLogicalOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotOperandRule());
	        }
       		set(
       			$current, 
       			"operand1",
        		lv_operand1_1_0, 
        		"LogicalOperand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLogicalOperand
entryRuleLogicalOperand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalOperandRule()); }
	 iv_ruleLogicalOperand=ruleLogicalOperand 
	 { $current=$iv_ruleLogicalOperand.current; } 
	 EOF 
;

// Rule LogicalOperand
ruleLogicalOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalOperandAccess().getComparisonOperandParserRuleCall_0()); 
    }
    this_ComparisonOperand_0=ruleComparisonOperand
    { 
        $current = $this_ComparisonOperand_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalOperandAccess().getLogicalOperandOperand1Action_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=RULE_EQ
		{
			newLeafNode(lv_op_2_1, grammarAccess.getLogicalOperandAccess().getOpEQTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogicalOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_1, 
        		"EQ");
	    }

    |		lv_op_2_2=RULE_GT
		{
			newLeafNode(lv_op_2_2, grammarAccess.getLogicalOperandAccess().getOpGTTerminalRuleCall_1_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogicalOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_2, 
        		"GT");
	    }

    |		lv_op_2_3=RULE_GE
		{
			newLeafNode(lv_op_2_3, grammarAccess.getLogicalOperandAccess().getOpGETerminalRuleCall_1_1_0_2()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogicalOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_3, 
        		"GE");
	    }

    |		lv_op_2_4=RULE_LE
		{
			newLeafNode(lv_op_2_4, grammarAccess.getLogicalOperandAccess().getOpLETerminalRuleCall_1_1_0_3()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogicalOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_4, 
        		"LE");
	    }

    |		lv_op_2_5=RULE_LT
		{
			newLeafNode(lv_op_2_5, grammarAccess.getLogicalOperandAccess().getOpLTTerminalRuleCall_1_1_0_4()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogicalOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_5, 
        		"LT");
	    }

    |		lv_op_2_6=RULE_NE
		{
			newLeafNode(lv_op_2_6, grammarAccess.getLogicalOperandAccess().getOpNETerminalRuleCall_1_1_0_5()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogicalOperandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_6, 
        		"NE");
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOperandAccess().getOperand2ComparisonOperandParserRuleCall_1_2_0()); 
	    }
		lv_operand2_3_0=ruleComparisonOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOperandRule());
	        }
       		set(
       			$current, 
       			"operand2",
        		lv_operand2_3_0, 
        		"ComparisonOperand");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleComparisonOperand
entryRuleComparisonOperand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonOperandRule()); }
	 iv_ruleComparisonOperand=ruleComparisonOperand 
	 { $current=$iv_ruleComparisonOperand.current; } 
	 EOF 
;

// Rule ComparisonOperand
ruleComparisonOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getComparisonOperandAccess().getAccessExprParserRuleCall()); 
    }
    this_AccessExpr_0=ruleAccessExpr
    { 
        $current = $this_AccessExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAccessExpr
entryRuleAccessExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAccessExprRule()); }
	 iv_ruleAccessExpr=ruleAccessExpr 
	 { $current=$iv_ruleAccessExpr.current; } 
	 EOF 
;

// Rule AccessExpr
ruleAccessExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAccessExprAccess().getAccessBaseExprParserRuleCall_0()); 
    }
    this_AccessBaseExpr_0=ruleAccessBaseExpr
    { 
        $current = $this_AccessBaseExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=RULE_LSQUARE
		{
			newLeafNode(lv_op_2_0, grammarAccess.getAccessExprAccess().getOpLSQUARETerminalRuleCall_1_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAccessExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"LSQUARE");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAccessExprAccess().getOperand2ExpressionParserRuleCall_1_0_2_0()); 
	    }
		lv_operand2_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAccessExprRule());
	        }
       		set(
       			$current, 
       			"operand2",
        		lv_operand2_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RSQUARE_4=RULE_RSQUARE
    { 
    newLeafNode(this_RSQUARE_4, grammarAccess.getAccessExprAccess().getRSQUARETerminalRuleCall_1_0_3()); 
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_1_0(),
            $current);
    }
)(
(
		lv_op_6_0=RULE_DOT
		{
			newLeafNode(lv_op_6_0, grammarAccess.getAccessExprAccess().getOpDOTTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAccessExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_6_0, 
        		"DOT");
	    }

)
)(
(
		lv_value_7_0=RULE_ID
		{
			newLeafNode(lv_value_7_0, grammarAccess.getAccessExprAccess().getValueIDTerminalRuleCall_1_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAccessExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_7_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAccessExprAccess().getArgsCallArgumentsParserRuleCall_1_1_3_0()); 
	    }
		lv_args_8_0=ruleCallArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAccessExprRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_8_0, 
        		"CallArguments");
	        afterParserOrEnumRuleCall();
	    }

)
)?))*)
;





// Entry rule entryRuleAccessBaseExpr
entryRuleAccessBaseExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAccessBaseExprRule()); }
	 iv_ruleAccessBaseExpr=ruleAccessBaseExpr 
	 { $current=$iv_ruleAccessBaseExpr.current; } 
	 EOF 
;

// Rule AccessBaseExpr
ruleAccessBaseExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAccessBaseExprAccess().getBuiltinExprParserRuleCall_0()); 
    }
    this_BuiltinExpr_0=ruleBuiltinExpr
    { 
        $current = $this_BuiltinExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAccessBaseExprAccess().getSimpleExprParserRuleCall_1()); 
    }
    this_SimpleExpr_1=ruleSimpleExpr
    { 
        $current = $this_SimpleExpr_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBuiltinExpr
entryRuleBuiltinExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltinExprRule()); }
	 iv_ruleBuiltinExpr=ruleBuiltinExpr 
	 { $current=$iv_ruleBuiltinExpr.current; } 
	 EOF 
;

// Rule BuiltinExpr
ruleBuiltinExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBuiltinExprAccess().getBuiltinExprAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_ID
		{
			newLeafNode(lv_value_1_0, grammarAccess.getBuiltinExprAccess().getValueIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBuiltinExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBuiltinExprAccess().getArgsCallArgumentsParserRuleCall_2_0()); 
	    }
		lv_args_2_0=ruleCallArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBuiltinExprRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"CallArguments");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSimpleExpr
entryRuleSimpleExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleExprRule()); }
	 iv_ruleSimpleExpr=ruleSimpleExpr 
	 { $current=$iv_ruleSimpleExpr.current; } 
	 EOF 
;

// Rule SimpleExpr
ruleSimpleExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSimpleExprAccess().getVariableExprParserRuleCall_0()); 
    }
    this_VariableExpr_0=ruleVariableExpr
    { 
        $current = $this_VariableExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleExprAccess().getConstantExprParserRuleCall_1()); 
    }
    this_ConstantExpr_1=ruleConstantExpr
    { 
        $current = $this_ConstantExpr_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleExprAccess().getBracketedExprParserRuleCall_2()); 
    }
    this_BracketedExpr_2=ruleBracketedExpr
    { 
        $current = $this_BracketedExpr_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleExprAccess().getNewExprParserRuleCall_3()); 
    }
    this_NewExpr_3=ruleNewExpr
    { 
        $current = $this_NewExpr_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNewExpr
entryRuleNewExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNewExprRule()); }
	 iv_ruleNewExpr=ruleNewExpr 
	 { $current=$iv_ruleNewExpr.current; } 
	 EOF 
;

// Rule NewExpr
ruleNewExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNewExprAccess().getNewExprAction_0(),
            $current);
    }
)(
(
		lv_op_1_0=RULE_NEW
		{
			newLeafNode(lv_op_1_0, grammarAccess.getNewExprAccess().getOpNEWTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNewExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"NEW");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNewExprAccess().getValueQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNewExprRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNewExprAccess().getParamsCallArgumentsParserRuleCall_3_0()); 
	    }
		lv_params_3_0=ruleCallArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNewExprRule());
	        }
       		set(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"CallArguments");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariableExpr
entryRuleVariableExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableExprRule()); }
	 iv_ruleVariableExpr=ruleVariableExpr 
	 { $current=$iv_ruleVariableExpr.current; } 
	 EOF 
;

// Rule VariableExpr
ruleVariableExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVariableExprAccess().getSimpleNameParserRuleCall_0()); 
    }
    this_SimpleName_0=ruleSimpleName
    { 
        $current = $this_SimpleName_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVariableExprAccess().getIndexedSpecialVarParserRuleCall_1()); 
    }
    this_IndexedSpecialVar_1=ruleIndexedSpecialVar
    { 
        $current = $this_IndexedSpecialVar_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVariableExprAccess().getSpecialVarParserRuleCall_2()); 
    }
    this_SpecialVar_2=ruleSpecialVar
    { 
        $current = $this_SpecialVar_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCallArguments
entryRuleCallArguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallArgumentsRule()); }
	 iv_ruleCallArguments=ruleCallArguments 
	 { $current=$iv_ruleCallArguments.current; } 
	 EOF 
;

// Rule CallArguments
ruleCallArguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LPAREN_0=RULE_LPAREN
    { 
    newLeafNode(this_LPAREN_0, grammarAccess.getCallArgumentsAccess().getLPARENTerminalRuleCall_0()); 
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getCallArgumentsAccess().getCallArgumentsAction_1(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getCallArgumentsAccess().getArgsExpressionParserRuleCall_2_0_0()); 
	    }
		lv_args_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallArgumentsRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_3=RULE_COMMA
    { 
    newLeafNode(this_COMMA_3, grammarAccess.getCallArgumentsAccess().getCOMMATerminalRuleCall_2_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCallArgumentsAccess().getArgsExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_args_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCallArgumentsRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?this_RPAREN_5=RULE_RPAREN
    { 
    newLeafNode(this_RPAREN_5, grammarAccess.getCallArgumentsAccess().getRPARENTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(    this_DOT_1=RULE_DOT    {
		$current.merge(this_DOT_1);
    }

    { 
    newLeafNode(this_DOT_1, grammarAccess.getQualifiedNameAccess().getDOTTerminalRuleCall_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleSimpleName
entryRuleSimpleName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleNameRule()); }
	 iv_ruleSimpleName=ruleSimpleName 
	 { $current=$iv_ruleSimpleName.current; } 
	 EOF 
;

// Rule SimpleName
ruleSimpleName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_ID
		{
			newLeafNode(lv_value_0_0, grammarAccess.getSimpleNameAccess().getValueIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleIndexedSpecialVar
entryRuleIndexedSpecialVar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndexedSpecialVarRule()); }
	 iv_ruleIndexedSpecialVar=ruleIndexedSpecialVar 
	 { $current=$iv_ruleIndexedSpecialVar.current; } 
	 EOF 
;

// Rule IndexedSpecialVar
ruleIndexedSpecialVar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_op_0_0=RULE_DOLLAR
		{
			newLeafNode(lv_op_0_0, grammarAccess.getIndexedSpecialVarAccess().getOpDOLLARTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIndexedSpecialVarRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"DOLLAR");
	    }

)
)(
(
		lv_value_1_0=RULE_INTVAL
		{
			newLeafNode(lv_value_1_0, grammarAccess.getIndexedSpecialVarAccess().getValueINTVALTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIndexedSpecialVarRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INTVAL");
	    }

)
))
;





// Entry rule entryRuleSpecialVar
entryRuleSpecialVar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpecialVarRule()); }
	 iv_ruleSpecialVar=ruleSpecialVar 
	 { $current=$iv_ruleSpecialVar.current; } 
	 EOF 
;

// Rule SpecialVar
ruleSpecialVar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_op_0_0=	'$#' 
    {
        newLeafNode(lv_op_0_0, grammarAccess.getSpecialVarAccess().getOpDollarSignNumberSignKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecialVarRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_0, "\$#");
	    }

)
)
    |(
(
		lv_op_1_0=	'$!' 
    {
        newLeafNode(lv_op_1_0, grammarAccess.getSpecialVarAccess().getOpDollarSignExclamationMarkKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecialVarRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_0, "\$!");
	    }

)
)
    |(
(
		lv_op_2_0=	'$^' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getSpecialVarAccess().getOpDollarSignCircumflexAccentKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecialVarRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "\$^");
	    }

)
)
    |(
(
		lv_op_3_0=	'$@' 
    {
        newLeafNode(lv_op_3_0, grammarAccess.getSpecialVarAccess().getOpDollarSignCommercialAtKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecialVarRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_3_0, "\$@");
	    }

)
)
    |(
(
		lv_op_4_0=	'$*' 
    {
        newLeafNode(lv_op_4_0, grammarAccess.getSpecialVarAccess().getOpDollarSignAsteriskKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecialVarRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_4_0, "\$*");
	    }

)
)
    |((
(
		lv_op_5_0=RULE_DOLLAR
		{
			newLeafNode(lv_op_5_0, grammarAccess.getSpecialVarAccess().getOpDOLLARTerminalRuleCall_5_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecialVarRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_5_0, 
        		"DOLLAR");
	    }

)
)(
(
		lv_value_6_0=RULE_ID
		{
			newLeafNode(lv_value_6_0, grammarAccess.getSpecialVarAccess().getValueIDTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpecialVarRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_6_0, 
        		"ID");
	    }

)
)))
;





// Entry rule entryRuleBracketedExpr
entryRuleBracketedExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBracketedExprRule()); }
	 iv_ruleBracketedExpr=ruleBracketedExpr 
	 { $current=$iv_ruleBracketedExpr.current; } 
	 EOF 
;

// Rule BracketedExpr
ruleBracketedExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LPAREN_0=RULE_LPAREN
    { 
    newLeafNode(this_LPAREN_0, grammarAccess.getBracketedExprAccess().getLPARENTerminalRuleCall_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getBracketedExprAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
this_RPAREN_2=RULE_RPAREN
    { 
    newLeafNode(this_RPAREN_2, grammarAccess.getBracketedExprAccess().getRPARENTerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRuleConstantExpr
entryRuleConstantExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantExprRule()); }
	 iv_ruleConstantExpr=ruleConstantExpr 
	 { $current=$iv_ruleConstantExpr.current; } 
	 EOF 
;

// Rule ConstantExpr
ruleConstantExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstantExprAccess().getIntConstantExprParserRuleCall_0()); 
    }
    this_IntConstantExpr_0=ruleIntConstantExpr
    { 
        $current = $this_IntConstantExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstantExprAccess().getStringConstantExprParserRuleCall_1()); 
    }
    this_StringConstantExpr_1=ruleStringConstantExpr
    { 
        $current = $this_StringConstantExpr_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstantExprAccess().getBooleanConstantExprParserRuleCall_2()); 
    }
    this_BooleanConstantExpr_2=ruleBooleanConstantExpr
    { 
        $current = $this_BooleanConstantExpr_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstantExprAccess().getFloatConstantExprParserRuleCall_3()); 
    }
    this_FloatConstantExpr_3=ruleFloatConstantExpr
    { 
        $current = $this_FloatConstantExpr_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIntConstantExpr
entryRuleIntConstantExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntConstantExprRule()); }
	 iv_ruleIntConstantExpr=ruleIntConstantExpr 
	 { $current=$iv_ruleIntConstantExpr.current; } 
	 EOF 
;

// Rule IntConstantExpr
ruleIntConstantExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_INTVAL
		{
			newLeafNode(lv_value_1_0, grammarAccess.getIntConstantExprAccess().getValueINTVALTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntConstantExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INTVAL");
	    }

)
))
;





// Entry rule entryRuleStringConstantExpr
entryRuleStringConstantExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringConstantExprRule()); }
	 iv_ruleStringConstantExpr=ruleStringConstantExpr 
	 { $current=$iv_ruleStringConstantExpr.current; } 
	 EOF 
;

// Rule StringConstantExpr
ruleStringConstantExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getStringConstantExprAccess().getValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringConstantExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleBooleanConstantExpr
entryRuleBooleanConstantExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanConstantExprRule()); }
	 iv_ruleBooleanConstantExpr=ruleBooleanConstantExpr 
	 { $current=$iv_ruleBooleanConstantExpr.current; } 
	 EOF 
;

// Rule BooleanConstantExpr
ruleBooleanConstantExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_1_0, grammarAccess.getBooleanConstantExprAccess().getValueBOOLEANTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanConstantExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"BOOLEAN");
	    }

)
))
;





// Entry rule entryRuleFloatConstantExpr
entryRuleFloatConstantExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatConstantExprRule()); }
	 iv_ruleFloatConstantExpr=ruleFloatConstantExpr 
	 { $current=$iv_ruleFloatConstantExpr.current; } 
	 EOF 
;

// Rule FloatConstantExpr
ruleFloatConstantExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_FLOATVAL
		{
			newLeafNode(lv_value_1_0, grammarAccess.getFloatConstantExprAccess().getValueFLOATVALTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFloatConstantExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"FLOATVAL");
	    }

)
))
;





RULE_QMARK : '?';

RULE_COMMA : ',';

RULE_DOT : '.';

RULE_COLON : ':';

RULE_NULL : 'null';

RULE_NEW : ('new'|'NEW');

RULE_SEMICOLON : ';';

RULE_BOOLEAN : ('TRUE'|'true'|'FALSE'|'false');

RULE_INIT : '<init>';

RULE_CLINIT : '<clinit>';

RULE_LPAREN : '(';

RULE_RPAREN : ')';

RULE_LSQUARE : '[';

RULE_RSQUARE : ']';

RULE_DOLLAR : '$';

RULE_PLUS : '+';

RULE_MINUS : '-';

RULE_MOD : '%';

RULE_DIV : '/';

RULE_TIMES : '*';

RULE_BAND : '&';

RULE_BOR : '|';

RULE_BNOT : '~';

RULE_BXOR : '^';

RULE_LT : '<';

RULE_LE : '<=';

RULE_GT : '>';

RULE_GE : '>=';

RULE_EQ : '==';

RULE_NE : '!=';

RULE_ASSIGN : '=';

RULE_FLOATVAL : (('0'..'9')+ '.' ('0'..'9')* RULE_EXPONENT? RULE_FLOATTYPESUFFIX?|'.' ('0'..'9')+ RULE_EXPONENT? RULE_FLOATTYPESUFFIX?|('0'..'9')+ RULE_EXPONENT RULE_FLOATTYPESUFFIX?|('0'..'9')+ RULE_FLOATTYPESUFFIX);

RULE_INTVAL : (('0'..'9')+ RULE_INTTYPESUFFIX?|'0x' ('0'..'9'|'A'..'F'|'a'..'f')+ RULE_INTTYPESUFFIX?|'0b' ('0'..'1')+ RULE_INTTYPESUFFIX?);

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

fragment RULE_FLOATTYPESUFFIX : ('f'|'F'|'d'|'D');

fragment RULE_INTTYPESUFFIX : ('L'|'l');

RULE_OR : ('OR'|'or'|'||');

RULE_AND : ('AND'|'and'|'&&');

RULE_NOT : ('NOT'|'not'|'!');

RULE_KEYWORD_CLASS : ('CLASS'|'class');

RULE_KEYWORD_METHOD : ('METHOD'|'method');

RULE_KEYWORD_INTERFACE : ('INTERFACE'|'interface');

RULE_IF : ('IF'|'if');

RULE_KEYWORD_BIND : ('BIND'|'bind');

RULE_NOTHING : ('NOTHING'|'nothing');

RULE_KEYWORD_THROW : ('THROW'|'throw');

RULE_KEYWORD_RETURN : ('RETURN'|'return');

RULE_DO : ('DO'|'do');

RULE_START_RULE : ('RULE' RULE_WS ( options {greedy=false;} : . )*RULE_EOL|'rule' RULE_WS ( options {greedy=false;} : . )*RULE_EOL);

RULE_END_RULE : ('ENDRULE'|'endrule');

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'$'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_BM_COMMENT : RULE_HASH ( options {greedy=false;} : . )*RULE_EOL;

RULE_HASH : '#';

RULE_EOL : ('\n'|'\r');

RULE_WS : (' '|'\t');


