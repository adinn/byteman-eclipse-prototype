/*
* generated by Xtext
*/
grammar InternalByteman;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.jboss.byteman.eclipse.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.jboss.byteman.eclipse.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.jboss.byteman.eclipse.services.BytemanGrammarAccess;

}

@parser::members {
 
 	private BytemanGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(BytemanGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDomainModel
entryRuleDomainModel 
:
{ before(grammarAccess.getDomainModelRule()); }
	 ruleDomainModel
{ after(grammarAccess.getDomainModelRule()); } 
	 EOF 
;

// Rule DomainModel
ruleDomainModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDomainModelAccess().getGroup()); }
(rule__DomainModel__Group__0)
{ after(grammarAccess.getDomainModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElement
entryRuleElement 
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementAccess().getAlternatives()); }
(rule__Element__Alternatives)
{ after(grammarAccess.getElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBytemanRule
entryRuleBytemanRule 
:
{ before(grammarAccess.getBytemanRuleRule()); }
	 ruleBytemanRule
{ after(grammarAccess.getBytemanRuleRule()); } 
	 EOF 
;

// Rule BytemanRule
ruleBytemanRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBytemanRuleAccess().getGroup()); }
(rule__BytemanRule__Group__0)
{ after(grammarAccess.getBytemanRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBody
entryRuleBody 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_BM_COMMENT", "RULE_EOL");
}
:
{ before(grammarAccess.getBodyRule()); }
	 ruleBody
{ after(grammarAccess.getBodyRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Body
ruleBody
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_BM_COMMENT", "RULE_EOL");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBodyAccess().getGroup()); }
(rule__Body__Group__0)
{ after(grammarAccess.getBodyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleEvent
entryRuleEvent 
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventAccess().getGroup()); }
(rule__Event__Group__0)
{ after(grammarAccess.getEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventClass
entryRuleEventClass 
:
{ before(grammarAccess.getEventClassRule()); }
	 ruleEventClass
{ after(grammarAccess.getEventClassRule()); } 
	 EOF 
;

// Rule EventClass
ruleEventClass
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventClassAccess().getGroup()); }
(rule__EventClass__Group__0)
{ after(grammarAccess.getEventClassAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventInterface
entryRuleEventInterface 
:
{ before(grammarAccess.getEventInterfaceRule()); }
	 ruleEventInterface
{ after(grammarAccess.getEventInterfaceRule()); } 
	 EOF 
;

// Rule EventInterface
ruleEventInterface
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventInterfaceAccess().getGroup()); }
(rule__EventInterface__Group__0)
{ after(grammarAccess.getEventInterfaceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventMethod
entryRuleEventMethod 
:
{ before(grammarAccess.getEventMethodRule()); }
	 ruleEventMethod
{ after(grammarAccess.getEventMethodRule()); } 
	 EOF 
;

// Rule EventMethod
ruleEventMethod
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventMethodAccess().getGroup()); }
(rule__EventMethod__Group__0)
{ after(grammarAccess.getEventMethodAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMethodName
entryRuleMethodName 
:
{ before(grammarAccess.getMethodNameRule()); }
	 ruleMethodName
{ after(grammarAccess.getMethodNameRule()); } 
	 EOF 
;

// Rule MethodName
ruleMethodName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodNameAccess().getAlternatives()); }
(rule__MethodName__Alternatives)
{ after(grammarAccess.getMethodNameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHelper
entryRuleHelper 
:
{ before(grammarAccess.getHelperRule()); }
	 ruleHelper
{ after(grammarAccess.getHelperRule()); } 
	 EOF 
;

// Rule Helper
ruleHelper
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHelperAccess().getGroup()); }
(rule__Helper__Group__0)
{ after(grammarAccess.getHelperAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLocationSpecifier
entryRuleLocationSpecifier 
:
{ before(grammarAccess.getLocationSpecifierRule()); }
	 ruleLocationSpecifier
{ after(grammarAccess.getLocationSpecifierRule()); } 
	 EOF 
;

// Rule LocationSpecifier
ruleLocationSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocationSpecifierAccess().getAlternatives()); }
(rule__LocationSpecifier__Alternatives)
{ after(grammarAccess.getLocationSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtLocation
entryRuleAtLocation 
:
{ before(grammarAccess.getAtLocationRule()); }
	 ruleAtLocation
{ after(grammarAccess.getAtLocationRule()); } 
	 EOF 
;

// Rule AtLocation
ruleAtLocation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtLocationAccess().getAlternatives()); }
(rule__AtLocation__Alternatives)
{ after(grammarAccess.getAtLocationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAfterLocation
entryRuleAfterLocation 
:
{ before(grammarAccess.getAfterLocationRule()); }
	 ruleAfterLocation
{ after(grammarAccess.getAfterLocationRule()); } 
	 EOF 
;

// Rule AfterLocation
ruleAfterLocation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAfterLocationAccess().getAlternatives()); }
(rule__AfterLocation__Alternatives)
{ after(grammarAccess.getAfterLocationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtEntry
entryRuleAtEntry 
:
{ before(grammarAccess.getAtEntryRule()); }
	 ruleAtEntry
{ after(grammarAccess.getAtEntryRule()); } 
	 EOF 
;

// Rule AtEntry
ruleAtEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtEntryAccess().getGroup()); }
(rule__AtEntry__Group__0)
{ after(grammarAccess.getAtEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtExit
entryRuleAtExit 
:
{ before(grammarAccess.getAtExitRule()); }
	 ruleAtExit
{ after(grammarAccess.getAtExitRule()); } 
	 EOF 
;

// Rule AtExit
ruleAtExit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtExitAccess().getGroup()); }
(rule__AtExit__Group__0)
{ after(grammarAccess.getAtExitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtLine
entryRuleAtLine 
:
{ before(grammarAccess.getAtLineRule()); }
	 ruleAtLine
{ after(grammarAccess.getAtLineRule()); } 
	 EOF 
;

// Rule AtLine
ruleAtLine
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtLineAccess().getGroup()); }
(rule__AtLine__Group__0)
{ after(grammarAccess.getAtLineAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtRead
entryRuleAtRead 
:
{ before(grammarAccess.getAtReadRule()); }
	 ruleAtRead
{ after(grammarAccess.getAtReadRule()); } 
	 EOF 
;

// Rule AtRead
ruleAtRead
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtReadAccess().getAlternatives()); }
(rule__AtRead__Alternatives)
{ after(grammarAccess.getAtReadAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtReadField
entryRuleAtReadField 
:
{ before(grammarAccess.getAtReadFieldRule()); }
	 ruleAtReadField
{ after(grammarAccess.getAtReadFieldRule()); } 
	 EOF 
;

// Rule AtReadField
ruleAtReadField
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtReadFieldAccess().getGroup()); }
(rule__AtReadField__Group__0)
{ after(grammarAccess.getAtReadFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtReadLocal
entryRuleAtReadLocal 
:
{ before(grammarAccess.getAtReadLocalRule()); }
	 ruleAtReadLocal
{ after(grammarAccess.getAtReadLocalRule()); } 
	 EOF 
;

// Rule AtReadLocal
ruleAtReadLocal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtReadLocalAccess().getGroup()); }
(rule__AtReadLocal__Group__0)
{ after(grammarAccess.getAtReadLocalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAfterRead
entryRuleAfterRead 
:
{ before(grammarAccess.getAfterReadRule()); }
	 ruleAfterRead
{ after(grammarAccess.getAfterReadRule()); } 
	 EOF 
;

// Rule AfterRead
ruleAfterRead
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAfterReadAccess().getAlternatives()); }
(rule__AfterRead__Alternatives)
{ after(grammarAccess.getAfterReadAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAfterReadField
entryRuleAfterReadField 
:
{ before(grammarAccess.getAfterReadFieldRule()); }
	 ruleAfterReadField
{ after(grammarAccess.getAfterReadFieldRule()); } 
	 EOF 
;

// Rule AfterReadField
ruleAfterReadField
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAfterReadFieldAccess().getGroup()); }
(rule__AfterReadField__Group__0)
{ after(grammarAccess.getAfterReadFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAfterReadLocal
entryRuleAfterReadLocal 
:
{ before(grammarAccess.getAfterReadLocalRule()); }
	 ruleAfterReadLocal
{ after(grammarAccess.getAfterReadLocalRule()); } 
	 EOF 
;

// Rule AfterReadLocal
ruleAfterReadLocal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAfterReadLocalAccess().getGroup()); }
(rule__AfterReadLocal__Group__0)
{ after(grammarAccess.getAfterReadLocalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtWrite
entryRuleAtWrite 
:
{ before(grammarAccess.getAtWriteRule()); }
	 ruleAtWrite
{ after(grammarAccess.getAtWriteRule()); } 
	 EOF 
;

// Rule AtWrite
ruleAtWrite
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtWriteAccess().getAlternatives()); }
(rule__AtWrite__Alternatives)
{ after(grammarAccess.getAtWriteAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtWriteField
entryRuleAtWriteField 
:
{ before(grammarAccess.getAtWriteFieldRule()); }
	 ruleAtWriteField
{ after(grammarAccess.getAtWriteFieldRule()); } 
	 EOF 
;

// Rule AtWriteField
ruleAtWriteField
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtWriteFieldAccess().getGroup()); }
(rule__AtWriteField__Group__0)
{ after(grammarAccess.getAtWriteFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtWriteLocal
entryRuleAtWriteLocal 
:
{ before(grammarAccess.getAtWriteLocalRule()); }
	 ruleAtWriteLocal
{ after(grammarAccess.getAtWriteLocalRule()); } 
	 EOF 
;

// Rule AtWriteLocal
ruleAtWriteLocal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtWriteLocalAccess().getGroup()); }
(rule__AtWriteLocal__Group__0)
{ after(grammarAccess.getAtWriteLocalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAfterWrite
entryRuleAfterWrite 
:
{ before(grammarAccess.getAfterWriteRule()); }
	 ruleAfterWrite
{ after(grammarAccess.getAfterWriteRule()); } 
	 EOF 
;

// Rule AfterWrite
ruleAfterWrite
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAfterWriteAccess().getAlternatives()); }
(rule__AfterWrite__Alternatives)
{ after(grammarAccess.getAfterWriteAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAfterWriteField
entryRuleAfterWriteField 
:
{ before(grammarAccess.getAfterWriteFieldRule()); }
	 ruleAfterWriteField
{ after(grammarAccess.getAfterWriteFieldRule()); } 
	 EOF 
;

// Rule AfterWriteField
ruleAfterWriteField
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAfterWriteFieldAccess().getGroup()); }
(rule__AfterWriteField__Group__0)
{ after(grammarAccess.getAfterWriteFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAfterWriteLocal
entryRuleAfterWriteLocal 
:
{ before(grammarAccess.getAfterWriteLocalRule()); }
	 ruleAfterWriteLocal
{ after(grammarAccess.getAfterWriteLocalRule()); } 
	 EOF 
;

// Rule AfterWriteLocal
ruleAfterWriteLocal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAfterWriteLocalAccess().getGroup()); }
(rule__AfterWriteLocal__Group__0)
{ after(grammarAccess.getAfterWriteLocalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtInvoke
entryRuleAtInvoke 
:
{ before(grammarAccess.getAtInvokeRule()); }
	 ruleAtInvoke
{ after(grammarAccess.getAtInvokeRule()); } 
	 EOF 
;

// Rule AtInvoke
ruleAtInvoke
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtInvokeAccess().getGroup()); }
(rule__AtInvoke__Group__0)
{ after(grammarAccess.getAtInvokeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAfterInvoke
entryRuleAfterInvoke 
:
{ before(grammarAccess.getAfterInvokeRule()); }
	 ruleAfterInvoke
{ after(grammarAccess.getAfterInvokeRule()); } 
	 EOF 
;

// Rule AfterInvoke
ruleAfterInvoke
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAfterInvokeAccess().getGroup()); }
(rule__AfterInvoke__Group__0)
{ after(grammarAccess.getAfterInvokeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtSynchronize
entryRuleAtSynchronize 
:
{ before(grammarAccess.getAtSynchronizeRule()); }
	 ruleAtSynchronize
{ after(grammarAccess.getAtSynchronizeRule()); } 
	 EOF 
;

// Rule AtSynchronize
ruleAtSynchronize
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtSynchronizeAccess().getGroup()); }
(rule__AtSynchronize__Group__0)
{ after(grammarAccess.getAtSynchronizeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAfterSynchronize
entryRuleAfterSynchronize 
:
{ before(grammarAccess.getAfterSynchronizeRule()); }
	 ruleAfterSynchronize
{ after(grammarAccess.getAfterSynchronizeRule()); } 
	 EOF 
;

// Rule AfterSynchronize
ruleAfterSynchronize
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAfterSynchronizeAccess().getGroup()); }
(rule__AfterSynchronize__Group__0)
{ after(grammarAccess.getAfterSynchronizeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtThrow
entryRuleAtThrow 
:
{ before(grammarAccess.getAtThrowRule()); }
	 ruleAtThrow
{ after(grammarAccess.getAtThrowRule()); } 
	 EOF 
;

// Rule AtThrow
ruleAtThrow
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtThrowAccess().getGroup()); }
(rule__AtThrow__Group__0)
{ after(grammarAccess.getAtThrowAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterTypes
entryRuleParameterTypes 
:
{ before(grammarAccess.getParameterTypesRule()); }
	 ruleParameterTypes
{ after(grammarAccess.getParameterTypesRule()); } 
	 EOF 
;

// Rule ParameterTypes
ruleParameterTypes
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterTypesAccess().getGroup()); }
(rule__ParameterTypes__Group__0)
{ after(grammarAccess.getParameterTypesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParamTypeName
entryRuleParamTypeName 
:
{ before(grammarAccess.getParamTypeNameRule()); }
	 ruleParamTypeName
{ after(grammarAccess.getParamTypeNameRule()); } 
	 EOF 
;

// Rule ParamTypeName
ruleParamTypeName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParamTypeNameAccess().getQualifiedNameParserRuleCall()); }
	ruleQualifiedName
{ after(grammarAccess.getParamTypeNameAccess().getQualifiedNameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCounter
entryRuleCounter 
:
{ before(grammarAccess.getCounterRule()); }
	 ruleCounter
{ after(grammarAccess.getCounterRule()); } 
	 EOF 
;

// Rule Counter
ruleCounter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCounterAccess().getAlternatives()); }
(rule__Counter__Alternatives)
{ after(grammarAccess.getCounterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBind
entryRuleBind 
:
{ before(grammarAccess.getBindRule()); }
	 ruleBind
{ after(grammarAccess.getBindRule()); } 
	 EOF 
;

// Rule Bind
ruleBind
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBindAccess().getGroup()); }
(rule__Bind__Group__0)
{ after(grammarAccess.getBindAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBindings
entryRuleBindings 
:
{ before(grammarAccess.getBindingsRule()); }
	 ruleBindings
{ after(grammarAccess.getBindingsRule()); } 
	 EOF 
;

// Rule Bindings
ruleBindings
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBindingsAccess().getGroup()); }
(rule__Bindings__Group__0)
{ after(grammarAccess.getBindingsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBinding
entryRuleBinding 
:
{ before(grammarAccess.getBindingRule()); }
	 ruleBinding
{ after(grammarAccess.getBindingRule()); } 
	 EOF 
;

// Rule Binding
ruleBinding
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBindingAccess().getGroup()); }
(rule__Binding__Group__0)
{ after(grammarAccess.getBindingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBindVariable
entryRuleBindVariable 
:
{ before(grammarAccess.getBindVariableRule()); }
	 ruleBindVariable
{ after(grammarAccess.getBindVariableRule()); } 
	 EOF 
;

// Rule BindVariable
ruleBindVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBindVariableAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getBindVariableAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeName
entryRuleTypeName 
:
{ before(grammarAccess.getTypeNameRule()); }
	 ruleTypeName
{ after(grammarAccess.getTypeNameRule()); } 
	 EOF 
;

// Rule TypeName
ruleTypeName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeNameAccess().getQualifiedNameParserRuleCall()); }
	ruleQualifiedName
{ after(grammarAccess.getTypeNameAccess().getQualifiedNameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCondition
entryRuleCondition 
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionAccess().getGroup()); }
(rule__Condition__Group__0)
{ after(grammarAccess.getConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActions
entryRuleActions 
:
{ before(grammarAccess.getActionsRule()); }
	 ruleActions
{ after(grammarAccess.getActionsRule()); } 
	 EOF 
;

// Rule Actions
ruleActions
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionsAccess().getGroup()); }
(rule__Actions__Group__0)
{ after(grammarAccess.getActionsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActionList
entryRuleActionList 
:
{ before(grammarAccess.getActionListRule()); }
	 ruleActionList
{ after(grammarAccess.getActionListRule()); } 
	 EOF 
;

// Rule ActionList
ruleActionList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionListAccess().getGroup()); }
(rule__ActionList__Group__0)
{ after(grammarAccess.getActionListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAction
entryRuleAction 
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionAccess().getAlternatives()); }
(rule__Action__Alternatives)
{ after(grammarAccess.getActionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAssignmentExprParserRuleCall()); }
	ruleAssignmentExpr
{ after(grammarAccess.getExpressionAccess().getAssignmentExprParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReturnExpr
entryRuleReturnExpr 
:
{ before(grammarAccess.getReturnExprRule()); }
	 ruleReturnExpr
{ after(grammarAccess.getReturnExprRule()); } 
	 EOF 
;

// Rule ReturnExpr
ruleReturnExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReturnExprAccess().getGroup()); }
(rule__ReturnExpr__Group__0)
{ after(grammarAccess.getReturnExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleThrowExpr
entryRuleThrowExpr 
:
{ before(grammarAccess.getThrowExprRule()); }
	 ruleThrowExpr
{ after(grammarAccess.getThrowExprRule()); } 
	 EOF 
;

// Rule ThrowExpr
ruleThrowExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getThrowExprAccess().getGroup()); }
(rule__ThrowExpr__Group__0)
{ after(grammarAccess.getThrowExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignmentExpr
entryRuleAssignmentExpr 
:
{ before(grammarAccess.getAssignmentExprRule()); }
	 ruleAssignmentExpr
{ after(grammarAccess.getAssignmentExprRule()); } 
	 EOF 
;

// Rule AssignmentExpr
ruleAssignmentExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentExprAccess().getGroup()); }
(rule__AssignmentExpr__Group__0)
{ after(grammarAccess.getAssignmentExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperatorExpr
entryRuleOperatorExpr 
:
{ before(grammarAccess.getOperatorExprRule()); }
	 ruleOperatorExpr
{ after(grammarAccess.getOperatorExprRule()); } 
	 EOF 
;

// Rule OperatorExpr
ruleOperatorExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperatorExprAccess().getGroup()); }
(rule__OperatorExpr__Group__0)
{ after(grammarAccess.getOperatorExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePlusMinusOperand
entryRulePlusMinusOperand 
:
{ before(grammarAccess.getPlusMinusOperandRule()); }
	 rulePlusMinusOperand
{ after(grammarAccess.getPlusMinusOperandRule()); } 
	 EOF 
;

// Rule PlusMinusOperand
rulePlusMinusOperand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPlusMinusOperandAccess().getGroup()); }
(rule__PlusMinusOperand__Group__0)
{ after(grammarAccess.getPlusMinusOperandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTimesDivOperand
entryRuleTimesDivOperand 
:
{ before(grammarAccess.getTimesDivOperandRule()); }
	 ruleTimesDivOperand
{ after(grammarAccess.getTimesDivOperandRule()); } 
	 EOF 
;

// Rule TimesDivOperand
ruleTimesDivOperand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTimesDivOperandAccess().getAlternatives()); }
(rule__TimesDivOperand__Alternatives)
{ after(grammarAccess.getTimesDivOperandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBitwiseOperand
entryRuleBitwiseOperand 
:
{ before(grammarAccess.getBitwiseOperandRule()); }
	 ruleBitwiseOperand
{ after(grammarAccess.getBitwiseOperandRule()); } 
	 EOF 
;

// Rule BitwiseOperand
ruleBitwiseOperand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBitwiseOperandAccess().getGroup()); }
(rule__BitwiseOperand__Group__0)
{ after(grammarAccess.getBitwiseOperandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotOperand
entryRuleNotOperand 
:
{ before(grammarAccess.getNotOperandRule()); }
	 ruleNotOperand
{ after(grammarAccess.getNotOperandRule()); } 
	 EOF 
;

// Rule NotOperand
ruleNotOperand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotOperandAccess().getGroup()); }
(rule__NotOperand__Group__0)
{ after(grammarAccess.getNotOperandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalOperand
entryRuleLogicalOperand 
:
{ before(grammarAccess.getLogicalOperandRule()); }
	 ruleLogicalOperand
{ after(grammarAccess.getLogicalOperandRule()); } 
	 EOF 
;

// Rule LogicalOperand
ruleLogicalOperand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalOperandAccess().getGroup()); }
(rule__LogicalOperand__Group__0)
{ after(grammarAccess.getLogicalOperandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparisonOperand
entryRuleComparisonOperand 
:
{ before(grammarAccess.getComparisonOperandRule()); }
	 ruleComparisonOperand
{ after(grammarAccess.getComparisonOperandRule()); } 
	 EOF 
;

// Rule ComparisonOperand
ruleComparisonOperand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonOperandAccess().getAccessExprParserRuleCall()); }
	ruleAccessExpr
{ after(grammarAccess.getComparisonOperandAccess().getAccessExprParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAccessExpr
entryRuleAccessExpr 
:
{ before(grammarAccess.getAccessExprRule()); }
	 ruleAccessExpr
{ after(grammarAccess.getAccessExprRule()); } 
	 EOF 
;

// Rule AccessExpr
ruleAccessExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAccessExprAccess().getGroup()); }
(rule__AccessExpr__Group__0)
{ after(grammarAccess.getAccessExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAccessBaseExpr
entryRuleAccessBaseExpr 
:
{ before(grammarAccess.getAccessBaseExprRule()); }
	 ruleAccessBaseExpr
{ after(grammarAccess.getAccessBaseExprRule()); } 
	 EOF 
;

// Rule AccessBaseExpr
ruleAccessBaseExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAccessBaseExprAccess().getAlternatives()); }
(rule__AccessBaseExpr__Alternatives)
{ after(grammarAccess.getAccessBaseExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBuiltinExpr
entryRuleBuiltinExpr 
:
{ before(grammarAccess.getBuiltinExprRule()); }
	 ruleBuiltinExpr
{ after(grammarAccess.getBuiltinExprRule()); } 
	 EOF 
;

// Rule BuiltinExpr
ruleBuiltinExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBuiltinExprAccess().getGroup()); }
(rule__BuiltinExpr__Group__0)
{ after(grammarAccess.getBuiltinExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleExpr
entryRuleSimpleExpr 
:
{ before(grammarAccess.getSimpleExprRule()); }
	 ruleSimpleExpr
{ after(grammarAccess.getSimpleExprRule()); } 
	 EOF 
;

// Rule SimpleExpr
ruleSimpleExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleExprAccess().getAlternatives()); }
(rule__SimpleExpr__Alternatives)
{ after(grammarAccess.getSimpleExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNewExpr
entryRuleNewExpr 
:
{ before(grammarAccess.getNewExprRule()); }
	 ruleNewExpr
{ after(grammarAccess.getNewExprRule()); } 
	 EOF 
;

// Rule NewExpr
ruleNewExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNewExprAccess().getGroup()); }
(rule__NewExpr__Group__0)
{ after(grammarAccess.getNewExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableExpr
entryRuleVariableExpr 
:
{ before(grammarAccess.getVariableExprRule()); }
	 ruleVariableExpr
{ after(grammarAccess.getVariableExprRule()); } 
	 EOF 
;

// Rule VariableExpr
ruleVariableExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableExprAccess().getAlternatives()); }
(rule__VariableExpr__Alternatives)
{ after(grammarAccess.getVariableExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCallArguments
entryRuleCallArguments 
:
{ before(grammarAccess.getCallArgumentsRule()); }
	 ruleCallArguments
{ after(grammarAccess.getCallArgumentsRule()); } 
	 EOF 
;

// Rule CallArguments
ruleCallArguments
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCallArgumentsAccess().getGroup()); }
(rule__CallArguments__Group__0)
{ after(grammarAccess.getCallArgumentsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleName
entryRuleSimpleName 
:
{ before(grammarAccess.getSimpleNameRule()); }
	 ruleSimpleName
{ after(grammarAccess.getSimpleNameRule()); } 
	 EOF 
;

// Rule SimpleName
ruleSimpleName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleNameAccess().getValueAssignment()); }
(rule__SimpleName__ValueAssignment)
{ after(grammarAccess.getSimpleNameAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIndexedSpecialVar
entryRuleIndexedSpecialVar 
:
{ before(grammarAccess.getIndexedSpecialVarRule()); }
	 ruleIndexedSpecialVar
{ after(grammarAccess.getIndexedSpecialVarRule()); } 
	 EOF 
;

// Rule IndexedSpecialVar
ruleIndexedSpecialVar
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIndexedSpecialVarAccess().getGroup()); }
(rule__IndexedSpecialVar__Group__0)
{ after(grammarAccess.getIndexedSpecialVarAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSpecialVar
entryRuleSpecialVar 
:
{ before(grammarAccess.getSpecialVarRule()); }
	 ruleSpecialVar
{ after(grammarAccess.getSpecialVarRule()); } 
	 EOF 
;

// Rule SpecialVar
ruleSpecialVar
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSpecialVarAccess().getAlternatives()); }
(rule__SpecialVar__Alternatives)
{ after(grammarAccess.getSpecialVarAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBracketedExpr
entryRuleBracketedExpr 
:
{ before(grammarAccess.getBracketedExprRule()); }
	 ruleBracketedExpr
{ after(grammarAccess.getBracketedExprRule()); } 
	 EOF 
;

// Rule BracketedExpr
ruleBracketedExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBracketedExprAccess().getGroup()); }
(rule__BracketedExpr__Group__0)
{ after(grammarAccess.getBracketedExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstantExpr
entryRuleConstantExpr 
:
{ before(grammarAccess.getConstantExprRule()); }
	 ruleConstantExpr
{ after(grammarAccess.getConstantExprRule()); } 
	 EOF 
;

// Rule ConstantExpr
ruleConstantExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantExprAccess().getAlternatives()); }
(rule__ConstantExpr__Alternatives)
{ after(grammarAccess.getConstantExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntConstantExpr
entryRuleIntConstantExpr 
:
{ before(grammarAccess.getIntConstantExprRule()); }
	 ruleIntConstantExpr
{ after(grammarAccess.getIntConstantExprRule()); } 
	 EOF 
;

// Rule IntConstantExpr
ruleIntConstantExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntConstantExprAccess().getGroup()); }
(rule__IntConstantExpr__Group__0)
{ after(grammarAccess.getIntConstantExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringConstantExpr
entryRuleStringConstantExpr 
:
{ before(grammarAccess.getStringConstantExprRule()); }
	 ruleStringConstantExpr
{ after(grammarAccess.getStringConstantExprRule()); } 
	 EOF 
;

// Rule StringConstantExpr
ruleStringConstantExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringConstantExprAccess().getGroup()); }
(rule__StringConstantExpr__Group__0)
{ after(grammarAccess.getStringConstantExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanConstantExpr
entryRuleBooleanConstantExpr 
:
{ before(grammarAccess.getBooleanConstantExprRule()); }
	 ruleBooleanConstantExpr
{ after(grammarAccess.getBooleanConstantExprRule()); } 
	 EOF 
;

// Rule BooleanConstantExpr
ruleBooleanConstantExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanConstantExprAccess().getGroup()); }
(rule__BooleanConstantExpr__Group__0)
{ after(grammarAccess.getBooleanConstantExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatConstantExpr
entryRuleFloatConstantExpr 
:
{ before(grammarAccess.getFloatConstantExprRule()); }
	 ruleFloatConstantExpr
{ after(grammarAccess.getFloatConstantExprRule()); } 
	 EOF 
;

// Rule FloatConstantExpr
ruleFloatConstantExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatConstantExprAccess().getGroup()); }
(rule__FloatConstantExpr__Group__0)
{ after(grammarAccess.getFloatConstantExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__DomainModel__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainModelAccess().getElementsAssignment_1_0()); }
(rule__DomainModel__ElementsAssignment_1_0)
{ after(grammarAccess.getDomainModelAccess().getElementsAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getDomainModelAccess().getEOLTerminalRuleCall_1_1()); }
	RULE_EOL
{ after(grammarAccess.getDomainModelAccess().getEOLTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getBytemanRuleParserRuleCall_0()); }
	ruleBytemanRule
{ after(grammarAccess.getElementAccess().getBytemanRuleParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getElementAccess().getHelperParserRuleCall_1()); }
	ruleHelper
{ after(grammarAccess.getElementAccess().getHelperParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getClassAssignment_0_0()); }
(rule__Event__ClassAssignment_0_0)
{ after(grammarAccess.getEventAccess().getClassAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getEventAccess().getInterfaceAssignment_0_1()); }
(rule__Event__InterfaceAssignment_0_1)
{ after(grammarAccess.getEventAccess().getInterfaceAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodName__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getMethodNameAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMethodNameAccess().getINITTerminalRuleCall_1()); }
	RULE_INIT
{ after(grammarAccess.getMethodNameAccess().getINITTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getMethodNameAccess().getCLINITTerminalRuleCall_2()); }
	RULE_CLINIT
{ after(grammarAccess.getMethodNameAccess().getCLINITTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocationSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationSpecifierAccess().getGroup_0()); }
(rule__LocationSpecifier__Group_0__0)
{ after(grammarAccess.getLocationSpecifierAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getLocationSpecifierAccess().getGroup_1()); }
(rule__LocationSpecifier__Group_1__0)
{ after(grammarAccess.getLocationSpecifierAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getLocationSpecifierAccess().getAtLineParserRuleCall_2()); }
	ruleAtLine
{ after(grammarAccess.getLocationSpecifierAccess().getAtLineParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtLocation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtLocationAccess().getAtEntryParserRuleCall_0()); }
	ruleAtEntry
{ after(grammarAccess.getAtLocationAccess().getAtEntryParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtLocationAccess().getAtExitParserRuleCall_1()); }
	ruleAtExit
{ after(grammarAccess.getAtLocationAccess().getAtExitParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAtLocationAccess().getAtLineParserRuleCall_2()); }
	ruleAtLine
{ after(grammarAccess.getAtLocationAccess().getAtLineParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getAtLocationAccess().getAtReadParserRuleCall_3()); }
	ruleAtRead
{ after(grammarAccess.getAtLocationAccess().getAtReadParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getAtLocationAccess().getAtWriteParserRuleCall_4()); }
	ruleAtWrite
{ after(grammarAccess.getAtLocationAccess().getAtWriteParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getAtLocationAccess().getAtInvokeParserRuleCall_5()); }
	ruleAtInvoke
{ after(grammarAccess.getAtLocationAccess().getAtInvokeParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getAtLocationAccess().getAtSynchronizeParserRuleCall_6()); }
	ruleAtSynchronize
{ after(grammarAccess.getAtLocationAccess().getAtSynchronizeParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getAtLocationAccess().getAtThrowParserRuleCall_7()); }
	ruleAtThrow
{ after(grammarAccess.getAtLocationAccess().getAtThrowParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AfterLocation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterLocationAccess().getAfterReadParserRuleCall_0()); }
	ruleAfterRead
{ after(grammarAccess.getAfterLocationAccess().getAfterReadParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAfterLocationAccess().getAfterWriteParserRuleCall_1()); }
	ruleAfterWrite
{ after(grammarAccess.getAfterLocationAccess().getAfterWriteParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAfterLocationAccess().getAfterInvokeParserRuleCall_2()); }
	ruleAfterInvoke
{ after(grammarAccess.getAfterLocationAccess().getAfterInvokeParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getAfterLocationAccess().getAfterSynchronizeParserRuleCall_3()); }
	ruleAfterSynchronize
{ after(grammarAccess.getAfterLocationAccess().getAfterSynchronizeParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getAfterLocationAccess().getAtThrowParserRuleCall_4()); }
	ruleAtThrow
{ after(grammarAccess.getAfterLocationAccess().getAtThrowParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtExit__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtExitAccess().getEXITKeyword_1_0()); }

	'EXIT' 

{ after(grammarAccess.getAtExitAccess().getEXITKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getAtExitAccess().getKEYWORD_RETURNTerminalRuleCall_1_1()); }
	RULE_KEYWORD_RETURN
{ after(grammarAccess.getAtExitAccess().getKEYWORD_RETURNTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtRead__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtReadAccess().getAtReadFieldParserRuleCall_0()); }
	ruleAtReadField
{ after(grammarAccess.getAtReadAccess().getAtReadFieldParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtReadAccess().getAtReadLocalParserRuleCall_1()); }
	ruleAtReadLocal
{ after(grammarAccess.getAtReadAccess().getAtReadLocalParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AfterRead__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterReadAccess().getAfterReadFieldParserRuleCall_0()); }
	ruleAfterReadField
{ after(grammarAccess.getAfterReadAccess().getAfterReadFieldParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAfterReadAccess().getAfterReadLocalParserRuleCall_1()); }
	ruleAfterReadLocal
{ after(grammarAccess.getAfterReadAccess().getAfterReadLocalParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtWrite__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtWriteAccess().getAtWriteFieldParserRuleCall_0()); }
	ruleAtWriteField
{ after(grammarAccess.getAtWriteAccess().getAtWriteFieldParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtWriteAccess().getAtWriteLocalParserRuleCall_1()); }
	ruleAtWriteLocal
{ after(grammarAccess.getAtWriteAccess().getAtWriteLocalParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AfterWrite__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterWriteAccess().getAfterWriteFieldParserRuleCall_0()); }
	ruleAfterWriteField
{ after(grammarAccess.getAfterWriteAccess().getAfterWriteFieldParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAfterWriteAccess().getAfterWriteLocalParserRuleCall_1()); }
	ruleAfterWriteLocal
{ after(grammarAccess.getAfterWriteAccess().getAfterWriteLocalParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtInvoke__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtInvokeAccess().getINVOKEKeyword_1_0()); }

	'INVOKE' 

{ after(grammarAccess.getAtInvokeAccess().getINVOKEKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getAtInvokeAccess().getCALLKeyword_1_1()); }

	'CALL' 

{ after(grammarAccess.getAtInvokeAccess().getCALLKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AfterInvoke__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterInvokeAccess().getINVOKEKeyword_1_0()); }

	'INVOKE' 

{ after(grammarAccess.getAfterInvokeAccess().getINVOKEKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getAfterInvokeAccess().getCALLKeyword_1_1()); }

	'CALL' 

{ after(grammarAccess.getAfterInvokeAccess().getCALLKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Counter__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCounterAccess().getINTVALTerminalRuleCall_0()); }
	RULE_INTVAL
{ after(grammarAccess.getCounterAccess().getINTVALTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCounterAccess().getALLKeyword_1()); }

	'ALL' 

{ after(grammarAccess.getCounterAccess().getALLKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bind__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindAccess().getNOTHINGTerminalRuleCall_2_0()); }
	RULE_NOTHING
{ after(grammarAccess.getBindAccess().getNOTHINGTerminalRuleCall_2_0()); }
)

    |(
{ before(grammarAccess.getBindAccess().getBindAssignment_2_1()); }
(rule__Bind__BindAssignment_2_1)
{ after(grammarAccess.getBindAccess().getBindAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Actions__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionsAccess().getActionListAssignment_2_0()); }
(rule__Actions__ActionListAssignment_2_0)
{ after(grammarAccess.getActionsAccess().getActionListAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getActionsAccess().getNOTHINGTerminalRuleCall_2_1()); }
	RULE_NOTHING
{ after(grammarAccess.getActionsAccess().getNOTHINGTerminalRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getExpressionParserRuleCall_0()); }
	ruleExpression
{ after(grammarAccess.getActionAccess().getExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getActionAccess().getReturnExprParserRuleCall_1()); }
	ruleReturnExpr
{ after(grammarAccess.getActionAccess().getReturnExprParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getActionAccess().getThrowExprParserRuleCall_2()); }
	ruleThrowExpr
{ after(grammarAccess.getActionAccess().getThrowExprParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorExpr__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorExprAccess().getOpPLUSTerminalRuleCall_1_1_0_0()); }
	RULE_PLUS
{ after(grammarAccess.getOperatorExprAccess().getOpPLUSTerminalRuleCall_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getOperatorExprAccess().getOpMINUSTerminalRuleCall_1_1_0_1()); }
	RULE_MINUS
{ after(grammarAccess.getOperatorExprAccess().getOpMINUSTerminalRuleCall_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusOperand__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusMinusOperandAccess().getOpTIMESTerminalRuleCall_1_1_0_0()); }
	RULE_TIMES
{ after(grammarAccess.getPlusMinusOperandAccess().getOpTIMESTerminalRuleCall_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getPlusMinusOperandAccess().getOpDIVTerminalRuleCall_1_1_0_1()); }
	RULE_DIV
{ after(grammarAccess.getPlusMinusOperandAccess().getOpDIVTerminalRuleCall_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getPlusMinusOperandAccess().getOpMODTerminalRuleCall_1_1_0_2()); }
	RULE_MOD
{ after(grammarAccess.getPlusMinusOperandAccess().getOpMODTerminalRuleCall_1_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimesDivOperand__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimesDivOperandAccess().getGroup_0()); }
(rule__TimesDivOperand__Group_0__0)
{ after(grammarAccess.getTimesDivOperandAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getTimesDivOperandAccess().getGroup_1()); }
(rule__TimesDivOperand__Group_1__0)
{ after(grammarAccess.getTimesDivOperandAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimesDivOperand__OpAlternatives_0_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimesDivOperandAccess().getOpBANDTerminalRuleCall_0_1_1_0_0()); }
	RULE_BAND
{ after(grammarAccess.getTimesDivOperandAccess().getOpBANDTerminalRuleCall_0_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getTimesDivOperandAccess().getOpBORTerminalRuleCall_0_1_1_0_1()); }
	RULE_BOR
{ after(grammarAccess.getTimesDivOperandAccess().getOpBORTerminalRuleCall_0_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getTimesDivOperandAccess().getOpBXORTerminalRuleCall_0_1_1_0_2()); }
	RULE_BXOR
{ after(grammarAccess.getTimesDivOperandAccess().getOpBXORTerminalRuleCall_0_1_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOperand__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOperandAccess().getLogicalOperandParserRuleCall_0_0()); }
	ruleLogicalOperand
{ after(grammarAccess.getBitwiseOperandAccess().getLogicalOperandParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getBitwiseOperandAccess().getNotOperandParserRuleCall_0_1()); }
	ruleNotOperand
{ after(grammarAccess.getBitwiseOperandAccess().getNotOperandParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOperand__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOperandAccess().getOpORTerminalRuleCall_1_1_0_0()); }
	RULE_OR
{ after(grammarAccess.getBitwiseOperandAccess().getOpORTerminalRuleCall_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getBitwiseOperandAccess().getOpANDTerminalRuleCall_1_1_0_1()); }
	RULE_AND
{ after(grammarAccess.getBitwiseOperandAccess().getOpANDTerminalRuleCall_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOperand__Operand2Alternatives_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOperandAccess().getOperand2NotOperandParserRuleCall_1_2_0_0()); }
	ruleNotOperand
{ after(grammarAccess.getBitwiseOperandAccess().getOperand2NotOperandParserRuleCall_1_2_0_0()); }
)

    |(
{ before(grammarAccess.getBitwiseOperandAccess().getOperand2LogicalOperandParserRuleCall_1_2_0_1()); }
	ruleLogicalOperand
{ after(grammarAccess.getBitwiseOperandAccess().getOperand2LogicalOperandParserRuleCall_1_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperand__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOperandAccess().getOpEQTerminalRuleCall_1_1_0_0()); }
	RULE_EQ
{ after(grammarAccess.getLogicalOperandAccess().getOpEQTerminalRuleCall_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getLogicalOperandAccess().getOpGTTerminalRuleCall_1_1_0_1()); }
	RULE_GT
{ after(grammarAccess.getLogicalOperandAccess().getOpGTTerminalRuleCall_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getLogicalOperandAccess().getOpGETerminalRuleCall_1_1_0_2()); }
	RULE_GE
{ after(grammarAccess.getLogicalOperandAccess().getOpGETerminalRuleCall_1_1_0_2()); }
)

    |(
{ before(grammarAccess.getLogicalOperandAccess().getOpLETerminalRuleCall_1_1_0_3()); }
	RULE_LE
{ after(grammarAccess.getLogicalOperandAccess().getOpLETerminalRuleCall_1_1_0_3()); }
)

    |(
{ before(grammarAccess.getLogicalOperandAccess().getOpLTTerminalRuleCall_1_1_0_4()); }
	RULE_LT
{ after(grammarAccess.getLogicalOperandAccess().getOpLTTerminalRuleCall_1_1_0_4()); }
)

    |(
{ before(grammarAccess.getLogicalOperandAccess().getOpNETerminalRuleCall_1_1_0_5()); }
	RULE_NE
{ after(grammarAccess.getLogicalOperandAccess().getOpNETerminalRuleCall_1_1_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpr__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExprAccess().getGroup_1_0()); }
(rule__AccessExpr__Group_1_0__0)
{ after(grammarAccess.getAccessExprAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getAccessExprAccess().getGroup_1_1()); }
(rule__AccessExpr__Group_1_1__0)
{ after(grammarAccess.getAccessExprAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessBaseExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessBaseExprAccess().getBuiltinExprParserRuleCall_0()); }
	ruleBuiltinExpr
{ after(grammarAccess.getAccessBaseExprAccess().getBuiltinExprParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAccessBaseExprAccess().getSimpleExprParserRuleCall_1()); }
	ruleSimpleExpr
{ after(grammarAccess.getAccessBaseExprAccess().getSimpleExprParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExprAccess().getVariableExprParserRuleCall_0()); }
	ruleVariableExpr
{ after(grammarAccess.getSimpleExprAccess().getVariableExprParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSimpleExprAccess().getConstantExprParserRuleCall_1()); }
	ruleConstantExpr
{ after(grammarAccess.getSimpleExprAccess().getConstantExprParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSimpleExprAccess().getBracketedExprParserRuleCall_2()); }
	ruleBracketedExpr
{ after(grammarAccess.getSimpleExprAccess().getBracketedExprParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSimpleExprAccess().getNewExprParserRuleCall_3()); }
	ruleNewExpr
{ after(grammarAccess.getSimpleExprAccess().getNewExprParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableExprAccess().getSimpleNameParserRuleCall_0()); }
	ruleSimpleName
{ after(grammarAccess.getVariableExprAccess().getSimpleNameParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getVariableExprAccess().getIndexedSpecialVarParserRuleCall_1()); }
	ruleIndexedSpecialVar
{ after(grammarAccess.getVariableExprAccess().getIndexedSpecialVarParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getVariableExprAccess().getSpecialVarParserRuleCall_2()); }
	ruleSpecialVar
{ after(grammarAccess.getVariableExprAccess().getSpecialVarParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialVar__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialVarAccess().getOpAssignment_0()); }
(rule__SpecialVar__OpAssignment_0)
{ after(grammarAccess.getSpecialVarAccess().getOpAssignment_0()); }
)

    |(
{ before(grammarAccess.getSpecialVarAccess().getOpAssignment_1()); }
(rule__SpecialVar__OpAssignment_1)
{ after(grammarAccess.getSpecialVarAccess().getOpAssignment_1()); }
)

    |(
{ before(grammarAccess.getSpecialVarAccess().getOpAssignment_2()); }
(rule__SpecialVar__OpAssignment_2)
{ after(grammarAccess.getSpecialVarAccess().getOpAssignment_2()); }
)

    |(
{ before(grammarAccess.getSpecialVarAccess().getOpAssignment_3()); }
(rule__SpecialVar__OpAssignment_3)
{ after(grammarAccess.getSpecialVarAccess().getOpAssignment_3()); }
)

    |(
{ before(grammarAccess.getSpecialVarAccess().getOpAssignment_4()); }
(rule__SpecialVar__OpAssignment_4)
{ after(grammarAccess.getSpecialVarAccess().getOpAssignment_4()); }
)

    |(
{ before(grammarAccess.getSpecialVarAccess().getGroup_5()); }
(rule__SpecialVar__Group_5__0)
{ after(grammarAccess.getSpecialVarAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantExprAccess().getIntConstantExprParserRuleCall_0()); }
	ruleIntConstantExpr
{ after(grammarAccess.getConstantExprAccess().getIntConstantExprParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConstantExprAccess().getStringConstantExprParserRuleCall_1()); }
	ruleStringConstantExpr
{ after(grammarAccess.getConstantExprAccess().getStringConstantExprParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getConstantExprAccess().getBooleanConstantExprParserRuleCall_2()); }
	ruleBooleanConstantExpr
{ after(grammarAccess.getConstantExprAccess().getBooleanConstantExprParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getConstantExprAccess().getFloatConstantExprParserRuleCall_3()); }
	ruleFloatConstantExpr
{ after(grammarAccess.getConstantExprAccess().getFloatConstantExprParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__DomainModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DomainModel__Group__0__Impl
	rule__DomainModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainModelAccess().getDomainModelAction_0()); }
(

)
{ after(grammarAccess.getDomainModelAccess().getDomainModelAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DomainModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DomainModel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DomainModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainModelAccess().getAlternatives_1()); }
(rule__DomainModel__Alternatives_1)*
{ after(grammarAccess.getDomainModelAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BytemanRule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BytemanRule__Group__0__Impl
	rule__BytemanRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BytemanRule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBytemanRuleAccess().getNameAssignment_0()); }
(rule__BytemanRule__NameAssignment_0)
{ after(grammarAccess.getBytemanRuleAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BytemanRule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BytemanRule__Group__1__Impl
	rule__BytemanRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BytemanRule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBytemanRuleAccess().getEOLTerminalRuleCall_1()); }
(	RULE_EOL)*
{ after(grammarAccess.getBytemanRuleAccess().getEOLTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BytemanRule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BytemanRule__Group__2__Impl
	rule__BytemanRule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BytemanRule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBytemanRuleAccess().getEventAssignment_2()); }
(rule__BytemanRule__EventAssignment_2)
{ after(grammarAccess.getBytemanRuleAccess().getEventAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BytemanRule__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BytemanRule__Group__3__Impl
	rule__BytemanRule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BytemanRule__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBytemanRuleAccess().getBodyAssignment_3()); }
(rule__BytemanRule__BodyAssignment_3)
{ after(grammarAccess.getBytemanRuleAccess().getBodyAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BytemanRule__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BytemanRule__Group__4__Impl
	rule__BytemanRule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BytemanRule__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBytemanRuleAccess().getEND_RULETerminalRuleCall_4()); }
	RULE_END_RULE
{ after(grammarAccess.getBytemanRuleAccess().getEND_RULETerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BytemanRule__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BytemanRule__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BytemanRule__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBytemanRuleAccess().getEOLTerminalRuleCall_5()); }
	RULE_EOL
{ after(grammarAccess.getBytemanRuleAccess().getEOLTerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Body__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group__0__Impl
	rule__Body__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getBindAssignment_0()); }
(rule__Body__BindAssignment_0)?
{ after(grammarAccess.getBodyAccess().getBindAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group__1__Impl
	rule__Body__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getConditionAssignment_1()); }
(rule__Body__ConditionAssignment_1)
{ after(grammarAccess.getBodyAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getActionsAssignment_2()); }
(rule__Body__ActionsAssignment_2)
{ after(grammarAccess.getBodyAccess().getActionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Event__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__0__Impl
	rule__Event__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getAlternatives_0()); }
(rule__Event__Alternatives_0)
{ after(grammarAccess.getEventAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__1__Impl
	rule__Event__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getEOLTerminalRuleCall_1()); }
(	RULE_EOL)*
{ after(grammarAccess.getEventAccess().getEOLTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__2__Impl
	rule__Event__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getMethodAssignment_2()); }
(rule__Event__MethodAssignment_2)
{ after(grammarAccess.getEventAccess().getMethodAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__3__Impl
	rule__Event__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getEOLTerminalRuleCall_3()); }
(	RULE_EOL)*
{ after(grammarAccess.getEventAccess().getEOLTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__4__Impl
	rule__Event__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getGroup_4()); }
(rule__Event__Group_4__0)?
{ after(grammarAccess.getEventAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getGroup_5()); }
(rule__Event__Group_5__0)?
{ after(grammarAccess.getEventAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Event__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_4__0__Impl
	rule__Event__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getHelperAssignment_4_0()); }
(rule__Event__HelperAssignment_4_0)
{ after(grammarAccess.getEventAccess().getHelperAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getEOLTerminalRuleCall_4_1()); }
(	RULE_EOL)*
{ after(grammarAccess.getEventAccess().getEOLTerminalRuleCall_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Event__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_5__0__Impl
	rule__Event__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getLocationSpecAssignment_5_0()); }
(rule__Event__LocationSpecAssignment_5_0)
{ after(grammarAccess.getEventAccess().getLocationSpecAssignment_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getEOLTerminalRuleCall_5_1()); }
(	RULE_EOL)*
{ after(grammarAccess.getEventAccess().getEOLTerminalRuleCall_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EventClass__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventClass__Group__0__Impl
	rule__EventClass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventClass__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventClassAccess().getKeywordAssignment_0()); }
(rule__EventClass__KeywordAssignment_0)
{ after(grammarAccess.getEventClassAccess().getKeywordAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventClass__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventClass__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventClass__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventClassAccess().getNameAssignment_1()); }
(rule__EventClass__NameAssignment_1)
{ after(grammarAccess.getEventClassAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EventInterface__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventInterface__Group__0__Impl
	rule__EventInterface__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventInterface__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventInterfaceAccess().getKeywordAssignment_0()); }
(rule__EventInterface__KeywordAssignment_0)
{ after(grammarAccess.getEventInterfaceAccess().getKeywordAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventInterface__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventInterface__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventInterface__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventInterfaceAccess().getNameAssignment_1()); }
(rule__EventInterface__NameAssignment_1)
{ after(grammarAccess.getEventInterfaceAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EventMethod__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventMethod__Group__0__Impl
	rule__EventMethod__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventMethod__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventMethodAccess().getKEYWORD_METHODTerminalRuleCall_0()); }
	RULE_KEYWORD_METHOD
{ after(grammarAccess.getEventMethodAccess().getKEYWORD_METHODTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventMethod__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventMethod__Group__1__Impl
	rule__EventMethod__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EventMethod__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventMethodAccess().getNameAssignment_1()); }
(rule__EventMethod__NameAssignment_1)
{ after(grammarAccess.getEventMethodAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventMethod__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventMethod__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventMethod__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventMethodAccess().getParameterTypesAssignment_2()); }
(rule__EventMethod__ParameterTypesAssignment_2)?
{ after(grammarAccess.getEventMethodAccess().getParameterTypesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Helper__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Helper__Group__0__Impl
	rule__Helper__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Helper__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHelperAccess().getHelperAction_0()); }
(

)
{ after(grammarAccess.getHelperAccess().getHelperAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Helper__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Helper__Group__1__Impl
	rule__Helper__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Helper__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHelperAccess().getHELPERKeyword_1()); }

	'HELPER' 

{ after(grammarAccess.getHelperAccess().getHELPERKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Helper__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Helper__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Helper__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHelperAccess().getHelperAssignment_2()); }
(rule__Helper__HelperAssignment_2)?
{ after(grammarAccess.getHelperAccess().getHelperAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LocationSpecifier__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocationSpecifier__Group_0__0__Impl
	rule__LocationSpecifier__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationSpecifier__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationSpecifierAccess().getATKeyword_0_0()); }

	'AT' 

{ after(grammarAccess.getLocationSpecifierAccess().getATKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocationSpecifier__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocationSpecifier__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationSpecifier__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationSpecifierAccess().getAtLocationParserRuleCall_0_1()); }
	ruleAtLocation
{ after(grammarAccess.getLocationSpecifierAccess().getAtLocationParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LocationSpecifier__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocationSpecifier__Group_1__0__Impl
	rule__LocationSpecifier__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationSpecifier__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationSpecifierAccess().getAFTERKeyword_1_0()); }

	'AFTER' 

{ after(grammarAccess.getLocationSpecifierAccess().getAFTERKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocationSpecifier__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocationSpecifier__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationSpecifier__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationSpecifierAccess().getAfterLocationParserRuleCall_1_1()); }
	ruleAfterLocation
{ after(grammarAccess.getLocationSpecifierAccess().getAfterLocationParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AtEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtEntry__Group__0__Impl
	rule__AtEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtEntryAccess().getAtEntryAction_0()); }
(

)
{ after(grammarAccess.getAtEntryAccess().getAtEntryAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtEntry__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtEntryAccess().getENTRYKeyword_1()); }

	'ENTRY' 

{ after(grammarAccess.getAtEntryAccess().getENTRYKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AtExit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtExit__Group__0__Impl
	rule__AtExit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtExit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtExitAccess().getAtExitAction_0()); }
(

)
{ after(grammarAccess.getAtExitAccess().getAtExitAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtExit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtExit__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtExit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtExitAccess().getAlternatives_1()); }
(rule__AtExit__Alternatives_1)
{ after(grammarAccess.getAtExitAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AtLine__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtLine__Group__0__Impl
	rule__AtLine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtLine__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtLineAccess().getAtLineAction_0()); }
(

)
{ after(grammarAccess.getAtLineAccess().getAtLineAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtLine__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtLine__Group__1__Impl
	rule__AtLine__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtLine__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtLineAccess().getLINEKeyword_1()); }

	'LINE' 

{ after(grammarAccess.getAtLineAccess().getLINEKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtLine__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtLine__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtLine__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtLineAccess().getLineAssignment_2()); }
(rule__AtLine__LineAssignment_2)
{ after(grammarAccess.getAtLineAccess().getLineAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AtReadField__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtReadField__Group__0__Impl
	rule__AtReadField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtReadField__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtReadFieldAccess().getAtReadFieldAction_0()); }
(

)
{ after(grammarAccess.getAtReadFieldAccess().getAtReadFieldAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtReadField__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtReadField__Group__1__Impl
	rule__AtReadField__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtReadField__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtReadFieldAccess().getREADKeyword_1()); }

	'READ' 

{ after(grammarAccess.getAtReadFieldAccess().getREADKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtReadField__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtReadField__Group__2__Impl
	rule__AtReadField__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AtReadField__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtReadFieldAccess().getNameAssignment_2()); }
(rule__AtReadField__NameAssignment_2)
{ after(grammarAccess.getAtReadFieldAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtReadField__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtReadField__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtReadField__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtReadFieldAccess().getCounterAssignment_3()); }
(rule__AtReadField__CounterAssignment_3)?
{ after(grammarAccess.getAtReadFieldAccess().getCounterAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AtReadLocal__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtReadLocal__Group__0__Impl
	rule__AtReadLocal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtReadLocal__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtReadLocalAccess().getAtReadLocalAction_0()); }
(

)
{ after(grammarAccess.getAtReadLocalAccess().getAtReadLocalAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtReadLocal__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtReadLocal__Group__1__Impl
	rule__AtReadLocal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtReadLocal__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtReadLocalAccess().getREADKeyword_1()); }

	'READ' 

{ after(grammarAccess.getAtReadLocalAccess().getREADKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtReadLocal__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtReadLocal__Group__2__Impl
	rule__AtReadLocal__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AtReadLocal__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtReadLocalAccess().getDOLLARTerminalRuleCall_2()); }
	RULE_DOLLAR
{ after(grammarAccess.getAtReadLocalAccess().getDOLLARTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtReadLocal__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtReadLocal__Group__3__Impl
	rule__AtReadLocal__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AtReadLocal__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtReadLocalAccess().getNameAssignment_3()); }
(rule__AtReadLocal__NameAssignment_3)
{ after(grammarAccess.getAtReadLocalAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtReadLocal__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtReadLocal__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtReadLocal__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtReadLocalAccess().getCounterAssignment_4()); }
(rule__AtReadLocal__CounterAssignment_4)?
{ after(grammarAccess.getAtReadLocalAccess().getCounterAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AfterReadField__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterReadField__Group__0__Impl
	rule__AfterReadField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterReadField__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterReadFieldAccess().getAfterReadFieldAction_0()); }
(

)
{ after(grammarAccess.getAfterReadFieldAccess().getAfterReadFieldAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AfterReadField__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterReadField__Group__1__Impl
	rule__AfterReadField__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterReadField__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterReadFieldAccess().getREADKeyword_1()); }

	'READ' 

{ after(grammarAccess.getAfterReadFieldAccess().getREADKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AfterReadField__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterReadField__Group__2__Impl
	rule__AfterReadField__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterReadField__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterReadFieldAccess().getNameAssignment_2()); }
(rule__AfterReadField__NameAssignment_2)
{ after(grammarAccess.getAfterReadFieldAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AfterReadField__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterReadField__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterReadField__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterReadFieldAccess().getCounterAssignment_3()); }
(rule__AfterReadField__CounterAssignment_3)?
{ after(grammarAccess.getAfterReadFieldAccess().getCounterAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AfterReadLocal__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterReadLocal__Group__0__Impl
	rule__AfterReadLocal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterReadLocal__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterReadLocalAccess().getAfterReadLocalAction_0()); }
(

)
{ after(grammarAccess.getAfterReadLocalAccess().getAfterReadLocalAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AfterReadLocal__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterReadLocal__Group__1__Impl
	rule__AfterReadLocal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterReadLocal__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterReadLocalAccess().getREADKeyword_1()); }

	'READ' 

{ after(grammarAccess.getAfterReadLocalAccess().getREADKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AfterReadLocal__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterReadLocal__Group__2__Impl
	rule__AfterReadLocal__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterReadLocal__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterReadLocalAccess().getDOLLARTerminalRuleCall_2()); }
	RULE_DOLLAR
{ after(grammarAccess.getAfterReadLocalAccess().getDOLLARTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AfterReadLocal__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterReadLocal__Group__3__Impl
	rule__AfterReadLocal__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterReadLocal__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterReadLocalAccess().getNameAssignment_3()); }
(rule__AfterReadLocal__NameAssignment_3)
{ after(grammarAccess.getAfterReadLocalAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AfterReadLocal__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterReadLocal__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterReadLocal__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterReadLocalAccess().getCounterAssignment_4()); }
(rule__AfterReadLocal__CounterAssignment_4)?
{ after(grammarAccess.getAfterReadLocalAccess().getCounterAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AtWriteField__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtWriteField__Group__0__Impl
	rule__AtWriteField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtWriteField__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtWriteFieldAccess().getAtWriteFieldAction_0()); }
(

)
{ after(grammarAccess.getAtWriteFieldAccess().getAtWriteFieldAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtWriteField__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtWriteField__Group__1__Impl
	rule__AtWriteField__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtWriteField__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtWriteFieldAccess().getWRITEKeyword_1()); }

	'WRITE' 

{ after(grammarAccess.getAtWriteFieldAccess().getWRITEKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtWriteField__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtWriteField__Group__2__Impl
	rule__AtWriteField__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AtWriteField__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtWriteFieldAccess().getNameAssignment_2()); }
(rule__AtWriteField__NameAssignment_2)
{ after(grammarAccess.getAtWriteFieldAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtWriteField__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtWriteField__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtWriteField__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtWriteFieldAccess().getCounterAssignment_3()); }
(rule__AtWriteField__CounterAssignment_3)?
{ after(grammarAccess.getAtWriteFieldAccess().getCounterAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AtWriteLocal__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtWriteLocal__Group__0__Impl
	rule__AtWriteLocal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtWriteLocal__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtWriteLocalAccess().getAtWriteLocalAction_0()); }
(

)
{ after(grammarAccess.getAtWriteLocalAccess().getAtWriteLocalAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtWriteLocal__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtWriteLocal__Group__1__Impl
	rule__AtWriteLocal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtWriteLocal__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtWriteLocalAccess().getWRITEKeyword_1()); }

	'WRITE' 

{ after(grammarAccess.getAtWriteLocalAccess().getWRITEKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtWriteLocal__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtWriteLocal__Group__2__Impl
	rule__AtWriteLocal__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AtWriteLocal__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtWriteLocalAccess().getDOLLARTerminalRuleCall_2()); }
	RULE_DOLLAR
{ after(grammarAccess.getAtWriteLocalAccess().getDOLLARTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtWriteLocal__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtWriteLocal__Group__3__Impl
	rule__AtWriteLocal__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AtWriteLocal__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtWriteLocalAccess().getNameAssignment_3()); }
(rule__AtWriteLocal__NameAssignment_3)
{ after(grammarAccess.getAtWriteLocalAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtWriteLocal__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtWriteLocal__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtWriteLocal__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtWriteLocalAccess().getCounterAssignment_4()); }
(rule__AtWriteLocal__CounterAssignment_4)?
{ after(grammarAccess.getAtWriteLocalAccess().getCounterAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AfterWriteField__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterWriteField__Group__0__Impl
	rule__AfterWriteField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterWriteField__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterWriteFieldAccess().getAfterWriteFieldAction_0()); }
(

)
{ after(grammarAccess.getAfterWriteFieldAccess().getAfterWriteFieldAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AfterWriteField__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterWriteField__Group__1__Impl
	rule__AfterWriteField__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterWriteField__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterWriteFieldAccess().getWRITEKeyword_1()); }

	'WRITE' 

{ after(grammarAccess.getAfterWriteFieldAccess().getWRITEKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AfterWriteField__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterWriteField__Group__2__Impl
	rule__AfterWriteField__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterWriteField__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterWriteFieldAccess().getNameAssignment_2()); }
(rule__AfterWriteField__NameAssignment_2)
{ after(grammarAccess.getAfterWriteFieldAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AfterWriteField__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterWriteField__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterWriteField__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterWriteFieldAccess().getCounterAssignment_3()); }
(rule__AfterWriteField__CounterAssignment_3)?
{ after(grammarAccess.getAfterWriteFieldAccess().getCounterAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AfterWriteLocal__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterWriteLocal__Group__0__Impl
	rule__AfterWriteLocal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterWriteLocal__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterWriteLocalAccess().getAfterWriteLocalAction_0()); }
(

)
{ after(grammarAccess.getAfterWriteLocalAccess().getAfterWriteLocalAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AfterWriteLocal__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterWriteLocal__Group__1__Impl
	rule__AfterWriteLocal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterWriteLocal__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterWriteLocalAccess().getWRITEKeyword_1()); }

	'WRITE' 

{ after(grammarAccess.getAfterWriteLocalAccess().getWRITEKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AfterWriteLocal__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterWriteLocal__Group__2__Impl
	rule__AfterWriteLocal__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterWriteLocal__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterWriteLocalAccess().getDOLLARTerminalRuleCall_2()); }
	RULE_DOLLAR
{ after(grammarAccess.getAfterWriteLocalAccess().getDOLLARTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AfterWriteLocal__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterWriteLocal__Group__3__Impl
	rule__AfterWriteLocal__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterWriteLocal__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterWriteLocalAccess().getNameAssignment_3()); }
(rule__AfterWriteLocal__NameAssignment_3)
{ after(grammarAccess.getAfterWriteLocalAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AfterWriteLocal__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterWriteLocal__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterWriteLocal__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterWriteLocalAccess().getCounterAssignment_4()); }
(rule__AfterWriteLocal__CounterAssignment_4)?
{ after(grammarAccess.getAfterWriteLocalAccess().getCounterAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AtInvoke__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtInvoke__Group__0__Impl
	rule__AtInvoke__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtInvoke__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtInvokeAccess().getAtInvokeAction_0()); }
(

)
{ after(grammarAccess.getAtInvokeAccess().getAtInvokeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtInvoke__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtInvoke__Group__1__Impl
	rule__AtInvoke__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtInvoke__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtInvokeAccess().getAlternatives_1()); }
(rule__AtInvoke__Alternatives_1)
{ after(grammarAccess.getAtInvokeAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtInvoke__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtInvoke__Group__2__Impl
	rule__AtInvoke__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AtInvoke__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtInvokeAccess().getNameAssignment_2()); }
(rule__AtInvoke__NameAssignment_2)
{ after(grammarAccess.getAtInvokeAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtInvoke__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtInvoke__Group__3__Impl
	rule__AtInvoke__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AtInvoke__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtInvokeAccess().getParameterTypesAssignment_3()); }
(rule__AtInvoke__ParameterTypesAssignment_3)?
{ after(grammarAccess.getAtInvokeAccess().getParameterTypesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtInvoke__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtInvoke__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtInvoke__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtInvokeAccess().getCounterAssignment_4()); }
(rule__AtInvoke__CounterAssignment_4)?
{ after(grammarAccess.getAtInvokeAccess().getCounterAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AfterInvoke__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterInvoke__Group__0__Impl
	rule__AfterInvoke__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterInvoke__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterInvokeAccess().getAfterInvokeAction_0()); }
(

)
{ after(grammarAccess.getAfterInvokeAccess().getAfterInvokeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AfterInvoke__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterInvoke__Group__1__Impl
	rule__AfterInvoke__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterInvoke__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterInvokeAccess().getAlternatives_1()); }
(rule__AfterInvoke__Alternatives_1)
{ after(grammarAccess.getAfterInvokeAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AfterInvoke__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterInvoke__Group__2__Impl
	rule__AfterInvoke__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterInvoke__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterInvokeAccess().getNameAssignment_2()); }
(rule__AfterInvoke__NameAssignment_2)
{ after(grammarAccess.getAfterInvokeAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AfterInvoke__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterInvoke__Group__3__Impl
	rule__AfterInvoke__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterInvoke__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterInvokeAccess().getParameterTypesAssignment_3()); }
(rule__AfterInvoke__ParameterTypesAssignment_3)?
{ after(grammarAccess.getAfterInvokeAccess().getParameterTypesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AfterInvoke__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterInvoke__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterInvoke__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterInvokeAccess().getCounterAssignment_4()); }
(rule__AfterInvoke__CounterAssignment_4)?
{ after(grammarAccess.getAfterInvokeAccess().getCounterAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AtSynchronize__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtSynchronize__Group__0__Impl
	rule__AtSynchronize__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtSynchronize__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtSynchronizeAccess().getAtSynchronizeAction_0()); }
(

)
{ after(grammarAccess.getAtSynchronizeAccess().getAtSynchronizeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtSynchronize__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtSynchronize__Group__1__Impl
	rule__AtSynchronize__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtSynchronize__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtSynchronizeAccess().getSYNCHRONIZEKeyword_1()); }

	'SYNCHRONIZE' 

{ after(grammarAccess.getAtSynchronizeAccess().getSYNCHRONIZEKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtSynchronize__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtSynchronize__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtSynchronize__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtSynchronizeAccess().getCounterAssignment_2()); }
(rule__AtSynchronize__CounterAssignment_2)?
{ after(grammarAccess.getAtSynchronizeAccess().getCounterAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AfterSynchronize__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterSynchronize__Group__0__Impl
	rule__AfterSynchronize__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterSynchronize__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterSynchronizeAccess().getAfterSynchronizeAction_0()); }
(

)
{ after(grammarAccess.getAfterSynchronizeAccess().getAfterSynchronizeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AfterSynchronize__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterSynchronize__Group__1__Impl
	rule__AfterSynchronize__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterSynchronize__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterSynchronizeAccess().getSYNCHRONIZEKeyword_1()); }

	'SYNCHRONIZE' 

{ after(grammarAccess.getAfterSynchronizeAccess().getSYNCHRONIZEKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AfterSynchronize__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AfterSynchronize__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AfterSynchronize__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterSynchronizeAccess().getCounterAssignment_2()); }
(rule__AfterSynchronize__CounterAssignment_2)?
{ after(grammarAccess.getAfterSynchronizeAccess().getCounterAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AtThrow__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtThrow__Group__0__Impl
	rule__AtThrow__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtThrow__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtThrowAccess().getAtThrowAction_0()); }
(

)
{ after(grammarAccess.getAtThrowAccess().getAtThrowAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtThrow__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtThrow__Group__1__Impl
	rule__AtThrow__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtThrow__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtThrowAccess().getTHROWKeyword_1()); }

	'THROW' 

{ after(grammarAccess.getAtThrowAccess().getTHROWKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtThrow__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtThrow__Group__2__Impl
	rule__AtThrow__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AtThrow__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtThrowAccess().getNameAssignment_2()); }
(rule__AtThrow__NameAssignment_2)?
{ after(grammarAccess.getAtThrowAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtThrow__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtThrow__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtThrow__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtThrowAccess().getCounterAssignment_3()); }
(rule__AtThrow__CounterAssignment_3)?
{ after(grammarAccess.getAtThrowAccess().getCounterAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ParameterTypes__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterTypes__Group__0__Impl
	rule__ParameterTypes__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterTypes__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterTypesAccess().getLPARENTerminalRuleCall_0()); }
	RULE_LPAREN
{ after(grammarAccess.getParameterTypesAccess().getLPARENTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterTypes__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterTypes__Group__1__Impl
	rule__ParameterTypes__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterTypes__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterTypesAccess().getParameterTypesAction_1()); }
(

)
{ after(grammarAccess.getParameterTypesAccess().getParameterTypesAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterTypes__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterTypes__Group__2__Impl
	rule__ParameterTypes__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterTypes__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterTypesAccess().getGroup_2()); }
(rule__ParameterTypes__Group_2__0)?
{ after(grammarAccess.getParameterTypesAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterTypes__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterTypes__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterTypes__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterTypesAccess().getRPARENTerminalRuleCall_3()); }
	RULE_RPAREN
{ after(grammarAccess.getParameterTypesAccess().getRPARENTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ParameterTypes__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterTypes__Group_2__0__Impl
	rule__ParameterTypes__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterTypes__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterTypesAccess().getParamTypeNamesAssignment_2_0()); }
(rule__ParameterTypes__ParamTypeNamesAssignment_2_0)
{ after(grammarAccess.getParameterTypesAccess().getParamTypeNamesAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterTypes__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterTypes__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterTypes__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterTypesAccess().getGroup_2_1()); }
(rule__ParameterTypes__Group_2_1__0)*
{ after(grammarAccess.getParameterTypesAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterTypes__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterTypes__Group_2_1__0__Impl
	rule__ParameterTypes__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterTypes__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterTypesAccess().getCOMMATerminalRuleCall_2_1_0()); }
	RULE_COMMA
{ after(grammarAccess.getParameterTypesAccess().getCOMMATerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterTypes__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterTypes__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterTypes__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterTypesAccess().getParamTypeNamesAssignment_2_1_1()); }
(rule__ParameterTypes__ParamTypeNamesAssignment_2_1_1)
{ after(grammarAccess.getParameterTypesAccess().getParamTypeNamesAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Bind__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bind__Group__0__Impl
	rule__Bind__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bind__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindAccess().getKEYWORD_BINDTerminalRuleCall_0()); }
	RULE_KEYWORD_BIND
{ after(grammarAccess.getBindAccess().getKEYWORD_BINDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bind__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bind__Group__1__Impl
	rule__Bind__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bind__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindAccess().getBindAction_1()); }
(

)
{ after(grammarAccess.getBindAccess().getBindAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bind__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bind__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bind__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindAccess().getAlternatives_2()); }
(rule__Bind__Alternatives_2)
{ after(grammarAccess.getBindAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Bindings__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bindings__Group__0__Impl
	rule__Bindings__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bindings__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindingsAccess().getBindingsAssignment_0()); }
(rule__Bindings__BindingsAssignment_0)
{ after(grammarAccess.getBindingsAccess().getBindingsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bindings__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bindings__Group__1__Impl
	rule__Bindings__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bindings__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindingsAccess().getGroup_1()); }
(rule__Bindings__Group_1__0)*
{ after(grammarAccess.getBindingsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bindings__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bindings__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bindings__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindingsAccess().getSEMICOLONTerminalRuleCall_2()); }
(	RULE_SEMICOLON)?
{ after(grammarAccess.getBindingsAccess().getSEMICOLONTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Bindings__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bindings__Group_1__0__Impl
	rule__Bindings__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bindings__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindingsAccess().getSEMICOLONTerminalRuleCall_1_0()); }
	RULE_SEMICOLON
{ after(grammarAccess.getBindingsAccess().getSEMICOLONTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bindings__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bindings__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bindings__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindingsAccess().getBindingsAssignment_1_1()); }
(rule__Bindings__BindingsAssignment_1_1)
{ after(grammarAccess.getBindingsAccess().getBindingsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Binding__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Binding__Group__0__Impl
	rule__Binding__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Binding__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindingAccess().getBindVariableAssignment_0()); }
(rule__Binding__BindVariableAssignment_0)
{ after(grammarAccess.getBindingAccess().getBindVariableAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Binding__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Binding__Group__1__Impl
	rule__Binding__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Binding__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindingAccess().getGroup_1()); }
(rule__Binding__Group_1__0)?
{ after(grammarAccess.getBindingAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Binding__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Binding__Group__2__Impl
	rule__Binding__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Binding__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindingAccess().getASSIGNTerminalRuleCall_2()); }
	RULE_ASSIGN
{ after(grammarAccess.getBindingAccess().getASSIGNTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Binding__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Binding__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Binding__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindingAccess().getValueAssignment_3()); }
(rule__Binding__ValueAssignment_3)
{ after(grammarAccess.getBindingAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Binding__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Binding__Group_1__0__Impl
	rule__Binding__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Binding__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindingAccess().getCOLONTerminalRuleCall_1_0()); }
	RULE_COLON
{ after(grammarAccess.getBindingAccess().getCOLONTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Binding__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Binding__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Binding__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindingAccess().getTypenameAssignment_1_1()); }
(rule__Binding__TypenameAssignment_1_1)
{ after(grammarAccess.getBindingAccess().getTypenameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Condition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getIFTerminalRuleCall_0()); }
	RULE_IF
{ after(grammarAccess.getConditionAccess().getIFTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getExpressionParserRuleCall_1()); }
	ruleExpression
{ after(grammarAccess.getConditionAccess().getExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Actions__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actions__Group__0__Impl
	rule__Actions__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actions__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionsAccess().getActionsAction_0()); }
(

)
{ after(grammarAccess.getActionsAccess().getActionsAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Actions__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actions__Group__1__Impl
	rule__Actions__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Actions__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionsAccess().getDOTerminalRuleCall_1()); }
	RULE_DO
{ after(grammarAccess.getActionsAccess().getDOTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Actions__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actions__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actions__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionsAccess().getAlternatives_2()); }
(rule__Actions__Alternatives_2)
{ after(grammarAccess.getActionsAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ActionList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionList__Group__0__Impl
	rule__ActionList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionListAccess().getActionsAssignment_0()); }
(rule__ActionList__ActionsAssignment_0)
{ after(grammarAccess.getActionListAccess().getActionsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionList__Group__1__Impl
	rule__ActionList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionListAccess().getGroup_1()); }
(rule__ActionList__Group_1__0)*
{ after(grammarAccess.getActionListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionListAccess().getSEMICOLONTerminalRuleCall_2()); }
(	RULE_SEMICOLON)?
{ after(grammarAccess.getActionListAccess().getSEMICOLONTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ActionList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionList__Group_1__0__Impl
	rule__ActionList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionListAccess().getSEMICOLONTerminalRuleCall_1_0()); }
	RULE_SEMICOLON
{ after(grammarAccess.getActionListAccess().getSEMICOLONTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionListAccess().getActionsAssignment_1_1()); }
(rule__ActionList__ActionsAssignment_1_1)
{ after(grammarAccess.getActionListAccess().getActionsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReturnExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnExpr__Group__0__Impl
	rule__ReturnExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnExprAccess().getOpAssignment_0()); }
(rule__ReturnExpr__OpAssignment_0)
{ after(grammarAccess.getReturnExprAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnExprAccess().getOperand1Assignment_1()); }
(rule__ReturnExpr__Operand1Assignment_1)?
{ after(grammarAccess.getReturnExprAccess().getOperand1Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ThrowExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ThrowExpr__Group__0__Impl
	rule__ThrowExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ThrowExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThrowExprAccess().getOpAssignment_0()); }
(rule__ThrowExpr__OpAssignment_0)
{ after(grammarAccess.getThrowExprAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ThrowExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ThrowExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ThrowExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThrowExprAccess().getOperand1Assignment_1()); }
(rule__ThrowExpr__Operand1Assignment_1)
{ after(grammarAccess.getThrowExprAccess().getOperand1Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AssignmentExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentExpr__Group__0__Impl
	rule__AssignmentExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExprAccess().getOperatorExprParserRuleCall_0()); }
	ruleOperatorExpr
{ after(grammarAccess.getAssignmentExprAccess().getOperatorExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExprAccess().getGroup_1()); }
(rule__AssignmentExpr__Group_1__0)*
{ after(grammarAccess.getAssignmentExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AssignmentExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentExpr__Group_1__0__Impl
	rule__AssignmentExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExprAccess().getAssignmentExprOperand1Action_1_0()); }
(

)
{ after(grammarAccess.getAssignmentExprAccess().getAssignmentExprOperand1Action_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentExpr__Group_1__1__Impl
	rule__AssignmentExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExprAccess().getOpAssignment_1_1()); }
(rule__AssignmentExpr__OpAssignment_1_1)
{ after(grammarAccess.getAssignmentExprAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExprAccess().getOperand2Assignment_1_2()); }
(rule__AssignmentExpr__Operand2Assignment_1_2)
{ after(grammarAccess.getAssignmentExprAccess().getOperand2Assignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OperatorExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorExpr__Group__0__Impl
	rule__OperatorExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorExprAccess().getPlusMinusOperandParserRuleCall_0()); }
	rulePlusMinusOperand
{ after(grammarAccess.getOperatorExprAccess().getPlusMinusOperandParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorExprAccess().getGroup_1()); }
(rule__OperatorExpr__Group_1__0)*
{ after(grammarAccess.getOperatorExprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperatorExpr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorExpr__Group_1__0__Impl
	rule__OperatorExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorExpr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorExprAccess().getOperatorExprOperand1Action_1_0()); }
(

)
{ after(grammarAccess.getOperatorExprAccess().getOperatorExprOperand1Action_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorExpr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorExpr__Group_1__1__Impl
	rule__OperatorExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorExpr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorExprAccess().getOpAssignment_1_1()); }
(rule__OperatorExpr__OpAssignment_1_1)
{ after(grammarAccess.getOperatorExprAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorExpr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorExpr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorExprAccess().getOperand2Assignment_1_2()); }
(rule__OperatorExpr__Operand2Assignment_1_2)
{ after(grammarAccess.getOperatorExprAccess().getOperand2Assignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PlusMinusOperand__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusMinusOperand__Group__0__Impl
	rule__PlusMinusOperand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusOperand__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusMinusOperandAccess().getTimesDivOperandParserRuleCall_0()); }
	ruleTimesDivOperand
{ after(grammarAccess.getPlusMinusOperandAccess().getTimesDivOperandParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PlusMinusOperand__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusMinusOperand__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusOperand__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusMinusOperandAccess().getGroup_1()); }
(rule__PlusMinusOperand__Group_1__0)*
{ after(grammarAccess.getPlusMinusOperandAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PlusMinusOperand__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusMinusOperand__Group_1__0__Impl
	rule__PlusMinusOperand__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusOperand__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusMinusOperandAccess().getPlusMinusOperandOperand1Action_1_0()); }
(

)
{ after(grammarAccess.getPlusMinusOperandAccess().getPlusMinusOperandOperand1Action_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PlusMinusOperand__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusMinusOperand__Group_1__1__Impl
	rule__PlusMinusOperand__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusOperand__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusMinusOperandAccess().getOpAssignment_1_1()); }
(rule__PlusMinusOperand__OpAssignment_1_1)
{ after(grammarAccess.getPlusMinusOperandAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PlusMinusOperand__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusMinusOperand__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusOperand__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusMinusOperandAccess().getOperand2Assignment_1_2()); }
(rule__PlusMinusOperand__Operand2Assignment_1_2)
{ after(grammarAccess.getPlusMinusOperandAccess().getOperand2Assignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TimesDivOperand__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimesDivOperand__Group_0__0__Impl
	rule__TimesDivOperand__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimesDivOperand__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimesDivOperandAccess().getBitwiseOperandParserRuleCall_0_0()); }
	ruleBitwiseOperand
{ after(grammarAccess.getTimesDivOperandAccess().getBitwiseOperandParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimesDivOperand__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimesDivOperand__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimesDivOperand__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimesDivOperandAccess().getGroup_0_1()); }
(rule__TimesDivOperand__Group_0_1__0)*
{ after(grammarAccess.getTimesDivOperandAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TimesDivOperand__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimesDivOperand__Group_0_1__0__Impl
	rule__TimesDivOperand__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimesDivOperand__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimesDivOperandAccess().getTimesDivOperandOperand1Action_0_1_0()); }
(

)
{ after(grammarAccess.getTimesDivOperandAccess().getTimesDivOperandOperand1Action_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimesDivOperand__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimesDivOperand__Group_0_1__1__Impl
	rule__TimesDivOperand__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TimesDivOperand__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimesDivOperandAccess().getOpAssignment_0_1_1()); }
(rule__TimesDivOperand__OpAssignment_0_1_1)
{ after(grammarAccess.getTimesDivOperandAccess().getOpAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimesDivOperand__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimesDivOperand__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimesDivOperand__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimesDivOperandAccess().getOperand2Assignment_0_1_2()); }
(rule__TimesDivOperand__Operand2Assignment_0_1_2)
{ after(grammarAccess.getTimesDivOperandAccess().getOperand2Assignment_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TimesDivOperand__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimesDivOperand__Group_1__0__Impl
	rule__TimesDivOperand__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimesDivOperand__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimesDivOperandAccess().getOpAssignment_1_0()); }
(rule__TimesDivOperand__OpAssignment_1_0)
{ after(grammarAccess.getTimesDivOperandAccess().getOpAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimesDivOperand__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimesDivOperand__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimesDivOperand__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimesDivOperandAccess().getOperand1Assignment_1_1()); }
(rule__TimesDivOperand__Operand1Assignment_1_1)
{ after(grammarAccess.getTimesDivOperandAccess().getOperand1Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitwiseOperand__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseOperand__Group__0__Impl
	rule__BitwiseOperand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOperand__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOperandAccess().getAlternatives_0()); }
(rule__BitwiseOperand__Alternatives_0)
{ after(grammarAccess.getBitwiseOperandAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseOperand__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseOperand__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOperand__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOperandAccess().getGroup_1()); }
(rule__BitwiseOperand__Group_1__0)*
{ after(grammarAccess.getBitwiseOperandAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitwiseOperand__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseOperand__Group_1__0__Impl
	rule__BitwiseOperand__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOperand__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOperandAccess().getBitwiseOperandOperand1Action_1_0()); }
(

)
{ after(grammarAccess.getBitwiseOperandAccess().getBitwiseOperandOperand1Action_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseOperand__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseOperand__Group_1__1__Impl
	rule__BitwiseOperand__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOperand__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOperandAccess().getOpAssignment_1_1()); }
(rule__BitwiseOperand__OpAssignment_1_1)
{ after(grammarAccess.getBitwiseOperandAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitwiseOperand__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitwiseOperand__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOperand__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOperandAccess().getOperand2Assignment_1_2()); }
(rule__BitwiseOperand__Operand2Assignment_1_2)
{ after(grammarAccess.getBitwiseOperandAccess().getOperand2Assignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NotOperand__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotOperand__Group__0__Impl
	rule__NotOperand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperand__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperandAccess().getOpAssignment_0()); }
(rule__NotOperand__OpAssignment_0)
{ after(grammarAccess.getNotOperandAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotOperand__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotOperand__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperand__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperandAccess().getOperand1Assignment_1()); }
(rule__NotOperand__Operand1Assignment_1)
{ after(grammarAccess.getNotOperandAccess().getOperand1Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOperand__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOperand__Group__0__Impl
	rule__LogicalOperand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperand__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOperandAccess().getComparisonOperandParserRuleCall_0()); }
	ruleComparisonOperand
{ after(grammarAccess.getLogicalOperandAccess().getComparisonOperandParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOperand__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOperand__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperand__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOperandAccess().getGroup_1()); }
(rule__LogicalOperand__Group_1__0)*
{ after(grammarAccess.getLogicalOperandAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOperand__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOperand__Group_1__0__Impl
	rule__LogicalOperand__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperand__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOperandAccess().getLogicalOperandOperand1Action_1_0()); }
(

)
{ after(grammarAccess.getLogicalOperandAccess().getLogicalOperandOperand1Action_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOperand__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOperand__Group_1__1__Impl
	rule__LogicalOperand__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperand__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOperandAccess().getOpAssignment_1_1()); }
(rule__LogicalOperand__OpAssignment_1_1)
{ after(grammarAccess.getLogicalOperandAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOperand__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOperand__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperand__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOperandAccess().getOperand2Assignment_1_2()); }
(rule__LogicalOperand__Operand2Assignment_1_2)
{ after(grammarAccess.getLogicalOperandAccess().getOperand2Assignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AccessExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpr__Group__0__Impl
	rule__AccessExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExprAccess().getAccessBaseExprParserRuleCall_0()); }
	ruleAccessBaseExpr
{ after(grammarAccess.getAccessExprAccess().getAccessBaseExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExprAccess().getAlternatives_1()); }
(rule__AccessExpr__Alternatives_1)*
{ after(grammarAccess.getAccessExprAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AccessExpr__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpr__Group_1_0__0__Impl
	rule__AccessExpr__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpr__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_0_0()); }
(

)
{ after(grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpr__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpr__Group_1_0__1__Impl
	rule__AccessExpr__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpr__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExprAccess().getOpAssignment_1_0_1()); }
(rule__AccessExpr__OpAssignment_1_0_1)
{ after(grammarAccess.getAccessExprAccess().getOpAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpr__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpr__Group_1_0__2__Impl
	rule__AccessExpr__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpr__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExprAccess().getOperand2Assignment_1_0_2()); }
(rule__AccessExpr__Operand2Assignment_1_0_2)
{ after(grammarAccess.getAccessExprAccess().getOperand2Assignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpr__Group_1_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpr__Group_1_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpr__Group_1_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExprAccess().getRSQUARETerminalRuleCall_1_0_3()); }
	RULE_RSQUARE
{ after(grammarAccess.getAccessExprAccess().getRSQUARETerminalRuleCall_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AccessExpr__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpr__Group_1_1__0__Impl
	rule__AccessExpr__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpr__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_1_0()); }
(

)
{ after(grammarAccess.getAccessExprAccess().getAccessExprOperand1Action_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpr__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpr__Group_1_1__1__Impl
	rule__AccessExpr__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpr__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExprAccess().getOpAssignment_1_1_1()); }
(rule__AccessExpr__OpAssignment_1_1_1)
{ after(grammarAccess.getAccessExprAccess().getOpAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpr__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpr__Group_1_1__2__Impl
	rule__AccessExpr__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpr__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExprAccess().getValueAssignment_1_1_2()); }
(rule__AccessExpr__ValueAssignment_1_1_2)
{ after(grammarAccess.getAccessExprAccess().getValueAssignment_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessExpr__Group_1_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessExpr__Group_1_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpr__Group_1_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExprAccess().getArgsAssignment_1_1_3()); }
(rule__AccessExpr__ArgsAssignment_1_1_3)?
{ after(grammarAccess.getAccessExprAccess().getArgsAssignment_1_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BuiltinExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BuiltinExpr__Group__0__Impl
	rule__BuiltinExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltinExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltinExprAccess().getBuiltinExprAction_0()); }
(

)
{ after(grammarAccess.getBuiltinExprAccess().getBuiltinExprAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BuiltinExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BuiltinExpr__Group__1__Impl
	rule__BuiltinExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltinExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltinExprAccess().getValueAssignment_1()); }
(rule__BuiltinExpr__ValueAssignment_1)
{ after(grammarAccess.getBuiltinExprAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BuiltinExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BuiltinExpr__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltinExpr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltinExprAccess().getArgsAssignment_2()); }
(rule__BuiltinExpr__ArgsAssignment_2)
{ after(grammarAccess.getBuiltinExprAccess().getArgsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NewExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewExpr__Group__0__Impl
	rule__NewExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NewExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewExprAccess().getNewExprAction_0()); }
(

)
{ after(grammarAccess.getNewExprAccess().getNewExprAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NewExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewExpr__Group__1__Impl
	rule__NewExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NewExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewExprAccess().getOpAssignment_1()); }
(rule__NewExpr__OpAssignment_1)
{ after(grammarAccess.getNewExprAccess().getOpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NewExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewExpr__Group__2__Impl
	rule__NewExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NewExpr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewExprAccess().getValueAssignment_2()); }
(rule__NewExpr__ValueAssignment_2)
{ after(grammarAccess.getNewExprAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NewExpr__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NewExpr__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NewExpr__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewExprAccess().getParamsAssignment_3()); }
(rule__NewExpr__ParamsAssignment_3)
{ after(grammarAccess.getNewExprAccess().getParamsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__CallArguments__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CallArguments__Group__0__Impl
	rule__CallArguments__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CallArguments__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallArgumentsAccess().getLPARENTerminalRuleCall_0()); }
	RULE_LPAREN
{ after(grammarAccess.getCallArgumentsAccess().getLPARENTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CallArguments__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CallArguments__Group__1__Impl
	rule__CallArguments__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CallArguments__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallArgumentsAccess().getCallArgumentsAction_1()); }
(

)
{ after(grammarAccess.getCallArgumentsAccess().getCallArgumentsAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CallArguments__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CallArguments__Group__2__Impl
	rule__CallArguments__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CallArguments__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallArgumentsAccess().getGroup_2()); }
(rule__CallArguments__Group_2__0)?
{ after(grammarAccess.getCallArgumentsAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CallArguments__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CallArguments__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CallArguments__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallArgumentsAccess().getRPARENTerminalRuleCall_3()); }
	RULE_RPAREN
{ after(grammarAccess.getCallArgumentsAccess().getRPARENTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__CallArguments__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CallArguments__Group_2__0__Impl
	rule__CallArguments__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CallArguments__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallArgumentsAccess().getArgsAssignment_2_0()); }
(rule__CallArguments__ArgsAssignment_2_0)
{ after(grammarAccess.getCallArgumentsAccess().getArgsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CallArguments__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CallArguments__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CallArguments__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallArgumentsAccess().getGroup_2_1()); }
(rule__CallArguments__Group_2_1__0)*
{ after(grammarAccess.getCallArgumentsAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CallArguments__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CallArguments__Group_2_1__0__Impl
	rule__CallArguments__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CallArguments__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallArgumentsAccess().getCOMMATerminalRuleCall_2_1_0()); }
	RULE_COMMA
{ after(grammarAccess.getCallArgumentsAccess().getCOMMATerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CallArguments__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CallArguments__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CallArguments__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallArgumentsAccess().getArgsAssignment_2_1_1()); }
(rule__CallArguments__ArgsAssignment_2_1_1)
{ after(grammarAccess.getCallArgumentsAccess().getArgsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getDOTTerminalRuleCall_1_0()); }
	RULE_DOT
{ after(grammarAccess.getQualifiedNameAccess().getDOTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IndexedSpecialVar__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexedSpecialVar__Group__0__Impl
	rule__IndexedSpecialVar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexedSpecialVar__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexedSpecialVarAccess().getOpAssignment_0()); }
(rule__IndexedSpecialVar__OpAssignment_0)
{ after(grammarAccess.getIndexedSpecialVarAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IndexedSpecialVar__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexedSpecialVar__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexedSpecialVar__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexedSpecialVarAccess().getValueAssignment_1()); }
(rule__IndexedSpecialVar__ValueAssignment_1)
{ after(grammarAccess.getIndexedSpecialVarAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SpecialVar__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpecialVar__Group_5__0__Impl
	rule__SpecialVar__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialVar__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialVarAccess().getOpAssignment_5_0()); }
(rule__SpecialVar__OpAssignment_5_0)
{ after(grammarAccess.getSpecialVarAccess().getOpAssignment_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SpecialVar__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SpecialVar__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialVar__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialVarAccess().getValueAssignment_5_1()); }
(rule__SpecialVar__ValueAssignment_5_1)
{ after(grammarAccess.getSpecialVarAccess().getValueAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BracketedExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracketedExpr__Group__0__Impl
	rule__BracketedExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketedExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracketedExprAccess().getLPARENTerminalRuleCall_0()); }
	RULE_LPAREN
{ after(grammarAccess.getBracketedExprAccess().getLPARENTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BracketedExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracketedExpr__Group__1__Impl
	rule__BracketedExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketedExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracketedExprAccess().getExpressionParserRuleCall_1()); }
	ruleExpression
{ after(grammarAccess.getBracketedExprAccess().getExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BracketedExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracketedExpr__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketedExpr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracketedExprAccess().getRPARENTerminalRuleCall_2()); }
	RULE_RPAREN
{ after(grammarAccess.getBracketedExprAccess().getRPARENTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IntConstantExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntConstantExpr__Group__0__Impl
	rule__IntConstantExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntConstantExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0()); }
(

)
{ after(grammarAccess.getIntConstantExprAccess().getIntConstantExprAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntConstantExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntConstantExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntConstantExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntConstantExprAccess().getValueAssignment_1()); }
(rule__IntConstantExpr__ValueAssignment_1)
{ after(grammarAccess.getIntConstantExprAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringConstantExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstantExpr__Group__0__Impl
	rule__StringConstantExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstantExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0()); }
(

)
{ after(grammarAccess.getStringConstantExprAccess().getStringConstantExprAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringConstantExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringConstantExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstantExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstantExprAccess().getValueAssignment_1()); }
(rule__StringConstantExpr__ValueAssignment_1)
{ after(grammarAccess.getStringConstantExprAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanConstantExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanConstantExpr__Group__0__Impl
	rule__BooleanConstantExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanConstantExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0()); }
(

)
{ after(grammarAccess.getBooleanConstantExprAccess().getBooleanConstantExprAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanConstantExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanConstantExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanConstantExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanConstantExprAccess().getValueAssignment_1()); }
(rule__BooleanConstantExpr__ValueAssignment_1)
{ after(grammarAccess.getBooleanConstantExprAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FloatConstantExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatConstantExpr__Group__0__Impl
	rule__FloatConstantExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatConstantExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0()); }
(

)
{ after(grammarAccess.getFloatConstantExprAccess().getFloatConstantExprAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FloatConstantExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatConstantExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatConstantExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatConstantExprAccess().getValueAssignment_1()); }
(rule__FloatConstantExpr__ValueAssignment_1)
{ after(grammarAccess.getFloatConstantExprAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__DomainModel__ElementsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainModelAccess().getElementsElementParserRuleCall_1_0_0()); }
	ruleElement{ after(grammarAccess.getDomainModelAccess().getElementsElementParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BytemanRule__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBytemanRuleAccess().getNameSTART_RULETerminalRuleCall_0_0()); }
	RULE_START_RULE{ after(grammarAccess.getBytemanRuleAccess().getNameSTART_RULETerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BytemanRule__EventAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBytemanRuleAccess().getEventEventParserRuleCall_2_0()); }
	ruleEvent{ after(grammarAccess.getBytemanRuleAccess().getEventEventParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BytemanRule__BodyAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBytemanRuleAccess().getBodyBodyParserRuleCall_3_0()); }
	ruleBody{ after(grammarAccess.getBytemanRuleAccess().getBodyBodyParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Body__BindAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getBindBindParserRuleCall_0_0()); }
	ruleBind{ after(grammarAccess.getBodyAccess().getBindBindParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Body__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getConditionConditionParserRuleCall_1_0()); }
	ruleCondition{ after(grammarAccess.getBodyAccess().getConditionConditionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Body__ActionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getActionsActionsParserRuleCall_2_0()); }
	ruleActions{ after(grammarAccess.getBodyAccess().getActionsActionsParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__ClassAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getClassEventClassParserRuleCall_0_0_0()); }
	ruleEventClass{ after(grammarAccess.getEventAccess().getClassEventClassParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__InterfaceAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getInterfaceEventInterfaceParserRuleCall_0_1_0()); }
	ruleEventInterface{ after(grammarAccess.getEventAccess().getInterfaceEventInterfaceParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__MethodAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getMethodEventMethodParserRuleCall_2_0()); }
	ruleEventMethod{ after(grammarAccess.getEventAccess().getMethodEventMethodParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__HelperAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getHelperHelperParserRuleCall_4_0_0()); }
	ruleHelper{ after(grammarAccess.getEventAccess().getHelperHelperParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__LocationSpecAssignment_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getLocationSpecLocationSpecifierParserRuleCall_5_0_0()); }
	ruleLocationSpecifier{ after(grammarAccess.getEventAccess().getLocationSpecLocationSpecifierParserRuleCall_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventClass__KeywordAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventClassAccess().getKeywordKEYWORD_CLASSTerminalRuleCall_0_0()); }
	RULE_KEYWORD_CLASS{ after(grammarAccess.getEventClassAccess().getKeywordKEYWORD_CLASSTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventClass__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventClassAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getEventClassAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventInterface__KeywordAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventInterfaceAccess().getKeywordKEYWORD_INTERFACETerminalRuleCall_0_0()); }
	RULE_KEYWORD_INTERFACE{ after(grammarAccess.getEventInterfaceAccess().getKeywordKEYWORD_INTERFACETerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventInterface__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventInterfaceAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getEventInterfaceAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventMethod__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventMethodAccess().getNameMethodNameParserRuleCall_1_0()); }
	ruleMethodName{ after(grammarAccess.getEventMethodAccess().getNameMethodNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventMethod__ParameterTypesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventMethodAccess().getParameterTypesParameterTypesParserRuleCall_2_0()); }
	ruleParameterTypes{ after(grammarAccess.getEventMethodAccess().getParameterTypesParameterTypesParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Helper__HelperAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHelperAccess().getHelperQualifiedNameParserRuleCall_2_0()); }
	ruleQualifiedName{ after(grammarAccess.getHelperAccess().getHelperQualifiedNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtLine__LineAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtLineAccess().getLineINTVALTerminalRuleCall_2_0()); }
	RULE_INTVAL{ after(grammarAccess.getAtLineAccess().getLineINTVALTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtReadField__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtReadFieldAccess().getNameQualifiedNameParserRuleCall_2_0()); }
	ruleQualifiedName{ after(grammarAccess.getAtReadFieldAccess().getNameQualifiedNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtReadField__CounterAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtReadFieldAccess().getCounterCounterParserRuleCall_3_0()); }
	ruleCounter{ after(grammarAccess.getAtReadFieldAccess().getCounterCounterParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtReadLocal__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtReadLocalAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getAtReadLocalAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtReadLocal__CounterAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtReadLocalAccess().getCounterCounterParserRuleCall_4_0()); }
	ruleCounter{ after(grammarAccess.getAtReadLocalAccess().getCounterCounterParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AfterReadField__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterReadFieldAccess().getNameQualifiedNameParserRuleCall_2_0()); }
	ruleQualifiedName{ after(grammarAccess.getAfterReadFieldAccess().getNameQualifiedNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AfterReadField__CounterAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterReadFieldAccess().getCounterCounterParserRuleCall_3_0()); }
	ruleCounter{ after(grammarAccess.getAfterReadFieldAccess().getCounterCounterParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AfterReadLocal__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterReadLocalAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getAfterReadLocalAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AfterReadLocal__CounterAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterReadLocalAccess().getCounterCounterParserRuleCall_4_0()); }
	ruleCounter{ after(grammarAccess.getAfterReadLocalAccess().getCounterCounterParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtWriteField__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtWriteFieldAccess().getNameQualifiedNameParserRuleCall_2_0()); }
	ruleQualifiedName{ after(grammarAccess.getAtWriteFieldAccess().getNameQualifiedNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtWriteField__CounterAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtWriteFieldAccess().getCounterCounterParserRuleCall_3_0()); }
	ruleCounter{ after(grammarAccess.getAtWriteFieldAccess().getCounterCounterParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtWriteLocal__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtWriteLocalAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getAtWriteLocalAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtWriteLocal__CounterAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtWriteLocalAccess().getCounterCounterParserRuleCall_4_0()); }
	ruleCounter{ after(grammarAccess.getAtWriteLocalAccess().getCounterCounterParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AfterWriteField__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterWriteFieldAccess().getNameQualifiedNameParserRuleCall_2_0()); }
	ruleQualifiedName{ after(grammarAccess.getAfterWriteFieldAccess().getNameQualifiedNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AfterWriteField__CounterAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterWriteFieldAccess().getCounterCounterParserRuleCall_3_0()); }
	ruleCounter{ after(grammarAccess.getAfterWriteFieldAccess().getCounterCounterParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AfterWriteLocal__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterWriteLocalAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getAfterWriteLocalAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AfterWriteLocal__CounterAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterWriteLocalAccess().getCounterCounterParserRuleCall_4_0()); }
	ruleCounter{ after(grammarAccess.getAfterWriteLocalAccess().getCounterCounterParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtInvoke__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtInvokeAccess().getNameQualifiedNameParserRuleCall_2_0()); }
	ruleQualifiedName{ after(grammarAccess.getAtInvokeAccess().getNameQualifiedNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtInvoke__ParameterTypesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtInvokeAccess().getParameterTypesParameterTypesParserRuleCall_3_0()); }
	ruleParameterTypes{ after(grammarAccess.getAtInvokeAccess().getParameterTypesParameterTypesParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtInvoke__CounterAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtInvokeAccess().getCounterCounterParserRuleCall_4_0()); }
	ruleCounter{ after(grammarAccess.getAtInvokeAccess().getCounterCounterParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AfterInvoke__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterInvokeAccess().getNameQualifiedNameParserRuleCall_2_0()); }
	ruleQualifiedName{ after(grammarAccess.getAfterInvokeAccess().getNameQualifiedNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AfterInvoke__ParameterTypesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterInvokeAccess().getParameterTypesParameterTypesParserRuleCall_3_0()); }
	ruleParameterTypes{ after(grammarAccess.getAfterInvokeAccess().getParameterTypesParameterTypesParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AfterInvoke__CounterAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterInvokeAccess().getCounterCounterParserRuleCall_4_0()); }
	ruleCounter{ after(grammarAccess.getAfterInvokeAccess().getCounterCounterParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtSynchronize__CounterAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtSynchronizeAccess().getCounterCounterParserRuleCall_2_0()); }
	ruleCounter{ after(grammarAccess.getAtSynchronizeAccess().getCounterCounterParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AfterSynchronize__CounterAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAfterSynchronizeAccess().getCounterCounterParserRuleCall_2_0()); }
	ruleCounter{ after(grammarAccess.getAfterSynchronizeAccess().getCounterCounterParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtThrow__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtThrowAccess().getNameQualifiedNameParserRuleCall_2_0()); }
	ruleQualifiedName{ after(grammarAccess.getAtThrowAccess().getNameQualifiedNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtThrow__CounterAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtThrowAccess().getCounterCounterParserRuleCall_3_0()); }
	ruleCounter{ after(grammarAccess.getAtThrowAccess().getCounterCounterParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterTypes__ParamTypeNamesAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterTypesAccess().getParamTypeNamesParamTypeNameParserRuleCall_2_0_0()); }
	ruleParamTypeName{ after(grammarAccess.getParameterTypesAccess().getParamTypeNamesParamTypeNameParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterTypes__ParamTypeNamesAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterTypesAccess().getParamTypeNamesParamTypeNameParserRuleCall_2_1_1_0()); }
	ruleParamTypeName{ after(grammarAccess.getParameterTypesAccess().getParamTypeNamesParamTypeNameParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bind__BindAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindAccess().getBindBindingsParserRuleCall_2_1_0()); }
	ruleBindings{ after(grammarAccess.getBindAccess().getBindBindingsParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bindings__BindingsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindingsAccess().getBindingsBindingParserRuleCall_0_0()); }
	ruleBinding{ after(grammarAccess.getBindingsAccess().getBindingsBindingParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bindings__BindingsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindingsAccess().getBindingsBindingParserRuleCall_1_1_0()); }
	ruleBinding{ after(grammarAccess.getBindingsAccess().getBindingsBindingParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Binding__BindVariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindingAccess().getBindVariableBindVariableParserRuleCall_0_0()); }
	ruleBindVariable{ after(grammarAccess.getBindingAccess().getBindVariableBindVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Binding__TypenameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindingAccess().getTypenameTypeNameParserRuleCall_1_1_0()); }
	ruleTypeName{ after(grammarAccess.getBindingAccess().getTypenameTypeNameParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Binding__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBindingAccess().getValueExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getBindingAccess().getValueExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Actions__ActionListAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionsAccess().getActionListActionListParserRuleCall_2_0_0()); }
	ruleActionList{ after(grammarAccess.getActionsAccess().getActionListActionListParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionList__ActionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionListAccess().getActionsActionParserRuleCall_0_0()); }
	ruleAction{ after(grammarAccess.getActionListAccess().getActionsActionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionList__ActionsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionListAccess().getActionsActionParserRuleCall_1_1_0()); }
	ruleAction{ after(grammarAccess.getActionListAccess().getActionsActionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnExpr__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnExprAccess().getOpKEYWORD_RETURNTerminalRuleCall_0_0()); }
	RULE_KEYWORD_RETURN{ after(grammarAccess.getReturnExprAccess().getOpKEYWORD_RETURNTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnExpr__Operand1Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnExprAccess().getOperand1ExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getReturnExprAccess().getOperand1ExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ThrowExpr__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThrowExprAccess().getOpKEYWORD_THROWTerminalRuleCall_0_0()); }
	RULE_KEYWORD_THROW{ after(grammarAccess.getThrowExprAccess().getOpKEYWORD_THROWTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ThrowExpr__Operand1Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThrowExprAccess().getOperand1ExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getThrowExprAccess().getOperand1ExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpr__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExprAccess().getOpASSIGNTerminalRuleCall_1_1_0()); }
	RULE_ASSIGN{ after(grammarAccess.getAssignmentExprAccess().getOpASSIGNTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentExpr__Operand2Assignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentExprAccess().getOperand2OperatorExprParserRuleCall_1_2_0()); }
	ruleOperatorExpr{ after(grammarAccess.getAssignmentExprAccess().getOperand2OperatorExprParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorExpr__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorExprAccess().getOpAlternatives_1_1_0()); }
(rule__OperatorExpr__OpAlternatives_1_1_0)
{ after(grammarAccess.getOperatorExprAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorExpr__Operand2Assignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorExprAccess().getOperand2PlusMinusOperandParserRuleCall_1_2_0()); }
	rulePlusMinusOperand{ after(grammarAccess.getOperatorExprAccess().getOperand2PlusMinusOperandParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusOperand__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusMinusOperandAccess().getOpAlternatives_1_1_0()); }
(rule__PlusMinusOperand__OpAlternatives_1_1_0)
{ after(grammarAccess.getPlusMinusOperandAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PlusMinusOperand__Operand2Assignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusMinusOperandAccess().getOperand2TimesDivOperandParserRuleCall_1_2_0()); }
	ruleTimesDivOperand{ after(grammarAccess.getPlusMinusOperandAccess().getOperand2TimesDivOperandParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimesDivOperand__OpAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimesDivOperandAccess().getOpAlternatives_0_1_1_0()); }
(rule__TimesDivOperand__OpAlternatives_0_1_1_0)
{ after(grammarAccess.getTimesDivOperandAccess().getOpAlternatives_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimesDivOperand__Operand2Assignment_0_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimesDivOperandAccess().getOperand2BitwiseOperandParserRuleCall_0_1_2_0()); }
	ruleBitwiseOperand{ after(grammarAccess.getTimesDivOperandAccess().getOperand2BitwiseOperandParserRuleCall_0_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimesDivOperand__OpAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimesDivOperandAccess().getOpBNOTTerminalRuleCall_1_0_0()); }
	RULE_BNOT{ after(grammarAccess.getTimesDivOperandAccess().getOpBNOTTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimesDivOperand__Operand1Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimesDivOperandAccess().getOperand1BitwiseOperandParserRuleCall_1_1_0()); }
	ruleBitwiseOperand{ after(grammarAccess.getTimesDivOperandAccess().getOperand1BitwiseOperandParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOperand__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOperandAccess().getOpAlternatives_1_1_0()); }
(rule__BitwiseOperand__OpAlternatives_1_1_0)
{ after(grammarAccess.getBitwiseOperandAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitwiseOperand__Operand2Assignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitwiseOperandAccess().getOperand2Alternatives_1_2_0()); }
(rule__BitwiseOperand__Operand2Alternatives_1_2_0)
{ after(grammarAccess.getBitwiseOperandAccess().getOperand2Alternatives_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperand__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperandAccess().getOpNOTTerminalRuleCall_0_0()); }
	RULE_NOT{ after(grammarAccess.getNotOperandAccess().getOpNOTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperand__Operand1Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperandAccess().getOperand1LogicalOperandParserRuleCall_1_0()); }
	ruleLogicalOperand{ after(grammarAccess.getNotOperandAccess().getOperand1LogicalOperandParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperand__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOperandAccess().getOpAlternatives_1_1_0()); }
(rule__LogicalOperand__OpAlternatives_1_1_0)
{ after(grammarAccess.getLogicalOperandAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperand__Operand2Assignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOperandAccess().getOperand2ComparisonOperandParserRuleCall_1_2_0()); }
	ruleComparisonOperand{ after(grammarAccess.getLogicalOperandAccess().getOperand2ComparisonOperandParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpr__OpAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExprAccess().getOpLSQUARETerminalRuleCall_1_0_1_0()); }
	RULE_LSQUARE{ after(grammarAccess.getAccessExprAccess().getOpLSQUARETerminalRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpr__Operand2Assignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExprAccess().getOperand2ExpressionParserRuleCall_1_0_2_0()); }
	ruleExpression{ after(grammarAccess.getAccessExprAccess().getOperand2ExpressionParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpr__OpAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExprAccess().getOpDOTTerminalRuleCall_1_1_1_0()); }
	RULE_DOT{ after(grammarAccess.getAccessExprAccess().getOpDOTTerminalRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpr__ValueAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExprAccess().getValueIDTerminalRuleCall_1_1_2_0()); }
	RULE_ID{ after(grammarAccess.getAccessExprAccess().getValueIDTerminalRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessExpr__ArgsAssignment_1_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessExprAccess().getArgsCallArgumentsParserRuleCall_1_1_3_0()); }
	ruleCallArguments{ after(grammarAccess.getAccessExprAccess().getArgsCallArgumentsParserRuleCall_1_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltinExpr__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltinExprAccess().getValueIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getBuiltinExprAccess().getValueIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltinExpr__ArgsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltinExprAccess().getArgsCallArgumentsParserRuleCall_2_0()); }
	ruleCallArguments{ after(grammarAccess.getBuiltinExprAccess().getArgsCallArgumentsParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewExpr__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewExprAccess().getOpNEWTerminalRuleCall_1_0()); }
	RULE_NEW{ after(grammarAccess.getNewExprAccess().getOpNEWTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewExpr__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewExprAccess().getValueQualifiedNameParserRuleCall_2_0()); }
	ruleQualifiedName{ after(grammarAccess.getNewExprAccess().getValueQualifiedNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NewExpr__ParamsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNewExprAccess().getParamsCallArgumentsParserRuleCall_3_0()); }
	ruleCallArguments{ after(grammarAccess.getNewExprAccess().getParamsCallArgumentsParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CallArguments__ArgsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallArgumentsAccess().getArgsExpressionParserRuleCall_2_0_0()); }
	ruleExpression{ after(grammarAccess.getCallArgumentsAccess().getArgsExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CallArguments__ArgsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallArgumentsAccess().getArgsExpressionParserRuleCall_2_1_1_0()); }
	ruleExpression{ after(grammarAccess.getCallArgumentsAccess().getArgsExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleName__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleNameAccess().getValueIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getSimpleNameAccess().getValueIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IndexedSpecialVar__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexedSpecialVarAccess().getOpDOLLARTerminalRuleCall_0_0()); }
	RULE_DOLLAR{ after(grammarAccess.getIndexedSpecialVarAccess().getOpDOLLARTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IndexedSpecialVar__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexedSpecialVarAccess().getValueINTVALTerminalRuleCall_1_0()); }
	RULE_INTVAL{ after(grammarAccess.getIndexedSpecialVarAccess().getValueINTVALTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialVar__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialVarAccess().getOpDollarSignNumberSignKeyword_0_0()); }
(
{ before(grammarAccess.getSpecialVarAccess().getOpDollarSignNumberSignKeyword_0_0()); }

	'$#' 

{ after(grammarAccess.getSpecialVarAccess().getOpDollarSignNumberSignKeyword_0_0()); }
)

{ after(grammarAccess.getSpecialVarAccess().getOpDollarSignNumberSignKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialVar__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialVarAccess().getOpDollarSignExclamationMarkKeyword_1_0()); }
(
{ before(grammarAccess.getSpecialVarAccess().getOpDollarSignExclamationMarkKeyword_1_0()); }

	'$!' 

{ after(grammarAccess.getSpecialVarAccess().getOpDollarSignExclamationMarkKeyword_1_0()); }
)

{ after(grammarAccess.getSpecialVarAccess().getOpDollarSignExclamationMarkKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialVar__OpAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialVarAccess().getOpDollarSignCircumflexAccentKeyword_2_0()); }
(
{ before(grammarAccess.getSpecialVarAccess().getOpDollarSignCircumflexAccentKeyword_2_0()); }

	'$^' 

{ after(grammarAccess.getSpecialVarAccess().getOpDollarSignCircumflexAccentKeyword_2_0()); }
)

{ after(grammarAccess.getSpecialVarAccess().getOpDollarSignCircumflexAccentKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialVar__OpAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialVarAccess().getOpDollarSignCommercialAtKeyword_3_0()); }
(
{ before(grammarAccess.getSpecialVarAccess().getOpDollarSignCommercialAtKeyword_3_0()); }

	'$@' 

{ after(grammarAccess.getSpecialVarAccess().getOpDollarSignCommercialAtKeyword_3_0()); }
)

{ after(grammarAccess.getSpecialVarAccess().getOpDollarSignCommercialAtKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialVar__OpAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialVarAccess().getOpDollarSignAsteriskKeyword_4_0()); }
(
{ before(grammarAccess.getSpecialVarAccess().getOpDollarSignAsteriskKeyword_4_0()); }

	'$*' 

{ after(grammarAccess.getSpecialVarAccess().getOpDollarSignAsteriskKeyword_4_0()); }
)

{ after(grammarAccess.getSpecialVarAccess().getOpDollarSignAsteriskKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialVar__OpAssignment_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialVarAccess().getOpDOLLARTerminalRuleCall_5_0_0()); }
	RULE_DOLLAR{ after(grammarAccess.getSpecialVarAccess().getOpDOLLARTerminalRuleCall_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SpecialVar__ValueAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpecialVarAccess().getValueIDTerminalRuleCall_5_1_0()); }
	RULE_ID{ after(grammarAccess.getSpecialVarAccess().getValueIDTerminalRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntConstantExpr__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntConstantExprAccess().getValueINTVALTerminalRuleCall_1_0()); }
	RULE_INTVAL{ after(grammarAccess.getIntConstantExprAccess().getValueINTVALTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstantExpr__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstantExprAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getStringConstantExprAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanConstantExpr__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanConstantExprAccess().getValueBOOLEANTerminalRuleCall_1_0()); }
	RULE_BOOLEAN{ after(grammarAccess.getBooleanConstantExprAccess().getValueBOOLEANTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatConstantExpr__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatConstantExprAccess().getValueFLOATVALTerminalRuleCall_1_0()); }
	RULE_FLOATVAL{ after(grammarAccess.getFloatConstantExprAccess().getValueFLOATVALTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_QMARK : '?';

RULE_COMMA : ',';

RULE_DOT : '.';

RULE_COLON : ':';

RULE_NULL : 'null';

RULE_NEW : ('new'|'NEW');

RULE_SEMICOLON : ';';

RULE_BOOLEAN : ('TRUE'|'true'|'FALSE'|'false');

RULE_INIT : '<init>';

RULE_CLINIT : '<clinit>';

RULE_LPAREN : '(';

RULE_RPAREN : ')';

RULE_LSQUARE : '[';

RULE_RSQUARE : ']';

RULE_DOLLAR : '$';

RULE_PLUS : '+';

RULE_MINUS : '-';

RULE_MOD : '%';

RULE_DIV : '/';

RULE_TIMES : '*';

RULE_BAND : '&';

RULE_BOR : '|';

RULE_BNOT : '~';

RULE_BXOR : '^';

RULE_LT : '<';

RULE_LE : '<=';

RULE_GT : '>';

RULE_GE : '>=';

RULE_EQ : '==';

RULE_NE : '!=';

RULE_ASSIGN : '=';

RULE_FLOATVAL : (('0'..'9')+ '.' ('0'..'9')* RULE_EXPONENT? RULE_FLOATTYPESUFFIX?|'.' ('0'..'9')+ RULE_EXPONENT? RULE_FLOATTYPESUFFIX?|('0'..'9')+ RULE_EXPONENT RULE_FLOATTYPESUFFIX?|('0'..'9')+ RULE_FLOATTYPESUFFIX);

RULE_INTVAL : (('0'..'9')+ RULE_INTTYPESUFFIX?|'0x' ('0'..'9'|'A'..'F'|'a'..'f')+ RULE_INTTYPESUFFIX?|'0b' ('0'..'1')+ RULE_INTTYPESUFFIX?);

fragment RULE_EXPONENT : ('e'|'E') ('+'|'-')? ('0'..'9')+;

fragment RULE_FLOATTYPESUFFIX : ('f'|'F'|'d'|'D');

fragment RULE_INTTYPESUFFIX : ('L'|'l');

RULE_OR : ('OR'|'or'|'||');

RULE_AND : ('AND'|'and'|'&&');

RULE_NOT : ('NOT'|'not'|'!');

RULE_KEYWORD_CLASS : ('CLASS'|'class');

RULE_KEYWORD_METHOD : ('METHOD'|'method');

RULE_KEYWORD_INTERFACE : ('INTERFACE'|'interface');

RULE_IF : ('IF'|'if');

RULE_KEYWORD_BIND : ('BIND'|'bind');

RULE_NOTHING : ('NOTHING'|'nothing');

RULE_KEYWORD_THROW : ('THROW'|'throw');

RULE_KEYWORD_RETURN : ('RETURN'|'return');

RULE_DO : ('DO'|'do');

RULE_START_RULE : ('RULE' RULE_WS ( options {greedy=false;} : . )*RULE_EOL|'rule' RULE_WS ( options {greedy=false;} : . )*RULE_EOL);

RULE_END_RULE : ('ENDRULE'|'endrule');

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'$'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_BM_COMMENT : RULE_HASH ( options {greedy=false;} : . )*RULE_EOL;

RULE_HASH : '#';

RULE_EOL : ('\n'|'\r');

RULE_WS : (' '|'\t');


